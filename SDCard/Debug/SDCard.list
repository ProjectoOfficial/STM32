
SDCard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a8c  0800bb50  0800bb50  0000cb50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5dc  0800c5dc  0000e1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c5dc  0800c5dc  0000d5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5e4  0800c5e4  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5e4  0800c5e4  0000d5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5e8  0800c5e8  0000d5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800c5ec  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  200001ec  0800c7d8  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  0800c7d8  0000e744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcae  00000000  00000000  0000e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a6  00000000  00000000  0001beca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0001e370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bb  00000000  00000000  0001f030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018518  00000000  00000000  0001f9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001210e  00000000  00000000  00037f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a6f2  00000000  00000000  0004a011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4703  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048e0  00000000  00000000  000d4748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d9028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bb34 	.word	0x0800bb34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800bb34 	.word	0x0800bb34

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <myprintf>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...);

void myprintf(const char *fmt, ...) {
 8001030:	b40f      	push	{r0, r1, r2, r3}
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001046:	480b      	ldr	r0, [pc, #44]	@ (8001074 <myprintf+0x44>)
 8001048:	f007 f98e 	bl	8008368 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 800104c:	4809      	ldr	r0, [pc, #36]	@ (8001074 <myprintf+0x44>)
 800104e:	f7ff f917 	bl	8000280 <strlen>
 8001052:	4603      	mov	r3, r0
 8001054:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, -1);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	b29a      	uxth	r2, r3
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	4905      	ldr	r1, [pc, #20]	@ (8001074 <myprintf+0x44>)
 8001060:	4805      	ldr	r0, [pc, #20]	@ (8001078 <myprintf+0x48>)
 8001062:	f002 f82f 	bl	80030c4 <HAL_UART_Transmit>

}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001070:	b004      	add	sp, #16
 8001072:	4770      	bx	lr
 8001074:	200002a8 	.word	0x200002a8
 8001078:	20000260 	.word	0x20000260

0800107c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	f5ad 6d98 	sub.w	sp, sp, #1216	@ 0x4c0
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001084:	f000 fc0a 	bl	800189c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001088:	f000 f8fe 	bl	8001288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108c:	f000 f9c6 	bl	800141c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001090:	f000 f964 	bl	800135c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001094:	f000 f998 	bl	80013c8 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001098:	f002 fbd0 	bl	800383c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  myprintf("SD Card tutorial!\r\n");
 800109c:	486b      	ldr	r0, [pc, #428]	@ (800124c <main+0x1d0>)
 800109e:	f7ff ffc7 	bl	8001030 <myprintf>
  FIL fil;
  FRESULT fres;
  DWORD free_clusters, free_sectors, total_sectors;
  FATFS *pfs;

  fres = f_mount(&fs, "", 1);
 80010a2:	f507 731f 	add.w	r3, r7, #636	@ 0x27c
 80010a6:	2201      	movs	r2, #1
 80010a8:	4969      	ldr	r1, [pc, #420]	@ (8001250 <main+0x1d4>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 fa30 	bl	8006510 <f_mount>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 34bf 	strb.w	r3, [r7, #1215]	@ 0x4bf
  if(fres != FR_OK){
 80010b6:	f897 34bf 	ldrb.w	r3, [r7, #1215]	@ 0x4bf
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <main+0x52>
	  myprintf("f_mount error (%i)\r\n", fres);
 80010be:	f897 34bf 	ldrb.w	r3, [r7, #1215]	@ 0x4bf
 80010c2:	4619      	mov	r1, r3
 80010c4:	4863      	ldr	r0, [pc, #396]	@ (8001254 <main+0x1d8>)
 80010c6:	f7ff ffb3 	bl	8001030 <myprintf>
	  while(1);
 80010ca:	bf00      	nop
 80010cc:	e7fd      	b.n	80010ca <main+0x4e>
  }

  fres = f_getfree("", &free_clusters, &pfs);
 80010ce:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80010d2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010d6:	4619      	mov	r1, r3
 80010d8:	485d      	ldr	r0, [pc, #372]	@ (8001250 <main+0x1d4>)
 80010da:	f005 ff75 	bl	8006fc8 <f_getfree>
 80010de:	4603      	mov	r3, r0
 80010e0:	f887 34bf 	strb.w	r3, [r7, #1215]	@ 0x4bf
  if(fres != FR_OK){
 80010e4:	f897 34bf 	ldrb.w	r3, [r7, #1215]	@ 0x4bf
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d007      	beq.n	80010fc <main+0x80>
	  myprintf("f_getfree error (%i)\r\n", fres);
 80010ec:	f897 34bf 	ldrb.w	r3, [r7, #1215]	@ 0x4bf
 80010f0:	4619      	mov	r1, r3
 80010f2:	4859      	ldr	r0, [pc, #356]	@ (8001258 <main+0x1dc>)
 80010f4:	f7ff ff9c 	bl	8001030 <myprintf>
	  while(1);
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <main+0x7c>
  }

  total_sectors = (pfs->n_fatent -2) * pfs->csize;
 80010fc:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001100:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	3b02      	subs	r3, #2
 800110a:	f507 6298 	add.w	r2, r7, #1216	@ 0x4c0
 800110e:	f2a2 427c 	subw	r2, r2, #1148	@ 0x47c
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	8952      	ldrh	r2, [r2, #10]
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
  free_sectors = free_clusters * pfs->csize;
 800111e:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001122:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	895b      	ldrh	r3, [r3, #10]
 800112a:	461a      	mov	r2, r3
 800112c:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001130:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	fb02 f303 	mul.w	r3, r2, r3
 800113a:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 800113e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8001142:	0859      	lsrs	r1, r3, #1
 8001144:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 8001148:	085b      	lsrs	r3, r3, #1
 800114a:	461a      	mov	r2, r3
 800114c:	4843      	ldr	r0, [pc, #268]	@ (800125c <main+0x1e0>)
 800114e:	f7ff ff6f 	bl	8001030 <myprintf>

  //
  // SCRITTURA
  //

  fres = f_open(&fil, "franco.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001152:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001156:	221a      	movs	r2, #26
 8001158:	4941      	ldr	r1, [pc, #260]	@ (8001260 <main+0x1e4>)
 800115a:	4618      	mov	r0, r3
 800115c:	f005 fa1e 	bl	800659c <f_open>
 8001160:	4603      	mov	r3, r0
 8001162:	f887 34bf 	strb.w	r3, [r7, #1215]	@ 0x4bf
  if(fres == FR_OK){
 8001166:	f897 34bf 	ldrb.w	r3, [r7, #1215]	@ 0x4bf
 800116a:	2b00      	cmp	r3, #0
 800116c:	d103      	bne.n	8001176 <main+0xfa>
	  myprintf("I was able to create franco.txt\r\n");
 800116e:	483d      	ldr	r0, [pc, #244]	@ (8001264 <main+0x1e8>)
 8001170:	f7ff ff5e 	bl	8001030 <myprintf>
 8001174:	e002      	b.n	800117c <main+0x100>
  }
  else{
	  myprintf("Error! I was not able to create franco.txt\r\n");
 8001176:	483c      	ldr	r0, [pc, #240]	@ (8001268 <main+0x1ec>)
 8001178:	f7ff ff5a 	bl	8001030 <myprintf>
  }

  BYTE buffer[30];
  strcpy((char *) buffer, "Ciao, sono Pippo!");
 800117c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001180:	4a3a      	ldr	r2, [pc, #232]	@ (800126c <main+0x1f0>)
 8001182:	461c      	mov	r4, r3
 8001184:	4615      	mov	r5, r2
 8001186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118a:	682b      	ldr	r3, [r5, #0]
 800118c:	8023      	strh	r3, [r4, #0]

  UINT byteswrote;
  fres = f_write(&fil, buffer, 30, &byteswrote);
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001196:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800119a:	221e      	movs	r2, #30
 800119c:	f005 fcf7 	bl	8006b8e <f_write>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f887 34bf 	strb.w	r3, [r7, #1215]	@ 0x4bf
  if (fres == FR_OK){
 80011a6:	f897 34bf 	ldrb.w	r3, [r7, #1215]	@ 0x4bf
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d103      	bne.n	80011b6 <main+0x13a>
	  myprintf("Wrote %i bytes to franco.txt!\r\n");
 80011ae:	4830      	ldr	r0, [pc, #192]	@ (8001270 <main+0x1f4>)
 80011b0:	f7ff ff3e 	bl	8001030 <myprintf>
 80011b4:	e002      	b.n	80011bc <main+0x140>
  }
  else{
	  myprintf("f_write error (%i)\r\n");
 80011b6:	482f      	ldr	r0, [pc, #188]	@ (8001274 <main+0x1f8>)
 80011b8:	f7ff ff3a 	bl	8001030 <myprintf>
  }

  f_close(&fil);
 80011bc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011c0:	4618      	mov	r0, r3
 80011c2:	f005 fed7 	bl	8006f74 <f_close>

  //
  // LETTURA
  //

  HAL_Delay(500);
 80011c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011ca:	f000 fbd9 	bl	8001980 <HAL_Delay>

  fres = f_open(&fil, "franco.txt", FA_READ);
 80011ce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011d2:	2201      	movs	r2, #1
 80011d4:	4922      	ldr	r1, [pc, #136]	@ (8001260 <main+0x1e4>)
 80011d6:	4618      	mov	r0, r3
 80011d8:	f005 f9e0 	bl	800659c <f_open>
 80011dc:	4603      	mov	r3, r0
 80011de:	f887 34bf 	strb.w	r3, [r7, #1215]	@ 0x4bf
  if (fres != FR_OK) {
 80011e2:	f897 34bf 	ldrb.w	r3, [r7, #1215]	@ 0x4bf
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d007      	beq.n	80011fa <main+0x17e>
	   myprintf("f_open error (%i)\r\n", fres);
 80011ea:	f897 34bf 	ldrb.w	r3, [r7, #1215]	@ 0x4bf
 80011ee:	4619      	mov	r1, r3
 80011f0:	4821      	ldr	r0, [pc, #132]	@ (8001278 <main+0x1fc>)
 80011f2:	f7ff ff1d 	bl	8001030 <myprintf>
	   while(1);
 80011f6:	bf00      	nop
 80011f8:	e7fd      	b.n	80011f6 <main+0x17a>
    }

  myprintf("I was able to open 'franco.txt' for reading!\r\n");
 80011fa:	4820      	ldr	r0, [pc, #128]	@ (800127c <main+0x200>)
 80011fc:	f7ff ff18 	bl	8001030 <myprintf>

  BYTE READ_BUFF[30];
  TCHAR *res = f_gets((TCHAR *)READ_BUFF, 30, &fil);
 8001200:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001204:	463b      	mov	r3, r7
 8001206:	211e      	movs	r1, #30
 8001208:	4618      	mov	r0, r3
 800120a:	f005 ff92 	bl	8007132 <f_gets>
 800120e:	f8c7 04b0 	str.w	r0, [r7, #1200]	@ 0x4b0

  if(res != 0) {
 8001212:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	@ 0x4b0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <main+0x1aa>
   	myprintf("Read string from 'franco.txt' contents: %s\r\n", READ_BUFF);
 800121a:	463b      	mov	r3, r7
 800121c:	4619      	mov	r1, r3
 800121e:	4818      	ldr	r0, [pc, #96]	@ (8001280 <main+0x204>)
 8001220:	f7ff ff06 	bl	8001030 <myprintf>
 8001224:	e005      	b.n	8001232 <main+0x1b6>
     } else {
   	myprintf("f_gets error (%i)\r\n", fres);
 8001226:	f897 34bf 	ldrb.w	r3, [r7, #1215]	@ 0x4bf
 800122a:	4619      	mov	r1, r3
 800122c:	4815      	ldr	r0, [pc, #84]	@ (8001284 <main+0x208>)
 800122e:	f7ff feff 	bl	8001030 <myprintf>
     }

  f_close(&fil);
 8001232:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001236:	4618      	mov	r0, r3
 8001238:	f005 fe9c 	bl	8006f74 <f_close>


  f_mount(NULL, "", 0);
 800123c:	2200      	movs	r2, #0
 800123e:	4904      	ldr	r1, [pc, #16]	@ (8001250 <main+0x1d4>)
 8001240:	2000      	movs	r0, #0
 8001242:	f005 f965 	bl	8006510 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001246:	bf00      	nop
 8001248:	e7fd      	b.n	8001246 <main+0x1ca>
 800124a:	bf00      	nop
 800124c:	0800bb50 	.word	0x0800bb50
 8001250:	0800bb64 	.word	0x0800bb64
 8001254:	0800bb68 	.word	0x0800bb68
 8001258:	0800bb80 	.word	0x0800bb80
 800125c:	0800bb98 	.word	0x0800bb98
 8001260:	0800bbe0 	.word	0x0800bbe0
 8001264:	0800bbec 	.word	0x0800bbec
 8001268:	0800bc10 	.word	0x0800bc10
 800126c:	0800bc40 	.word	0x0800bc40
 8001270:	0800bc54 	.word	0x0800bc54
 8001274:	0800bc74 	.word	0x0800bc74
 8001278:	0800bc8c 	.word	0x0800bc8c
 800127c:	0800bca0 	.word	0x0800bca0
 8001280:	0800bcd0 	.word	0x0800bcd0
 8001284:	0800bd00 	.word	0x0800bd00

08001288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b094      	sub	sp, #80	@ 0x50
 800128c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	2230      	movs	r2, #48	@ 0x30
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f007 f874 	bl	8008384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	4b28      	ldr	r3, [pc, #160]	@ (8001354 <SystemClock_Config+0xcc>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	4a27      	ldr	r2, [pc, #156]	@ (8001354 <SystemClock_Config+0xcc>)
 80012b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80012bc:	4b25      	ldr	r3, [pc, #148]	@ (8001354 <SystemClock_Config+0xcc>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	4b22      	ldr	r3, [pc, #136]	@ (8001358 <SystemClock_Config+0xd0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012d4:	4a20      	ldr	r2, [pc, #128]	@ (8001358 <SystemClock_Config+0xd0>)
 80012d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001358 <SystemClock_Config+0xd0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e8:	2302      	movs	r3, #2
 80012ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ec:	2301      	movs	r3, #1
 80012ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f0:	2310      	movs	r3, #16
 80012f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f4:	2302      	movs	r3, #2
 80012f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f8:	2300      	movs	r3, #0
 80012fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012fc:	2308      	movs	r3, #8
 80012fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001300:	2354      	movs	r3, #84	@ 0x54
 8001302:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001304:	2302      	movs	r3, #2
 8001306:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001308:	2304      	movs	r3, #4
 800130a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130c:	f107 0320 	add.w	r3, r7, #32
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fddd 	bl	8001ed0 <HAL_RCC_OscConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800131c:	f000 f8ce 	bl	80014bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001320:	230f      	movs	r3, #15
 8001322:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001324:	2302      	movs	r3, #2
 8001326:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800132c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001330:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	2102      	movs	r1, #2
 800133c:	4618      	mov	r0, r3
 800133e:	f001 f83f 	bl	80023c0 <HAL_RCC_ClockConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001348:	f000 f8b8 	bl	80014bc <Error_Handler>
  }
}
 800134c:	bf00      	nop
 800134e:	3750      	adds	r7, #80	@ 0x50
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40023800 	.word	0x40023800
 8001358:	40007000 	.word	0x40007000

0800135c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001360:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <MX_SPI1_Init+0x64>)
 8001362:	4a18      	ldr	r2, [pc, #96]	@ (80013c4 <MX_SPI1_Init+0x68>)
 8001364:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <MX_SPI1_Init+0x64>)
 8001368:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800136c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800136e:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <MX_SPI1_Init+0x64>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001374:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <MX_SPI1_Init+0x64>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800137a:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_SPI1_Init+0x64>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <MX_SPI1_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <MX_SPI1_Init+0x64>)
 8001388:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800138c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <MX_SPI1_Init+0x64>)
 8001390:	2200      	movs	r2, #0
 8001392:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <MX_SPI1_Init+0x64>)
 8001396:	2200      	movs	r2, #0
 8001398:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MX_SPI1_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013a0:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <MX_SPI1_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <MX_SPI1_Init+0x64>)
 80013a8:	220a      	movs	r2, #10
 80013aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013ac:	4804      	ldr	r0, [pc, #16]	@ (80013c0 <MX_SPI1_Init+0x64>)
 80013ae:	f001 f9e7 	bl	8002780 <HAL_SPI_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013b8:	f000 f880 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000208 	.word	0x20000208
 80013c4:	40013000 	.word	0x40013000

080013c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <MX_USART1_UART_Init+0x50>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 80013d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <MX_USART1_UART_Init+0x4c>)
 8001400:	f001 fe10 	bl	8003024 <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800140a:	f000 f857 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000260 	.word	0x20000260
 8001418:	40011000 	.word	0x40011000

0800141c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b1f      	ldr	r3, [pc, #124]	@ (80014b4 <MX_GPIO_Init+0x98>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a1e      	ldr	r2, [pc, #120]	@ (80014b4 <MX_GPIO_Init+0x98>)
 800143c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <MX_GPIO_Init+0x98>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <MX_GPIO_Init+0x98>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a17      	ldr	r2, [pc, #92]	@ (80014b4 <MX_GPIO_Init+0x98>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <MX_GPIO_Init+0x98>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <MX_GPIO_Init+0x98>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a10      	ldr	r2, [pc, #64]	@ (80014b4 <MX_GPIO_Init+0x98>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <MX_GPIO_Init+0x98>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	2140      	movs	r1, #64	@ 0x40
 800148a:	480b      	ldr	r0, [pc, #44]	@ (80014b8 <MX_GPIO_Init+0x9c>)
 800148c:	f000 fd06 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001490:	2340      	movs	r3, #64	@ 0x40
 8001492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001498:	2301      	movs	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	4619      	mov	r1, r3
 80014a6:	4804      	ldr	r0, [pc, #16]	@ (80014b8 <MX_GPIO_Init+0x9c>)
 80014a8:	f000 fb74 	bl	8001b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020400 	.word	0x40020400

080014bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c0:	b672      	cpsid	i
}
 80014c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <Error_Handler+0x8>

080014c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <HAL_MspInit+0x4c>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001514 <HAL_MspInit+0x4c>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014de:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <HAL_MspInit+0x4c>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <HAL_MspInit+0x4c>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	4a08      	ldr	r2, [pc, #32]	@ (8001514 <HAL_MspInit+0x4c>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_MspInit+0x4c>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800

08001518 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	@ 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a19      	ldr	r2, [pc, #100]	@ (800159c <HAL_SPI_MspInit+0x84>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12b      	bne.n	8001592 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001542:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 8001544:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001548:	6453      	str	r3, [r2, #68]	@ 0x44
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	4a10      	ldr	r2, [pc, #64]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	@ 0x30
 8001566:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <HAL_SPI_MspInit+0x88>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001572:	23e0      	movs	r3, #224	@ 0xe0
 8001574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157a:	2301      	movs	r3, #1
 800157c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001582:	2305      	movs	r3, #5
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <HAL_SPI_MspInit+0x8c>)
 800158e:	f000 fb01 	bl	8001b94 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	@ 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40013000 	.word	0x40013000
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020000 	.word	0x40020000

080015a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	@ 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a19      	ldr	r2, [pc, #100]	@ (800162c <HAL_UART_MspInit+0x84>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d12c      	bne.n	8001624 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b18      	ldr	r3, [pc, #96]	@ (8001630 <HAL_UART_MspInit+0x88>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	4a17      	ldr	r2, [pc, #92]	@ (8001630 <HAL_UART_MspInit+0x88>)
 80015d4:	f043 0310 	orr.w	r3, r3, #16
 80015d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <HAL_UART_MspInit+0x88>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <HAL_UART_MspInit+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a10      	ldr	r2, [pc, #64]	@ (8001630 <HAL_UART_MspInit+0x88>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <HAL_UART_MspInit+0x88>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001602:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001614:	2307      	movs	r3, #7
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4805      	ldr	r0, [pc, #20]	@ (8001634 <HAL_UART_MspInit+0x8c>)
 8001620:	f000 fab8 	bl	8001b94 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	@ 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40011000 	.word	0x40011000
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <NMI_Handler+0x4>

08001640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <MemManage_Handler+0x4>

08001650 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <UsageFault_Handler+0x4>

08001660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168e:	f000 f957 	bl	8001940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}

08001696 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  return 1;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_kill>:

int _kill(int pid, int sig)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016b0:	f006 feba 	bl	8008428 <__errno>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2216      	movs	r2, #22
 80016b8:	601a      	str	r2, [r3, #0]
  return -1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_exit>:

void _exit (int status)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016ce:	f04f 31ff 	mov.w	r1, #4294967295
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffe7 	bl	80016a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <_exit+0x12>

080016dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e00a      	b.n	8001704 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ee:	f3af 8000 	nop.w
 80016f2:	4601      	mov	r1, r0
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	60ba      	str	r2, [r7, #8]
 80016fa:	b2ca      	uxtb	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbf0      	blt.n	80016ee <_read+0x12>
  }

  return len;
 800170c:	687b      	ldr	r3, [r7, #4]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e009      	b.n	800173c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	60ba      	str	r2, [r7, #8]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	429a      	cmp	r2, r3
 8001742:	dbf1      	blt.n	8001728 <_write+0x12>
  }
  return len;
 8001744:	687b      	ldr	r3, [r7, #4]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <_close>:

int _close(int file)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001776:	605a      	str	r2, [r3, #4]
  return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <_isatty>:

int _isatty(int file)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c0:	4a14      	ldr	r2, [pc, #80]	@ (8001814 <_sbrk+0x5c>)
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <_sbrk+0x60>)
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017cc:	4b13      	ldr	r3, [pc, #76]	@ (800181c <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <_sbrk+0x64>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <_sbrk+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d207      	bcs.n	80017f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e8:	f006 fe1e 	bl	8008428 <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	220c      	movs	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	e009      	b.n	800180c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f8:	4b08      	ldr	r3, [pc, #32]	@ (800181c <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fe:	4b07      	ldr	r3, [pc, #28]	@ (800181c <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a05      	ldr	r2, [pc, #20]	@ (800181c <_sbrk+0x64>)
 8001808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20018000 	.word	0x20018000
 8001818:	00000400 	.word	0x00000400
 800181c:	200003a8 	.word	0x200003a8
 8001820:	20000748 	.word	0x20000748

08001824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <SystemInit+0x20>)
 800182a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800182e:	4a05      	ldr	r2, [pc, #20]	@ (8001844 <SystemInit+0x20>)
 8001830:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001834:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001848:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001880 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800184c:	f7ff ffea 	bl	8001824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001850:	480c      	ldr	r0, [pc, #48]	@ (8001884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001852:	490d      	ldr	r1, [pc, #52]	@ (8001888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001854:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001868:	4c0a      	ldr	r4, [pc, #40]	@ (8001894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001876:	f006 fddd 	bl	8008434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800187a:	f7ff fbff 	bl	800107c <main>
  bx  lr    
 800187e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001880:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001888:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800188c:	0800c5ec 	.word	0x0800c5ec
  ldr r2, =_sbss
 8001890:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001894:	20000744 	.word	0x20000744

08001898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC_IRQHandler>
	...

0800189c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a0:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0d      	ldr	r2, [pc, #52]	@ (80018dc <HAL_Init+0x40>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <HAL_Init+0x40>)
 80018b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <HAL_Init+0x40>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a07      	ldr	r2, [pc, #28]	@ (80018dc <HAL_Init+0x40>)
 80018be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 f931 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ca:	200f      	movs	r0, #15
 80018cc:	f000 f808 	bl	80018e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d0:	f7ff fdfa 	bl	80014c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00

080018e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e8:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <HAL_InitTick+0x54>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_InitTick+0x58>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f93b 	bl	8001b7a <HAL_SYSTICK_Config>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e00e      	b.n	800192c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d80a      	bhi.n	800192a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001914:	2200      	movs	r2, #0
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f000 f911 	bl	8001b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001920:	4a06      	ldr	r2, [pc, #24]	@ (800193c <HAL_InitTick+0x5c>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000000 	.word	0x20000000
 8001938:	20000008 	.word	0x20000008
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_IncTick+0x20>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_IncTick+0x24>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	@ (8001964 <HAL_IncTick+0x24>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000008 	.word	0x20000008
 8001964:	200003ac 	.word	0x200003ac

08001968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b03      	ldr	r3, [pc, #12]	@ (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	200003ac 	.word	0x200003ac

08001980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff ffee 	bl	8001968 <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b0a      	ldr	r3, [pc, #40]	@ (80019c4 <HAL_Delay+0x44>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a6:	bf00      	nop
 80019a8:	f7ff ffde 	bl	8001968 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000008 	.word	0x20000008

080019c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	@ (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	@ (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	@ 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	@ 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001af8:	d301      	bcc.n	8001afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00f      	b.n	8001b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <SysTick_Config+0x40>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b06:	210f      	movs	r1, #15
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f7ff ff8e 	bl	8001a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <SysTick_Config+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <SysTick_Config+0x40>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff47 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff5c 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff8e 	bl	8001a80 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff5d 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffb0 	bl	8001ae8 <SysTick_Config>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	@ 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	e159      	b.n	8001e64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f040 8148 	bne.w	8001e5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d005      	beq.n	8001be6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d130      	bne.n	8001c48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 0201 	and.w	r2, r3, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d017      	beq.n	8001c84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d123      	bne.n	8001cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	08da      	lsrs	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3208      	adds	r2, #8
 8001c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	69b9      	ldr	r1, [r7, #24]
 8001cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80a2 	beq.w	8001e5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b57      	ldr	r3, [pc, #348]	@ (8001e7c <HAL_GPIO_Init+0x2e8>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	4a56      	ldr	r2, [pc, #344]	@ (8001e7c <HAL_GPIO_Init+0x2e8>)
 8001d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2a:	4b54      	ldr	r3, [pc, #336]	@ (8001e7c <HAL_GPIO_Init+0x2e8>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d36:	4a52      	ldr	r2, [pc, #328]	@ (8001e80 <HAL_GPIO_Init+0x2ec>)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a49      	ldr	r2, [pc, #292]	@ (8001e84 <HAL_GPIO_Init+0x2f0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d019      	beq.n	8001d96 <HAL_GPIO_Init+0x202>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a48      	ldr	r2, [pc, #288]	@ (8001e88 <HAL_GPIO_Init+0x2f4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d013      	beq.n	8001d92 <HAL_GPIO_Init+0x1fe>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a47      	ldr	r2, [pc, #284]	@ (8001e8c <HAL_GPIO_Init+0x2f8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00d      	beq.n	8001d8e <HAL_GPIO_Init+0x1fa>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a46      	ldr	r2, [pc, #280]	@ (8001e90 <HAL_GPIO_Init+0x2fc>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d007      	beq.n	8001d8a <HAL_GPIO_Init+0x1f6>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a45      	ldr	r2, [pc, #276]	@ (8001e94 <HAL_GPIO_Init+0x300>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d101      	bne.n	8001d86 <HAL_GPIO_Init+0x1f2>
 8001d82:	2304      	movs	r3, #4
 8001d84:	e008      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d86:	2307      	movs	r3, #7
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e004      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e002      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_GPIO_Init+0x204>
 8001d96:	2300      	movs	r3, #0
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	f002 0203 	and.w	r2, r2, #3
 8001d9e:	0092      	lsls	r2, r2, #2
 8001da0:	4093      	lsls	r3, r2
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da8:	4935      	ldr	r1, [pc, #212]	@ (8001e80 <HAL_GPIO_Init+0x2ec>)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	3302      	adds	r3, #2
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db6:	4b38      	ldr	r3, [pc, #224]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dda:	4a2f      	ldr	r2, [pc, #188]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e04:	4a24      	ldr	r2, [pc, #144]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e0a:	4b23      	ldr	r3, [pc, #140]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e34:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e58:	4a0f      	ldr	r2, [pc, #60]	@ (8001e98 <HAL_GPIO_Init+0x304>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3301      	adds	r3, #1
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	2b0f      	cmp	r3, #15
 8001e68:	f67f aea2 	bls.w	8001bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3724      	adds	r7, #36	@ 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40013800 	.word	0x40013800
 8001e84:	40020000 	.word	0x40020000
 8001e88:	40020400 	.word	0x40020400
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40020c00 	.word	0x40020c00
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40013c00 	.word	0x40013c00

08001e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eac:	787b      	ldrb	r3, [r7, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb8:	e003      	b.n	8001ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	041a      	lsls	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	619a      	str	r2, [r3, #24]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e267      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d075      	beq.n	8001fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001eee:	4b88      	ldr	r3, [pc, #544]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d00c      	beq.n	8001f14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001efa:	4b85      	ldr	r3, [pc, #532]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d112      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f06:	4b82      	ldr	r3, [pc, #520]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f12:	d10b      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	4b7e      	ldr	r3, [pc, #504]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d05b      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x108>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d157      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e242      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f34:	d106      	bne.n	8001f44 <HAL_RCC_OscConfig+0x74>
 8001f36:	4b76      	ldr	r3, [pc, #472]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a75      	ldr	r2, [pc, #468]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e01d      	b.n	8001f80 <HAL_RCC_OscConfig+0xb0>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f4c:	d10c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x98>
 8001f4e:	4b70      	ldr	r3, [pc, #448]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a6f      	ldr	r2, [pc, #444]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a6c      	ldr	r2, [pc, #432]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e00b      	b.n	8001f80 <HAL_RCC_OscConfig+0xb0>
 8001f68:	4b69      	ldr	r3, [pc, #420]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a68      	ldr	r2, [pc, #416]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b66      	ldr	r3, [pc, #408]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a65      	ldr	r2, [pc, #404]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff fcee 	bl	8001968 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff fcea 	bl	8001968 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	@ 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e207      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0xc0>
 8001fae:	e014      	b.n	8001fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fcda 	bl	8001968 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff fcd6 	bl	8001968 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	@ 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e1f3      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fca:	4b51      	ldr	r3, [pc, #324]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0xe8>
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d063      	beq.n	80020ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001fe6:	4b4a      	ldr	r3, [pc, #296]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00b      	beq.n	800200a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff2:	4b47      	ldr	r3, [pc, #284]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d11c      	bne.n	8002038 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffe:	4b44      	ldr	r3, [pc, #272]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d116      	bne.n	8002038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	4b41      	ldr	r3, [pc, #260]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <HAL_RCC_OscConfig+0x152>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d001      	beq.n	8002022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e1c7      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002022:	4b3b      	ldr	r3, [pc, #236]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4937      	ldr	r1, [pc, #220]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	e03a      	b.n	80020ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d020      	beq.n	8002082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002040:	4b34      	ldr	r3, [pc, #208]	@ (8002114 <HAL_RCC_OscConfig+0x244>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7ff fc8f 	bl	8001968 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204e:	f7ff fc8b 	bl	8001968 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1a8      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	4b2b      	ldr	r3, [pc, #172]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206c:	4b28      	ldr	r3, [pc, #160]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4925      	ldr	r1, [pc, #148]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
 8002080:	e015      	b.n	80020ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002082:	4b24      	ldr	r3, [pc, #144]	@ (8002114 <HAL_RCC_OscConfig+0x244>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff fc6e 	bl	8001968 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002090:	f7ff fc6a 	bl	8001968 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e187      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d036      	beq.n	8002128 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d016      	beq.n	80020f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c2:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <HAL_RCC_OscConfig+0x248>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff fc4e 	bl	8001968 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d0:	f7ff fc4a 	bl	8001968 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e167      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 80020e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x200>
 80020ee:	e01b      	b.n	8002128 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f0:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <HAL_RCC_OscConfig+0x248>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f6:	f7ff fc37 	bl	8001968 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fc:	e00e      	b.n	800211c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fe:	f7ff fc33 	bl	8001968 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d907      	bls.n	800211c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e150      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
 8002110:	40023800 	.word	0x40023800
 8002114:	42470000 	.word	0x42470000
 8002118:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211c:	4b88      	ldr	r3, [pc, #544]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 800211e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1ea      	bne.n	80020fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 8097 	beq.w	8002264 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213a:	4b81      	ldr	r3, [pc, #516]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10f      	bne.n	8002166 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	4b7d      	ldr	r3, [pc, #500]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	4a7c      	ldr	r2, [pc, #496]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002154:	6413      	str	r3, [r2, #64]	@ 0x40
 8002156:	4b7a      	ldr	r3, [pc, #488]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002162:	2301      	movs	r3, #1
 8002164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002166:	4b77      	ldr	r3, [pc, #476]	@ (8002344 <HAL_RCC_OscConfig+0x474>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d118      	bne.n	80021a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002172:	4b74      	ldr	r3, [pc, #464]	@ (8002344 <HAL_RCC_OscConfig+0x474>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a73      	ldr	r2, [pc, #460]	@ (8002344 <HAL_RCC_OscConfig+0x474>)
 8002178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217e:	f7ff fbf3 	bl	8001968 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002186:	f7ff fbef 	bl	8001968 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e10c      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	4b6a      	ldr	r3, [pc, #424]	@ (8002344 <HAL_RCC_OscConfig+0x474>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x2ea>
 80021ac:	4b64      	ldr	r3, [pc, #400]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b0:	4a63      	ldr	r2, [pc, #396]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b8:	e01c      	b.n	80021f4 <HAL_RCC_OscConfig+0x324>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x30c>
 80021c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021da:	e00b      	b.n	80021f4 <HAL_RCC_OscConfig+0x324>
 80021dc:	4b58      	ldr	r3, [pc, #352]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e0:	4a57      	ldr	r2, [pc, #348]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021e2:	f023 0301 	bic.w	r3, r3, #1
 80021e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e8:	4b55      	ldr	r3, [pc, #340]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ec:	4a54      	ldr	r2, [pc, #336]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021ee:	f023 0304 	bic.w	r3, r3, #4
 80021f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d015      	beq.n	8002228 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fc:	f7ff fbb4 	bl	8001968 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002202:	e00a      	b.n	800221a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f7ff fbb0 	bl	8001968 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e0cb      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221a:	4b49      	ldr	r3, [pc, #292]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0ee      	beq.n	8002204 <HAL_RCC_OscConfig+0x334>
 8002226:	e014      	b.n	8002252 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002228:	f7ff fb9e 	bl	8001968 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222e:	e00a      	b.n	8002246 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002230:	f7ff fb9a 	bl	8001968 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e0b5      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002246:	4b3e      	ldr	r3, [pc, #248]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1ee      	bne.n	8002230 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002252:	7dfb      	ldrb	r3, [r7, #23]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d105      	bne.n	8002264 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002258:	4b39      	ldr	r3, [pc, #228]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225c:	4a38      	ldr	r2, [pc, #224]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 800225e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002262:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80a1 	beq.w	80023b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800226e:	4b34      	ldr	r3, [pc, #208]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b08      	cmp	r3, #8
 8002278:	d05c      	beq.n	8002334 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d141      	bne.n	8002306 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002282:	4b31      	ldr	r3, [pc, #196]	@ (8002348 <HAL_RCC_OscConfig+0x478>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff fb6e 	bl	8001968 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7ff fb6a 	bl	8001968 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e087      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	4b27      	ldr	r3, [pc, #156]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69da      	ldr	r2, [r3, #28]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022bc:	019b      	lsls	r3, r3, #6
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c4:	085b      	lsrs	r3, r3, #1
 80022c6:	3b01      	subs	r3, #1
 80022c8:	041b      	lsls	r3, r3, #16
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d0:	061b      	lsls	r3, r3, #24
 80022d2:	491b      	ldr	r1, [pc, #108]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002348 <HAL_RCC_OscConfig+0x478>)
 80022da:	2201      	movs	r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7ff fb43 	bl	8001968 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e6:	f7ff fb3f 	bl	8001968 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e05c      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f8:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x416>
 8002304:	e054      	b.n	80023b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	4b10      	ldr	r3, [pc, #64]	@ (8002348 <HAL_RCC_OscConfig+0x478>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff fb2c 	bl	8001968 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002314:	f7ff fb28 	bl	8001968 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e045      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x444>
 8002332:	e03d      	b.n	80023b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d107      	bne.n	800234c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e038      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
 8002340:	40023800 	.word	0x40023800
 8002344:	40007000 	.word	0x40007000
 8002348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800234c:	4b1b      	ldr	r3, [pc, #108]	@ (80023bc <HAL_RCC_OscConfig+0x4ec>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d028      	beq.n	80023ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d121      	bne.n	80023ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d11a      	bne.n	80023ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800237c:	4013      	ands	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002384:	4293      	cmp	r3, r2
 8002386:	d111      	bne.n	80023ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002392:	085b      	lsrs	r3, r3, #1
 8002394:	3b01      	subs	r3, #1
 8002396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d107      	bne.n	80023ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800

080023c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0cc      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d4:	4b68      	ldr	r3, [pc, #416]	@ (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d90c      	bls.n	80023fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b65      	ldr	r3, [pc, #404]	@ (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b63      	ldr	r3, [pc, #396]	@ (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0b8      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002414:	4b59      	ldr	r3, [pc, #356]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a58      	ldr	r2, [pc, #352]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800241e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800242c:	4b53      	ldr	r3, [pc, #332]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a52      	ldr	r2, [pc, #328]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002438:	4b50      	ldr	r3, [pc, #320]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	494d      	ldr	r1, [pc, #308]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d044      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b47      	ldr	r3, [pc, #284]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d119      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e07f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d003      	beq.n	800247e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800247a:	2b03      	cmp	r3, #3
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247e:	4b3f      	ldr	r3, [pc, #252]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e06f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248e:	4b3b      	ldr	r3, [pc, #236]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e067      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249e:	4b37      	ldr	r3, [pc, #220]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f023 0203 	bic.w	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4934      	ldr	r1, [pc, #208]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b0:	f7ff fa5a 	bl	8001968 <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b8:	f7ff fa56 	bl	8001968 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e04f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	4b2b      	ldr	r3, [pc, #172]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 020c 	and.w	r2, r3, #12
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1eb      	bne.n	80024b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e0:	4b25      	ldr	r3, [pc, #148]	@ (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d20c      	bcs.n	8002508 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b22      	ldr	r3, [pc, #136]	@ (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b20      	ldr	r3, [pc, #128]	@ (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e032      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002514:	4b19      	ldr	r3, [pc, #100]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4916      	ldr	r1, [pc, #88]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002532:	4b12      	ldr	r3, [pc, #72]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	490e      	ldr	r1, [pc, #56]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002546:	f000 f821 	bl	800258c <HAL_RCC_GetSysClockFreq>
 800254a:	4602      	mov	r2, r0
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	490a      	ldr	r1, [pc, #40]	@ (8002580 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	5ccb      	ldrb	r3, [r1, r3]
 800255a:	fa22 f303 	lsr.w	r3, r2, r3
 800255e:	4a09      	ldr	r2, [pc, #36]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002562:	4b09      	ldr	r3, [pc, #36]	@ (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff f9ba 	bl	80018e0 <HAL_InitTick>

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023c00 	.word	0x40023c00
 800257c:	40023800 	.word	0x40023800
 8002580:	0800bd5c 	.word	0x0800bd5c
 8002584:	20000000 	.word	0x20000000
 8002588:	20000004 	.word	0x20000004

0800258c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002590:	b090      	sub	sp, #64	@ 0x40
 8002592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025a4:	4b59      	ldr	r3, [pc, #356]	@ (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d00d      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x40>
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	f200 80a1 	bhi.w	80026f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x34>
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025be:	e09b      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025c0:	4b53      	ldr	r3, [pc, #332]	@ (8002710 <HAL_RCC_GetSysClockFreq+0x184>)
 80025c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025c4:	e09b      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025c6:	4b53      	ldr	r3, [pc, #332]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x188>)
 80025c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025ca:	e098      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025cc:	4b4f      	ldr	r3, [pc, #316]	@ (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025d6:	4b4d      	ldr	r3, [pc, #308]	@ (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d028      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e2:	4b4a      	ldr	r3, [pc, #296]	@ (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	099b      	lsrs	r3, r3, #6
 80025e8:	2200      	movs	r2, #0
 80025ea:	623b      	str	r3, [r7, #32]
 80025ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025f4:	2100      	movs	r1, #0
 80025f6:	4b47      	ldr	r3, [pc, #284]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x188>)
 80025f8:	fb03 f201 	mul.w	r2, r3, r1
 80025fc:	2300      	movs	r3, #0
 80025fe:	fb00 f303 	mul.w	r3, r0, r3
 8002602:	4413      	add	r3, r2
 8002604:	4a43      	ldr	r2, [pc, #268]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x188>)
 8002606:	fba0 1202 	umull	r1, r2, r0, r2
 800260a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800260c:	460a      	mov	r2, r1
 800260e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002612:	4413      	add	r3, r2
 8002614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002618:	2200      	movs	r2, #0
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	61fa      	str	r2, [r7, #28]
 800261e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002622:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002626:	f7fe fb37 	bl	8000c98 <__aeabi_uldivmod>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4613      	mov	r3, r2
 8002630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002632:	e053      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002634:	4b35      	ldr	r3, [pc, #212]	@ (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	099b      	lsrs	r3, r3, #6
 800263a:	2200      	movs	r2, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	617a      	str	r2, [r7, #20]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002646:	f04f 0b00 	mov.w	fp, #0
 800264a:	4652      	mov	r2, sl
 800264c:	465b      	mov	r3, fp
 800264e:	f04f 0000 	mov.w	r0, #0
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	0159      	lsls	r1, r3, #5
 8002658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800265c:	0150      	lsls	r0, r2, #5
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	ebb2 080a 	subs.w	r8, r2, sl
 8002666:	eb63 090b 	sbc.w	r9, r3, fp
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002676:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800267a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800267e:	ebb2 0408 	subs.w	r4, r2, r8
 8002682:	eb63 0509 	sbc.w	r5, r3, r9
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	00eb      	lsls	r3, r5, #3
 8002690:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002694:	00e2      	lsls	r2, r4, #3
 8002696:	4614      	mov	r4, r2
 8002698:	461d      	mov	r5, r3
 800269a:	eb14 030a 	adds.w	r3, r4, sl
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	eb45 030b 	adc.w	r3, r5, fp
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026b2:	4629      	mov	r1, r5
 80026b4:	028b      	lsls	r3, r1, #10
 80026b6:	4621      	mov	r1, r4
 80026b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026bc:	4621      	mov	r1, r4
 80026be:	028a      	lsls	r2, r1, #10
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c6:	2200      	movs	r2, #0
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	60fa      	str	r2, [r7, #12]
 80026cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026d0:	f7fe fae2 	bl	8000c98 <__aeabi_uldivmod>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4613      	mov	r3, r2
 80026da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	3301      	adds	r3, #1
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80026ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026f6:	e002      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <HAL_RCC_GetSysClockFreq+0x184>)
 80026fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002700:	4618      	mov	r0, r3
 8002702:	3740      	adds	r7, #64	@ 0x40
 8002704:	46bd      	mov	sp, r7
 8002706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800
 8002710:	00f42400 	.word	0x00f42400
 8002714:	017d7840 	.word	0x017d7840

08002718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800271c:	4b03      	ldr	r3, [pc, #12]	@ (800272c <HAL_RCC_GetHCLKFreq+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000000 	.word	0x20000000

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002734:	f7ff fff0 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0a9b      	lsrs	r3, r3, #10
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4903      	ldr	r1, [pc, #12]	@ (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800
 8002754:	0800bd6c 	.word	0x0800bd6c

08002758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800275c:	f7ff ffdc 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0b5b      	lsrs	r3, r3, #13
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	@ (800277c <HAL_RCC_GetPCLK2Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	0800bd6c 	.word	0x0800bd6c

08002780 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e07b      	b.n	800288a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	2b00      	cmp	r3, #0
 8002798:	d108      	bne.n	80027ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027a2:	d009      	beq.n	80027b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
 80027aa:	e005      	b.n	80027b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe fea0 	bl	8001518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800283c:	ea42 0103 	orr.w	r1, r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	f003 0104 	and.w	r1, r3, #4
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	f003 0210 	and.w	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	69da      	ldr	r2, [r3, #28]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002878:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b088      	sub	sp, #32
 8002896:	af00      	add	r7, sp, #0
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	4613      	mov	r3, r2
 80028a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028a2:	f7ff f861 	bl	8001968 <HAL_GetTick>
 80028a6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d001      	beq.n	80028bc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80028b8:	2302      	movs	r3, #2
 80028ba:	e12a      	b.n	8002b12 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <HAL_SPI_Transmit+0x36>
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e122      	b.n	8002b12 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_SPI_Transmit+0x48>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e11b      	b.n	8002b12 <HAL_SPI_Transmit+0x280>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2203      	movs	r2, #3
 80028e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	88fa      	ldrh	r2, [r7, #6]
 8002900:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002928:	d10f      	bne.n	800294a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002938:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002948:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002954:	2b40      	cmp	r3, #64	@ 0x40
 8002956:	d007      	beq.n	8002968 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002966:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002970:	d152      	bne.n	8002a18 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_SPI_Transmit+0xee>
 800297a:	8b7b      	ldrh	r3, [r7, #26]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d145      	bne.n	8002a0c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002984:	881a      	ldrh	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002990:	1c9a      	adds	r2, r3, #2
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029a4:	e032      	b.n	8002a0c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d112      	bne.n	80029da <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b8:	881a      	ldrh	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c4:	1c9a      	adds	r2, r3, #2
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80029d8:	e018      	b.n	8002a0c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029da:	f7fe ffc5 	bl	8001968 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d803      	bhi.n	80029f2 <HAL_SPI_Transmit+0x160>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d102      	bne.n	80029f8 <HAL_SPI_Transmit+0x166>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d109      	bne.n	8002a0c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e082      	b.n	8002b12 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1c7      	bne.n	80029a6 <HAL_SPI_Transmit+0x114>
 8002a16:	e053      	b.n	8002ac0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_SPI_Transmit+0x194>
 8002a20:	8b7b      	ldrh	r3, [r7, #26]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d147      	bne.n	8002ab6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330c      	adds	r3, #12
 8002a30:	7812      	ldrb	r2, [r2, #0]
 8002a32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a4c:	e033      	b.n	8002ab6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d113      	bne.n	8002a84 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	330c      	adds	r3, #12
 8002a66:	7812      	ldrb	r2, [r2, #0]
 8002a68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002a82:	e018      	b.n	8002ab6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a84:	f7fe ff70 	bl	8001968 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d803      	bhi.n	8002a9c <HAL_SPI_Transmit+0x20a>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9a:	d102      	bne.n	8002aa2 <HAL_SPI_Transmit+0x210>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e02d      	b.n	8002b12 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1c6      	bne.n	8002a4e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	6839      	ldr	r1, [r7, #0]
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 fa59 	bl	8002f7c <SPI_EndRxTxTransaction>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002b10:	2300      	movs	r3, #0
  }
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b08a      	sub	sp, #40	@ 0x28
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b2c:	f7fe ff1c 	bl	8001968 <HAL_GetTick>
 8002b30:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b38:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002b40:	887b      	ldrh	r3, [r7, #2]
 8002b42:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b44:	7ffb      	ldrb	r3, [r7, #31]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d00c      	beq.n	8002b64 <HAL_SPI_TransmitReceive+0x4a>
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b50:	d106      	bne.n	8002b60 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <HAL_SPI_TransmitReceive+0x46>
 8002b5a:	7ffb      	ldrb	r3, [r7, #31]
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d001      	beq.n	8002b64 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002b60:	2302      	movs	r3, #2
 8002b62:	e17f      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_SPI_TransmitReceive+0x5c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <HAL_SPI_TransmitReceive+0x5c>
 8002b70:	887b      	ldrh	r3, [r7, #2]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e174      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_SPI_TransmitReceive+0x6e>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e16d      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x34a>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d003      	beq.n	8002ba4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2205      	movs	r2, #5
 8002ba0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	887a      	ldrh	r2, [r7, #2]
 8002bb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	887a      	ldrh	r2, [r7, #2]
 8002bba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	887a      	ldrh	r2, [r7, #2]
 8002bc6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be4:	2b40      	cmp	r3, #64	@ 0x40
 8002be6:	d007      	beq.n	8002bf8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c00:	d17e      	bne.n	8002d00 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_SPI_TransmitReceive+0xf6>
 8002c0a:	8afb      	ldrh	r3, [r7, #22]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d16c      	bne.n	8002cea <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c14:	881a      	ldrh	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c20:	1c9a      	adds	r2, r3, #2
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c34:	e059      	b.n	8002cea <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d11b      	bne.n	8002c7c <HAL_SPI_TransmitReceive+0x162>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d016      	beq.n	8002c7c <HAL_SPI_TransmitReceive+0x162>
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d113      	bne.n	8002c7c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c58:	881a      	ldrh	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c64:	1c9a      	adds	r2, r3, #2
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d119      	bne.n	8002cbe <HAL_SPI_TransmitReceive+0x1a4>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d014      	beq.n	8002cbe <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9e:	b292      	uxth	r2, r2
 8002ca0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca6:	1c9a      	adds	r2, r3, #2
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002cbe:	f7fe fe53 	bl	8001968 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d80d      	bhi.n	8002cea <HAL_SPI_TransmitReceive+0x1d0>
 8002cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d009      	beq.n	8002cea <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e0bc      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1a0      	bne.n	8002c36 <HAL_SPI_TransmitReceive+0x11c>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d19b      	bne.n	8002c36 <HAL_SPI_TransmitReceive+0x11c>
 8002cfe:	e082      	b.n	8002e06 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <HAL_SPI_TransmitReceive+0x1f4>
 8002d08:	8afb      	ldrh	r3, [r7, #22]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d171      	bne.n	8002df2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	330c      	adds	r3, #12
 8002d18:	7812      	ldrb	r2, [r2, #0]
 8002d1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d34:	e05d      	b.n	8002df2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d11c      	bne.n	8002d7e <HAL_SPI_TransmitReceive+0x264>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d017      	beq.n	8002d7e <HAL_SPI_TransmitReceive+0x264>
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d114      	bne.n	8002d7e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	330c      	adds	r3, #12
 8002d5e:	7812      	ldrb	r2, [r2, #0]
 8002d60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d119      	bne.n	8002dc0 <HAL_SPI_TransmitReceive+0x2a6>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d014      	beq.n	8002dc0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002dc0:	f7fe fdd2 	bl	8001968 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d803      	bhi.n	8002dd8 <HAL_SPI_TransmitReceive+0x2be>
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d102      	bne.n	8002dde <HAL_SPI_TransmitReceive+0x2c4>
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e038      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d19c      	bne.n	8002d36 <HAL_SPI_TransmitReceive+0x21c>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d197      	bne.n	8002d36 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e06:	6a3a      	ldr	r2, [r7, #32]
 8002e08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f8b6 	bl	8002f7c <SPI_EndRxTxTransaction>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e01d      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002e62:	2300      	movs	r3, #0
  }
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3728      	adds	r7, #40	@ 0x28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e7c:	f7fe fd74 	bl	8001968 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	4413      	add	r3, r2
 8002e8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e8c:	f7fe fd6c 	bl	8001968 <HAL_GetTick>
 8002e90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e92:	4b39      	ldr	r3, [pc, #228]	@ (8002f78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	015b      	lsls	r3, r3, #5
 8002e98:	0d1b      	lsrs	r3, r3, #20
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ea2:	e054      	b.n	8002f4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eaa:	d050      	beq.n	8002f4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002eac:	f7fe fd5c 	bl	8001968 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d902      	bls.n	8002ec2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d13d      	bne.n	8002f3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ed0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eda:	d111      	bne.n	8002f00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ee4:	d004      	beq.n	8002ef0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eee:	d107      	bne.n	8002f00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002efe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f08:	d10f      	bne.n	8002f2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e017      	b.n	8002f6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4013      	ands	r3, r2
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2301      	moveq	r3, #1
 8002f60:	2300      	movne	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d19b      	bne.n	8002ea4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3720      	adds	r7, #32
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000000 	.word	0x20000000

08002f7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	2102      	movs	r1, #2
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f7ff ff6a 	bl	8002e6c <SPI_WaitFlagStateUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d007      	beq.n	8002fae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa2:	f043 0220 	orr.w	r2, r3, #32
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e032      	b.n	8003014 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002fae:	4b1b      	ldr	r3, [pc, #108]	@ (800301c <SPI_EndRxTxTransaction+0xa0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8003020 <SPI_EndRxTxTransaction+0xa4>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	0d5b      	lsrs	r3, r3, #21
 8002fba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fcc:	d112      	bne.n	8002ff4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2180      	movs	r1, #128	@ 0x80
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f7ff ff47 	bl	8002e6c <SPI_WaitFlagStateUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d016      	beq.n	8003012 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe8:	f043 0220 	orr.w	r2, r3, #32
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e00f      	b.n	8003014 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300a:	2b80      	cmp	r3, #128	@ 0x80
 800300c:	d0f2      	beq.n	8002ff4 <SPI_EndRxTxTransaction+0x78>
 800300e:	e000      	b.n	8003012 <SPI_EndRxTxTransaction+0x96>
        break;
 8003010:	bf00      	nop
  }

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000000 	.word	0x20000000
 8003020:	165e9f81 	.word	0x165e9f81

08003024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e042      	b.n	80030bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fe faac 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2224      	movs	r2, #36	@ 0x24
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f973 	bl	8003354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800307c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800308c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800309c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	@ 0x28
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d175      	bne.n	80031d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_UART_Transmit+0x2c>
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e06e      	b.n	80031d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2221      	movs	r2, #33	@ 0x21
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003102:	f7fe fc31 	bl	8001968 <HAL_GetTick>
 8003106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	88fa      	ldrh	r2, [r7, #6]
 800310c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	88fa      	ldrh	r2, [r7, #6]
 8003112:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800311c:	d108      	bne.n	8003130 <HAL_UART_Transmit+0x6c>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d104      	bne.n	8003130 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	e003      	b.n	8003138 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003138:	e02e      	b.n	8003198 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2200      	movs	r2, #0
 8003142:	2180      	movs	r1, #128	@ 0x80
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f848 	bl	80031da <UART_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e03a      	b.n	80031d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10b      	bne.n	800317a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003170:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	3302      	adds	r3, #2
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	e007      	b.n	800318a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	781a      	ldrb	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	3301      	adds	r3, #1
 8003188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1cb      	bne.n	800313a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2200      	movs	r2, #0
 80031aa:	2140      	movs	r1, #64	@ 0x40
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f814 	bl	80031da <UART_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e006      	b.n	80031d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	e000      	b.n	80031d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031d0:	2302      	movs	r3, #2
  }
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b086      	sub	sp, #24
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	4613      	mov	r3, r2
 80031e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ea:	e03b      	b.n	8003264 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d037      	beq.n	8003264 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f4:	f7fe fbb8 	bl	8001968 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	6a3a      	ldr	r2, [r7, #32]
 8003200:	429a      	cmp	r2, r3
 8003202:	d302      	bcc.n	800320a <UART_WaitOnFlagUntilTimeout+0x30>
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e03a      	b.n	8003284 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d023      	beq.n	8003264 <UART_WaitOnFlagUntilTimeout+0x8a>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b80      	cmp	r3, #128	@ 0x80
 8003220:	d020      	beq.n	8003264 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b40      	cmp	r3, #64	@ 0x40
 8003226:	d01d      	beq.n	8003264 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b08      	cmp	r3, #8
 8003234:	d116      	bne.n	8003264 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f81d 	bl	800328c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2208      	movs	r2, #8
 8003256:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e00f      	b.n	8003284 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4013      	ands	r3, r2
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	429a      	cmp	r2, r3
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	429a      	cmp	r2, r3
 8003280:	d0b4      	beq.n	80031ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800328c:	b480      	push	{r7}
 800328e:	b095      	sub	sp, #84	@ 0x54
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	330c      	adds	r3, #12
 800329a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800329e:	e853 3f00 	ldrex	r3, [r3]
 80032a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	330c      	adds	r3, #12
 80032b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80032b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032bc:	e841 2300 	strex	r3, r2, [r1]
 80032c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e5      	bne.n	8003294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3314      	adds	r3, #20
 80032ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	e853 3f00 	ldrex	r3, [r3]
 80032d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3314      	adds	r3, #20
 80032e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032f0:	e841 2300 	strex	r3, r2, [r1]
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1e5      	bne.n	80032c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003300:	2b01      	cmp	r3, #1
 8003302:	d119      	bne.n	8003338 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	330c      	adds	r3, #12
 800330a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	e853 3f00 	ldrex	r3, [r3]
 8003312:	60bb      	str	r3, [r7, #8]
   return(result);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f023 0310 	bic.w	r3, r3, #16
 800331a:	647b      	str	r3, [r7, #68]	@ 0x44
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	330c      	adds	r3, #12
 8003322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003324:	61ba      	str	r2, [r7, #24]
 8003326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003328:	6979      	ldr	r1, [r7, #20]
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	e841 2300 	strex	r3, r2, [r1]
 8003330:	613b      	str	r3, [r7, #16]
   return(result);
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1e5      	bne.n	8003304 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003346:	bf00      	nop
 8003348:	3754      	adds	r7, #84	@ 0x54
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003358:	b0c0      	sub	sp, #256	@ 0x100
 800335a:	af00      	add	r7, sp, #0
 800335c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003370:	68d9      	ldr	r1, [r3, #12]
 8003372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	ea40 0301 	orr.w	r3, r0, r1
 800337c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	431a      	orrs	r2, r3
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	431a      	orrs	r2, r3
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80033ac:	f021 010c 	bic.w	r1, r1, #12
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80033ba:	430b      	orrs	r3, r1
 80033bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80033ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ce:	6999      	ldr	r1, [r3, #24]
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	ea40 0301 	orr.w	r3, r0, r1
 80033da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	4b8f      	ldr	r3, [pc, #572]	@ (8003620 <UART_SetConfig+0x2cc>)
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d005      	beq.n	80033f4 <UART_SetConfig+0xa0>
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003624 <UART_SetConfig+0x2d0>)
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d104      	bne.n	80033fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033f4:	f7ff f9b0 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 80033f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80033fc:	e003      	b.n	8003406 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033fe:	f7ff f997 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8003402:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003410:	f040 810c 	bne.w	800362c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003418:	2200      	movs	r2, #0
 800341a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800341e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003422:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003426:	4622      	mov	r2, r4
 8003428:	462b      	mov	r3, r5
 800342a:	1891      	adds	r1, r2, r2
 800342c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800342e:	415b      	adcs	r3, r3
 8003430:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003432:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003436:	4621      	mov	r1, r4
 8003438:	eb12 0801 	adds.w	r8, r2, r1
 800343c:	4629      	mov	r1, r5
 800343e:	eb43 0901 	adc.w	r9, r3, r1
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800344e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003452:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003456:	4690      	mov	r8, r2
 8003458:	4699      	mov	r9, r3
 800345a:	4623      	mov	r3, r4
 800345c:	eb18 0303 	adds.w	r3, r8, r3
 8003460:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003464:	462b      	mov	r3, r5
 8003466:	eb49 0303 	adc.w	r3, r9, r3
 800346a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800347a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800347e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003482:	460b      	mov	r3, r1
 8003484:	18db      	adds	r3, r3, r3
 8003486:	653b      	str	r3, [r7, #80]	@ 0x50
 8003488:	4613      	mov	r3, r2
 800348a:	eb42 0303 	adc.w	r3, r2, r3
 800348e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003490:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003494:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003498:	f7fd fbfe 	bl	8000c98 <__aeabi_uldivmod>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4b61      	ldr	r3, [pc, #388]	@ (8003628 <UART_SetConfig+0x2d4>)
 80034a2:	fba3 2302 	umull	r2, r3, r3, r2
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	011c      	lsls	r4, r3, #4
 80034aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80034b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80034bc:	4642      	mov	r2, r8
 80034be:	464b      	mov	r3, r9
 80034c0:	1891      	adds	r1, r2, r2
 80034c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034c4:	415b      	adcs	r3, r3
 80034c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034cc:	4641      	mov	r1, r8
 80034ce:	eb12 0a01 	adds.w	sl, r2, r1
 80034d2:	4649      	mov	r1, r9
 80034d4:	eb43 0b01 	adc.w	fp, r3, r1
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034ec:	4692      	mov	sl, r2
 80034ee:	469b      	mov	fp, r3
 80034f0:	4643      	mov	r3, r8
 80034f2:	eb1a 0303 	adds.w	r3, sl, r3
 80034f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034fa:	464b      	mov	r3, r9
 80034fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003500:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003510:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003514:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003518:	460b      	mov	r3, r1
 800351a:	18db      	adds	r3, r3, r3
 800351c:	643b      	str	r3, [r7, #64]	@ 0x40
 800351e:	4613      	mov	r3, r2
 8003520:	eb42 0303 	adc.w	r3, r2, r3
 8003524:	647b      	str	r3, [r7, #68]	@ 0x44
 8003526:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800352a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800352e:	f7fd fbb3 	bl	8000c98 <__aeabi_uldivmod>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4611      	mov	r1, r2
 8003538:	4b3b      	ldr	r3, [pc, #236]	@ (8003628 <UART_SetConfig+0x2d4>)
 800353a:	fba3 2301 	umull	r2, r3, r3, r1
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2264      	movs	r2, #100	@ 0x64
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	1acb      	subs	r3, r1, r3
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800354e:	4b36      	ldr	r3, [pc, #216]	@ (8003628 <UART_SetConfig+0x2d4>)
 8003550:	fba3 2302 	umull	r2, r3, r3, r2
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800355c:	441c      	add	r4, r3
 800355e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003562:	2200      	movs	r2, #0
 8003564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003568:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800356c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003570:	4642      	mov	r2, r8
 8003572:	464b      	mov	r3, r9
 8003574:	1891      	adds	r1, r2, r2
 8003576:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003578:	415b      	adcs	r3, r3
 800357a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800357c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003580:	4641      	mov	r1, r8
 8003582:	1851      	adds	r1, r2, r1
 8003584:	6339      	str	r1, [r7, #48]	@ 0x30
 8003586:	4649      	mov	r1, r9
 8003588:	414b      	adcs	r3, r1
 800358a:	637b      	str	r3, [r7, #52]	@ 0x34
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003598:	4659      	mov	r1, fp
 800359a:	00cb      	lsls	r3, r1, #3
 800359c:	4651      	mov	r1, sl
 800359e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035a2:	4651      	mov	r1, sl
 80035a4:	00ca      	lsls	r2, r1, #3
 80035a6:	4610      	mov	r0, r2
 80035a8:	4619      	mov	r1, r3
 80035aa:	4603      	mov	r3, r0
 80035ac:	4642      	mov	r2, r8
 80035ae:	189b      	adds	r3, r3, r2
 80035b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035b4:	464b      	mov	r3, r9
 80035b6:	460a      	mov	r2, r1
 80035b8:	eb42 0303 	adc.w	r3, r2, r3
 80035bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80035d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035d4:	460b      	mov	r3, r1
 80035d6:	18db      	adds	r3, r3, r3
 80035d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035da:	4613      	mov	r3, r2
 80035dc:	eb42 0303 	adc.w	r3, r2, r3
 80035e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80035ea:	f7fd fb55 	bl	8000c98 <__aeabi_uldivmod>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003628 <UART_SetConfig+0x2d4>)
 80035f4:	fba3 1302 	umull	r1, r3, r3, r2
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	2164      	movs	r1, #100	@ 0x64
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	3332      	adds	r3, #50	@ 0x32
 8003606:	4a08      	ldr	r2, [pc, #32]	@ (8003628 <UART_SetConfig+0x2d4>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	f003 0207 	and.w	r2, r3, #7
 8003612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4422      	add	r2, r4
 800361a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800361c:	e106      	b.n	800382c <UART_SetConfig+0x4d8>
 800361e:	bf00      	nop
 8003620:	40011000 	.word	0x40011000
 8003624:	40011400 	.word	0x40011400
 8003628:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800362c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003630:	2200      	movs	r2, #0
 8003632:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003636:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800363a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800363e:	4642      	mov	r2, r8
 8003640:	464b      	mov	r3, r9
 8003642:	1891      	adds	r1, r2, r2
 8003644:	6239      	str	r1, [r7, #32]
 8003646:	415b      	adcs	r3, r3
 8003648:	627b      	str	r3, [r7, #36]	@ 0x24
 800364a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800364e:	4641      	mov	r1, r8
 8003650:	1854      	adds	r4, r2, r1
 8003652:	4649      	mov	r1, r9
 8003654:	eb43 0501 	adc.w	r5, r3, r1
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	00eb      	lsls	r3, r5, #3
 8003662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003666:	00e2      	lsls	r2, r4, #3
 8003668:	4614      	mov	r4, r2
 800366a:	461d      	mov	r5, r3
 800366c:	4643      	mov	r3, r8
 800366e:	18e3      	adds	r3, r4, r3
 8003670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003674:	464b      	mov	r3, r9
 8003676:	eb45 0303 	adc.w	r3, r5, r3
 800367a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800368a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800369a:	4629      	mov	r1, r5
 800369c:	008b      	lsls	r3, r1, #2
 800369e:	4621      	mov	r1, r4
 80036a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036a4:	4621      	mov	r1, r4
 80036a6:	008a      	lsls	r2, r1, #2
 80036a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80036ac:	f7fd faf4 	bl	8000c98 <__aeabi_uldivmod>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4b60      	ldr	r3, [pc, #384]	@ (8003838 <UART_SetConfig+0x4e4>)
 80036b6:	fba3 2302 	umull	r2, r3, r3, r2
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	011c      	lsls	r4, r3, #4
 80036be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80036d0:	4642      	mov	r2, r8
 80036d2:	464b      	mov	r3, r9
 80036d4:	1891      	adds	r1, r2, r2
 80036d6:	61b9      	str	r1, [r7, #24]
 80036d8:	415b      	adcs	r3, r3
 80036da:	61fb      	str	r3, [r7, #28]
 80036dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036e0:	4641      	mov	r1, r8
 80036e2:	1851      	adds	r1, r2, r1
 80036e4:	6139      	str	r1, [r7, #16]
 80036e6:	4649      	mov	r1, r9
 80036e8:	414b      	adcs	r3, r1
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036f8:	4659      	mov	r1, fp
 80036fa:	00cb      	lsls	r3, r1, #3
 80036fc:	4651      	mov	r1, sl
 80036fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003702:	4651      	mov	r1, sl
 8003704:	00ca      	lsls	r2, r1, #3
 8003706:	4610      	mov	r0, r2
 8003708:	4619      	mov	r1, r3
 800370a:	4603      	mov	r3, r0
 800370c:	4642      	mov	r2, r8
 800370e:	189b      	adds	r3, r3, r2
 8003710:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003714:	464b      	mov	r3, r9
 8003716:	460a      	mov	r2, r1
 8003718:	eb42 0303 	adc.w	r3, r2, r3
 800371c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	67bb      	str	r3, [r7, #120]	@ 0x78
 800372a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003738:	4649      	mov	r1, r9
 800373a:	008b      	lsls	r3, r1, #2
 800373c:	4641      	mov	r1, r8
 800373e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003742:	4641      	mov	r1, r8
 8003744:	008a      	lsls	r2, r1, #2
 8003746:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800374a:	f7fd faa5 	bl	8000c98 <__aeabi_uldivmod>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4611      	mov	r1, r2
 8003754:	4b38      	ldr	r3, [pc, #224]	@ (8003838 <UART_SetConfig+0x4e4>)
 8003756:	fba3 2301 	umull	r2, r3, r3, r1
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	2264      	movs	r2, #100	@ 0x64
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	1acb      	subs	r3, r1, r3
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	3332      	adds	r3, #50	@ 0x32
 8003768:	4a33      	ldr	r2, [pc, #204]	@ (8003838 <UART_SetConfig+0x4e4>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003774:	441c      	add	r4, r3
 8003776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800377a:	2200      	movs	r2, #0
 800377c:	673b      	str	r3, [r7, #112]	@ 0x70
 800377e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003780:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003784:	4642      	mov	r2, r8
 8003786:	464b      	mov	r3, r9
 8003788:	1891      	adds	r1, r2, r2
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	415b      	adcs	r3, r3
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003794:	4641      	mov	r1, r8
 8003796:	1851      	adds	r1, r2, r1
 8003798:	6039      	str	r1, [r7, #0]
 800379a:	4649      	mov	r1, r9
 800379c:	414b      	adcs	r3, r1
 800379e:	607b      	str	r3, [r7, #4]
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037ac:	4659      	mov	r1, fp
 80037ae:	00cb      	lsls	r3, r1, #3
 80037b0:	4651      	mov	r1, sl
 80037b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037b6:	4651      	mov	r1, sl
 80037b8:	00ca      	lsls	r2, r1, #3
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	4642      	mov	r2, r8
 80037c2:	189b      	adds	r3, r3, r2
 80037c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037c6:	464b      	mov	r3, r9
 80037c8:	460a      	mov	r2, r1
 80037ca:	eb42 0303 	adc.w	r3, r2, r3
 80037ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80037da:	667a      	str	r2, [r7, #100]	@ 0x64
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80037e8:	4649      	mov	r1, r9
 80037ea:	008b      	lsls	r3, r1, #2
 80037ec:	4641      	mov	r1, r8
 80037ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f2:	4641      	mov	r1, r8
 80037f4:	008a      	lsls	r2, r1, #2
 80037f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80037fa:	f7fd fa4d 	bl	8000c98 <__aeabi_uldivmod>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4b0d      	ldr	r3, [pc, #52]	@ (8003838 <UART_SetConfig+0x4e4>)
 8003804:	fba3 1302 	umull	r1, r3, r3, r2
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	2164      	movs	r1, #100	@ 0x64
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	3332      	adds	r3, #50	@ 0x32
 8003816:	4a08      	ldr	r2, [pc, #32]	@ (8003838 <UART_SetConfig+0x4e4>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	f003 020f 	and.w	r2, r3, #15
 8003822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4422      	add	r2, r4
 800382a:	609a      	str	r2, [r3, #8]
}
 800382c:	bf00      	nop
 800382e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003832:	46bd      	mov	sp, r7
 8003834:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003838:	51eb851f 	.word	0x51eb851f

0800383c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003840:	4904      	ldr	r1, [pc, #16]	@ (8003854 <MX_FATFS_Init+0x18>)
 8003842:	4805      	ldr	r0, [pc, #20]	@ (8003858 <MX_FATFS_Init+0x1c>)
 8003844:	f003 fd00 	bl	8007248 <FATFS_LinkDriver>
 8003848:	4603      	mov	r3, r0
 800384a:	461a      	mov	r2, r3
 800384c:	4b03      	ldr	r3, [pc, #12]	@ (800385c <MX_FATFS_Init+0x20>)
 800384e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003850:	bf00      	nop
 8003852:	bd80      	pop	{r7, pc}
 8003854:	200003b4 	.word	0x200003b4
 8003858:	2000000c 	.word	0x2000000c
 800385c:	200003b0 	.word	0x200003b0

08003860 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003864:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003866:	4618      	mov	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	USER_SPI_initialize(pdrv);
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f9d3 	bl	8003c28 <USER_SPI_initialize>
  /* USER CODE END INIT */
}
 8003882:	bf00      	nop
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	USER_SPI_status(pdrv);
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fab1 	bl	8003e00 <USER_SPI_status>
  /* USER CODE END STATUS */
}
 800389e:	bf00      	nop
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	4603      	mov	r3, r0
 80038b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	USER_SPI_read(pdrv, buff, sector, count);
 80038b8:	7bf8      	ldrb	r0, [r7, #15]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	f000 fab4 	bl	8003e2c <USER_SPI_read>
  /* USER CODE END READ */
}
 80038c4:	bf00      	nop
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	4603      	mov	r3, r0
 80038dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	USER_SPI_write(pdrv, buff, sector, count);
 80038de:	7bf8      	ldrb	r0, [r7, #15]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	f000 fb07 	bl	8003ef8 <USER_SPI_write>
  /* USER CODE END WRITE */
}
 80038ea:	bf00      	nop
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	603a      	str	r2, [r7, #0]
 80038fe:	71fb      	strb	r3, [r7, #7]
 8003900:	460b      	mov	r3, r1
 8003902:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

	USER_SPI_ioctl(pdrv, cmd, buff);
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	79b9      	ldrb	r1, [r7, #6]
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fb70 	bl	8003ff0 <USER_SPI_ioctl>
  /* USER CODE END IOCTL */
}
 8003910:	bf00      	nop
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003924:	f7fe f820 	bl	8001968 <HAL_GetTick>
 8003928:	4603      	mov	r3, r0
 800392a:	4a04      	ldr	r2, [pc, #16]	@ (800393c <SPI_Timer_On+0x20>)
 800392c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800392e:	4a04      	ldr	r2, [pc, #16]	@ (8003940 <SPI_Timer_On+0x24>)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6013      	str	r3, [r2, #0]
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	200003bc 	.word	0x200003bc
 8003940:	200003c0 	.word	0x200003c0

08003944 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003948:	f7fe f80e 	bl	8001968 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <SPI_Timer_Status+0x24>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	1ad2      	subs	r2, r2, r3
 8003954:	4b05      	ldr	r3, [pc, #20]	@ (800396c <SPI_Timer_Status+0x28>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	bf34      	ite	cc
 800395c:	2301      	movcc	r3, #1
 800395e:	2300      	movcs	r3, #0
 8003960:	b2db      	uxtb	r3, r3
}
 8003962:	4618      	mov	r0, r3
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	200003bc 	.word	0x200003bc
 800396c:	200003c0 	.word	0x200003c0

08003970 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af02      	add	r7, sp, #8
 8003976:	4603      	mov	r3, r0
 8003978:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800397a:	f107 020f 	add.w	r2, r7, #15
 800397e:	1df9      	adds	r1, r7, #7
 8003980:	2332      	movs	r3, #50	@ 0x32
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	2301      	movs	r3, #1
 8003986:	4804      	ldr	r0, [pc, #16]	@ (8003998 <xchg_spi+0x28>)
 8003988:	f7ff f8c7 	bl	8002b1a <HAL_SPI_TransmitReceive>
    return rxDat;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20000208 	.word	0x20000208

0800399c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	e00a      	b.n	80039c2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	18d4      	adds	r4, r2, r3
 80039b2:	20ff      	movs	r0, #255	@ 0xff
 80039b4:	f7ff ffdc 	bl	8003970 <xchg_spi>
 80039b8:	4603      	mov	r3, r0
 80039ba:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3301      	adds	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d3f0      	bcc.n	80039ac <rcvr_spi_multi+0x10>
	}
}
 80039ca:	bf00      	nop
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd90      	pop	{r4, r7, pc}

080039d4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4803      	ldr	r0, [pc, #12]	@ (80039f8 <xmit_spi_multi+0x24>)
 80039ea:	f7fe ff52 	bl	8002892 <HAL_SPI_Transmit>
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000208 	.word	0x20000208

080039fc <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003a04:	f7fd ffb0 	bl	8001968 <HAL_GetTick>
 8003a08:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003a0e:	20ff      	movs	r0, #255	@ 0xff
 8003a10:	f7ff ffae 	bl	8003970 <xchg_spi>
 8003a14:	4603      	mov	r3, r0
 8003a16:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	2bff      	cmp	r3, #255	@ 0xff
 8003a1c:	d007      	beq.n	8003a2e <wait_ready+0x32>
 8003a1e:	f7fd ffa3 	bl	8001968 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d8ef      	bhi.n	8003a0e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2bff      	cmp	r3, #255	@ 0xff
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003a48:	2201      	movs	r2, #1
 8003a4a:	2140      	movs	r1, #64	@ 0x40
 8003a4c:	4803      	ldr	r0, [pc, #12]	@ (8003a5c <despiselect+0x18>)
 8003a4e:	f7fe fa25 	bl	8001e9c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003a52:	20ff      	movs	r0, #255	@ 0xff
 8003a54:	f7ff ff8c 	bl	8003970 <xchg_spi>

}
 8003a58:	bf00      	nop
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40020400 	.word	0x40020400

08003a60 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003a64:	2200      	movs	r2, #0
 8003a66:	2140      	movs	r1, #64	@ 0x40
 8003a68:	4809      	ldr	r0, [pc, #36]	@ (8003a90 <spiselect+0x30>)
 8003a6a:	f7fe fa17 	bl	8001e9c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003a6e:	20ff      	movs	r0, #255	@ 0xff
 8003a70:	f7ff ff7e 	bl	8003970 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003a74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a78:	f7ff ffc0 	bl	80039fc <wait_ready>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <spiselect+0x26>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e002      	b.n	8003a8c <spiselect+0x2c>

	despiselect();
 8003a86:	f7ff ffdd 	bl	8003a44 <despiselect>
	return 0;	/* Timeout */
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40020400 	.word	0x40020400

08003a94 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003a9e:	20c8      	movs	r0, #200	@ 0xc8
 8003aa0:	f7ff ff3c 	bl	800391c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003aa4:	20ff      	movs	r0, #255	@ 0xff
 8003aa6:	f7ff ff63 	bl	8003970 <xchg_spi>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	2bff      	cmp	r3, #255	@ 0xff
 8003ab2:	d104      	bne.n	8003abe <rcvr_datablock+0x2a>
 8003ab4:	f7ff ff46 	bl	8003944 <SPI_Timer_Status>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f2      	bne.n	8003aa4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	2bfe      	cmp	r3, #254	@ 0xfe
 8003ac2:	d001      	beq.n	8003ac8 <rcvr_datablock+0x34>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e00a      	b.n	8003ade <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003ac8:	6839      	ldr	r1, [r7, #0]
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ff66 	bl	800399c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003ad0:	20ff      	movs	r0, #255	@ 0xff
 8003ad2:	f7ff ff4d 	bl	8003970 <xchg_spi>
 8003ad6:	20ff      	movs	r0, #255	@ 0xff
 8003ad8:	f7ff ff4a 	bl	8003970 <xchg_spi>

	return 1;						/* Function succeeded */
 8003adc:	2301      	movs	r3, #1
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	460b      	mov	r3, r1
 8003af0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003af2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003af6:	f7ff ff81 	bl	80039fc <wait_ready>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <xmit_datablock+0x1e>
 8003b00:	2300      	movs	r3, #0
 8003b02:	e01e      	b.n	8003b42 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff ff32 	bl	8003970 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	2bfd      	cmp	r3, #253	@ 0xfd
 8003b10:	d016      	beq.n	8003b40 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003b12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff ff5c 	bl	80039d4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003b1c:	20ff      	movs	r0, #255	@ 0xff
 8003b1e:	f7ff ff27 	bl	8003970 <xchg_spi>
 8003b22:	20ff      	movs	r0, #255	@ 0xff
 8003b24:	f7ff ff24 	bl	8003970 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003b28:	20ff      	movs	r0, #255	@ 0xff
 8003b2a:	f7ff ff21 	bl	8003970 <xchg_spi>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	2b05      	cmp	r3, #5
 8003b3a:	d001      	beq.n	8003b40 <xmit_datablock+0x5a>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e000      	b.n	8003b42 <xmit_datablock+0x5c>
	}
	return 1;
 8003b40:	2301      	movs	r3, #1
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	4603      	mov	r3, r0
 8003b52:	6039      	str	r1, [r7, #0]
 8003b54:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	da0e      	bge.n	8003b7c <send_cmd+0x32>
		cmd &= 0x7F;
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b64:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003b66:	2100      	movs	r1, #0
 8003b68:	2037      	movs	r0, #55	@ 0x37
 8003b6a:	f7ff ffee 	bl	8003b4a <send_cmd>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003b72:	7bbb      	ldrb	r3, [r7, #14]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d901      	bls.n	8003b7c <send_cmd+0x32>
 8003b78:	7bbb      	ldrb	r3, [r7, #14]
 8003b7a:	e051      	b.n	8003c20 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	2b0c      	cmp	r3, #12
 8003b80:	d008      	beq.n	8003b94 <send_cmd+0x4a>
		despiselect();
 8003b82:	f7ff ff5f 	bl	8003a44 <despiselect>
		if (!spiselect()) return 0xFF;
 8003b86:	f7ff ff6b 	bl	8003a60 <spiselect>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <send_cmd+0x4a>
 8003b90:	23ff      	movs	r3, #255	@ 0xff
 8003b92:	e045      	b.n	8003c20 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fee7 	bl	8003970 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	0e1b      	lsrs	r3, r3, #24
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff fee1 	bl	8003970 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	0c1b      	lsrs	r3, r3, #16
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fedb 	bl	8003970 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fed5 	bl	8003970 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff fed0 	bl	8003970 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <send_cmd+0x94>
 8003bda:	2395      	movs	r3, #149	@ 0x95
 8003bdc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d101      	bne.n	8003be8 <send_cmd+0x9e>
 8003be4:	2387      	movs	r3, #135	@ 0x87
 8003be6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff fec0 	bl	8003970 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	2b0c      	cmp	r3, #12
 8003bf4:	d102      	bne.n	8003bfc <send_cmd+0xb2>
 8003bf6:	20ff      	movs	r0, #255	@ 0xff
 8003bf8:	f7ff feba 	bl	8003970 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003bfc:	230a      	movs	r3, #10
 8003bfe:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003c00:	20ff      	movs	r0, #255	@ 0xff
 8003c02:	f7ff feb5 	bl	8003970 <xchg_spi>
 8003c06:	4603      	mov	r3, r0
 8003c08:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003c0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	da05      	bge.n	8003c1e <send_cmd+0xd4>
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <USER_SPI_initialize+0x14>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0d6      	b.n	8003dea <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003c3c:	4b6d      	ldr	r3, [pc, #436]	@ (8003df4 <USER_SPI_initialize+0x1cc>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <USER_SPI_initialize+0x2a>
 8003c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003df4 <USER_SPI_initialize+0x1cc>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	e0cb      	b.n	8003dea <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003c52:	4b69      	ldr	r3, [pc, #420]	@ (8003df8 <USER_SPI_initialize+0x1d0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003c5c:	4b66      	ldr	r3, [pc, #408]	@ (8003df8 <USER_SPI_initialize+0x1d0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8003c64:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003c66:	230a      	movs	r3, #10
 8003c68:	73fb      	strb	r3, [r7, #15]
 8003c6a:	e005      	b.n	8003c78 <USER_SPI_initialize+0x50>
 8003c6c:	20ff      	movs	r0, #255	@ 0xff
 8003c6e:	f7ff fe7f 	bl	8003970 <xchg_spi>
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f6      	bne.n	8003c6c <USER_SPI_initialize+0x44>

	ty = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003c82:	2100      	movs	r1, #0
 8003c84:	2000      	movs	r0, #0
 8003c86:	f7ff ff60 	bl	8003b4a <send_cmd>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	f040 808b 	bne.w	8003da8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003c92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c96:	f7ff fe41 	bl	800391c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003c9a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003c9e:	2008      	movs	r0, #8
 8003ca0:	f7ff ff53 	bl	8003b4a <send_cmd>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d151      	bne.n	8003d4e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
 8003cae:	e00d      	b.n	8003ccc <USER_SPI_initialize+0xa4>
 8003cb0:	7bfc      	ldrb	r4, [r7, #15]
 8003cb2:	20ff      	movs	r0, #255	@ 0xff
 8003cb4:	f7ff fe5c 	bl	8003970 <xchg_spi>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f104 0310 	add.w	r3, r4, #16
 8003cc0:	443b      	add	r3, r7
 8003cc2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d9ee      	bls.n	8003cb0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003cd2:	7abb      	ldrb	r3, [r7, #10]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d167      	bne.n	8003da8 <USER_SPI_initialize+0x180>
 8003cd8:	7afb      	ldrb	r3, [r7, #11]
 8003cda:	2baa      	cmp	r3, #170	@ 0xaa
 8003cdc:	d164      	bne.n	8003da8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003cde:	bf00      	nop
 8003ce0:	f7ff fe30 	bl	8003944 <SPI_Timer_Status>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <USER_SPI_initialize+0xd2>
 8003cea:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003cee:	20a9      	movs	r0, #169	@ 0xa9
 8003cf0:	f7ff ff2b 	bl	8003b4a <send_cmd>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f2      	bne.n	8003ce0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003cfa:	f7ff fe23 	bl	8003944 <SPI_Timer_Status>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d051      	beq.n	8003da8 <USER_SPI_initialize+0x180>
 8003d04:	2100      	movs	r1, #0
 8003d06:	203a      	movs	r0, #58	@ 0x3a
 8003d08:	f7ff ff1f 	bl	8003b4a <send_cmd>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d14a      	bne.n	8003da8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003d12:	2300      	movs	r3, #0
 8003d14:	73fb      	strb	r3, [r7, #15]
 8003d16:	e00d      	b.n	8003d34 <USER_SPI_initialize+0x10c>
 8003d18:	7bfc      	ldrb	r4, [r7, #15]
 8003d1a:	20ff      	movs	r0, #255	@ 0xff
 8003d1c:	f7ff fe28 	bl	8003970 <xchg_spi>
 8003d20:	4603      	mov	r3, r0
 8003d22:	461a      	mov	r2, r3
 8003d24:	f104 0310 	add.w	r3, r4, #16
 8003d28:	443b      	add	r3, r7
 8003d2a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	3301      	adds	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d9ee      	bls.n	8003d18 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003d3a:	7a3b      	ldrb	r3, [r7, #8]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <USER_SPI_initialize+0x120>
 8003d44:	230c      	movs	r3, #12
 8003d46:	e000      	b.n	8003d4a <USER_SPI_initialize+0x122>
 8003d48:	2304      	movs	r3, #4
 8003d4a:	737b      	strb	r3, [r7, #13]
 8003d4c:	e02c      	b.n	8003da8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003d4e:	2100      	movs	r1, #0
 8003d50:	20a9      	movs	r0, #169	@ 0xa9
 8003d52:	f7ff fefa 	bl	8003b4a <send_cmd>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d804      	bhi.n	8003d66 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	737b      	strb	r3, [r7, #13]
 8003d60:	23a9      	movs	r3, #169	@ 0xa9
 8003d62:	73bb      	strb	r3, [r7, #14]
 8003d64:	e003      	b.n	8003d6e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003d66:	2301      	movs	r3, #1
 8003d68:	737b      	strb	r3, [r7, #13]
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003d6e:	bf00      	nop
 8003d70:	f7ff fde8 	bl	8003944 <SPI_Timer_Status>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <USER_SPI_initialize+0x162>
 8003d7a:	7bbb      	ldrb	r3, [r7, #14]
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fee3 	bl	8003b4a <send_cmd>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f2      	bne.n	8003d70 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003d8a:	f7ff fddb 	bl	8003944 <SPI_Timer_Status>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d007      	beq.n	8003da4 <USER_SPI_initialize+0x17c>
 8003d94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d98:	2010      	movs	r0, #16
 8003d9a:	f7ff fed6 	bl	8003b4a <send_cmd>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <USER_SPI_initialize+0x180>
				ty = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003da8:	4a14      	ldr	r2, [pc, #80]	@ (8003dfc <USER_SPI_initialize+0x1d4>)
 8003daa:	7b7b      	ldrb	r3, [r7, #13]
 8003dac:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003dae:	f7ff fe49 	bl	8003a44 <despiselect>

	if (ty) {			/* OK */
 8003db2:	7b7b      	ldrb	r3, [r7, #13]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d012      	beq.n	8003dde <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003db8:	4b0f      	ldr	r3, [pc, #60]	@ (8003df8 <USER_SPI_initialize+0x1d0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003df8 <USER_SPI_initialize+0x1d0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0210 	orr.w	r2, r2, #16
 8003dca:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003dcc:	4b09      	ldr	r3, [pc, #36]	@ (8003df4 <USER_SPI_initialize+0x1cc>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f023 0301 	bic.w	r3, r3, #1
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	4b06      	ldr	r3, [pc, #24]	@ (8003df4 <USER_SPI_initialize+0x1cc>)
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	e002      	b.n	8003de4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003dde:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <USER_SPI_initialize+0x1cc>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003de4:	4b03      	ldr	r3, [pc, #12]	@ (8003df4 <USER_SPI_initialize+0x1cc>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	b2db      	uxtb	r3, r3
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd90      	pop	{r4, r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20000020 	.word	0x20000020
 8003df8:	20000208 	.word	0x20000208
 8003dfc:	200003b8 	.word	0x200003b8

08003e00 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <USER_SPI_status+0x14>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e002      	b.n	8003e1a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003e14:	4b04      	ldr	r3, [pc, #16]	@ (8003e28 <USER_SPI_status+0x28>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	b2db      	uxtb	r3, r3
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	20000020 	.word	0x20000020

08003e2c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4603      	mov	r3, r0
 8003e3a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d102      	bne.n	8003e48 <USER_SPI_read+0x1c>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <USER_SPI_read+0x20>
 8003e48:	2304      	movs	r3, #4
 8003e4a:	e04d      	b.n	8003ee8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003e4c:	4b28      	ldr	r3, [pc, #160]	@ (8003ef0 <USER_SPI_read+0xc4>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <USER_SPI_read+0x32>
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e044      	b.n	8003ee8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003e5e:	4b25      	ldr	r3, [pc, #148]	@ (8003ef4 <USER_SPI_read+0xc8>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d102      	bne.n	8003e70 <USER_SPI_read+0x44>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	025b      	lsls	r3, r3, #9
 8003e6e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d111      	bne.n	8003e9a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	2011      	movs	r0, #17
 8003e7a:	f7ff fe66 	bl	8003b4a <send_cmd>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d129      	bne.n	8003ed8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003e84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e88:	68b8      	ldr	r0, [r7, #8]
 8003e8a:	f7ff fe03 	bl	8003a94 <rcvr_datablock>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d021      	beq.n	8003ed8 <USER_SPI_read+0xac>
			count = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	e01e      	b.n	8003ed8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	2012      	movs	r0, #18
 8003e9e:	f7ff fe54 	bl	8003b4a <send_cmd>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d117      	bne.n	8003ed8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003ea8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003eac:	68b8      	ldr	r0, [r7, #8]
 8003eae:	f7ff fdf1 	bl	8003a94 <rcvr_datablock>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <USER_SPI_read+0xa2>
				buff += 512;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003ebe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1ed      	bne.n	8003ea8 <USER_SPI_read+0x7c>
 8003ecc:	e000      	b.n	8003ed0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003ece:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	200c      	movs	r0, #12
 8003ed4:	f7ff fe39 	bl	8003b4a <send_cmd>
		}
	}
	despiselect();
 8003ed8:	f7ff fdb4 	bl	8003a44 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	bf14      	ite	ne
 8003ee2:	2301      	movne	r3, #1
 8003ee4:	2300      	moveq	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20000020 	.word	0x20000020
 8003ef4:	200003b8 	.word	0x200003b8

08003ef8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	4603      	mov	r3, r0
 8003f06:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <USER_SPI_write+0x1c>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <USER_SPI_write+0x20>
 8003f14:	2304      	movs	r3, #4
 8003f16:	e063      	b.n	8003fe0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003f18:	4b33      	ldr	r3, [pc, #204]	@ (8003fe8 <USER_SPI_write+0xf0>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <USER_SPI_write+0x32>
 8003f26:	2303      	movs	r3, #3
 8003f28:	e05a      	b.n	8003fe0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003fe8 <USER_SPI_write+0xf0>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <USER_SPI_write+0x44>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e051      	b.n	8003fe0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8003fec <USER_SPI_write+0xf4>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <USER_SPI_write+0x56>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	025b      	lsls	r3, r3, #9
 8003f4c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d110      	bne.n	8003f76 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	2018      	movs	r0, #24
 8003f58:	f7ff fdf7 	bl	8003b4a <send_cmd>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d136      	bne.n	8003fd0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003f62:	21fe      	movs	r1, #254	@ 0xfe
 8003f64:	68b8      	ldr	r0, [r7, #8]
 8003f66:	f7ff fdbe 	bl	8003ae6 <xmit_datablock>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d02f      	beq.n	8003fd0 <USER_SPI_write+0xd8>
			count = 0;
 8003f70:	2300      	movs	r3, #0
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	e02c      	b.n	8003fd0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003f76:	4b1d      	ldr	r3, [pc, #116]	@ (8003fec <USER_SPI_write+0xf4>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	f003 0306 	and.w	r3, r3, #6
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <USER_SPI_write+0x92>
 8003f82:	6839      	ldr	r1, [r7, #0]
 8003f84:	2097      	movs	r0, #151	@ 0x97
 8003f86:	f7ff fde0 	bl	8003b4a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	2019      	movs	r0, #25
 8003f8e:	f7ff fddc 	bl	8003b4a <send_cmd>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d11b      	bne.n	8003fd0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003f98:	21fc      	movs	r1, #252	@ 0xfc
 8003f9a:	68b8      	ldr	r0, [r7, #8]
 8003f9c:	f7ff fda3 	bl	8003ae6 <xmit_datablock>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <USER_SPI_write+0xc4>
				buff += 512;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003fac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1ee      	bne.n	8003f98 <USER_SPI_write+0xa0>
 8003fba:	e000      	b.n	8003fbe <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003fbc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003fbe:	21fd      	movs	r1, #253	@ 0xfd
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	f7ff fd90 	bl	8003ae6 <xmit_datablock>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <USER_SPI_write+0xd8>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003fd0:	f7ff fd38 	bl	8003a44 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	bf14      	ite	ne
 8003fda:	2301      	movne	r3, #1
 8003fdc:	2300      	moveq	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20000020 	.word	0x20000020
 8003fec:	200003b8 	.word	0x200003b8

08003ff0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	@ 0x30
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	603a      	str	r2, [r7, #0]
 8003ffa:	71fb      	strb	r3, [r7, #7]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <USER_SPI_ioctl+0x1a>
 8004006:	2304      	movs	r3, #4
 8004008:	e15a      	b.n	80042c0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800400a:	4baf      	ldr	r3, [pc, #700]	@ (80042c8 <USER_SPI_ioctl+0x2d8>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <USER_SPI_ioctl+0x2c>
 8004018:	2303      	movs	r3, #3
 800401a:	e151      	b.n	80042c0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8004022:	79bb      	ldrb	r3, [r7, #6]
 8004024:	2b04      	cmp	r3, #4
 8004026:	f200 8136 	bhi.w	8004296 <USER_SPI_ioctl+0x2a6>
 800402a:	a201      	add	r2, pc, #4	@ (adr r2, 8004030 <USER_SPI_ioctl+0x40>)
 800402c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004030:	08004045 	.word	0x08004045
 8004034:	08004059 	.word	0x08004059
 8004038:	08004297 	.word	0x08004297
 800403c:	08004105 	.word	0x08004105
 8004040:	080041fb 	.word	0x080041fb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004044:	f7ff fd0c 	bl	8003a60 <spiselect>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 8127 	beq.w	800429e <USER_SPI_ioctl+0x2ae>
 8004050:	2300      	movs	r3, #0
 8004052:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8004056:	e122      	b.n	800429e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004058:	2100      	movs	r1, #0
 800405a:	2009      	movs	r0, #9
 800405c:	f7ff fd75 	bl	8003b4a <send_cmd>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 811d 	bne.w	80042a2 <USER_SPI_ioctl+0x2b2>
 8004068:	f107 030c 	add.w	r3, r7, #12
 800406c:	2110      	movs	r1, #16
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff fd10 	bl	8003a94 <rcvr_datablock>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 8113 	beq.w	80042a2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800407c:	7b3b      	ldrb	r3, [r7, #12]
 800407e:	099b      	lsrs	r3, r3, #6
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d111      	bne.n	80040aa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004086:	7d7b      	ldrb	r3, [r7, #21]
 8004088:	461a      	mov	r2, r3
 800408a:	7d3b      	ldrb	r3, [r7, #20]
 800408c:	021b      	lsls	r3, r3, #8
 800408e:	4413      	add	r3, r2
 8004090:	461a      	mov	r2, r3
 8004092:	7cfb      	ldrb	r3, [r7, #19]
 8004094:	041b      	lsls	r3, r3, #16
 8004096:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800409a:	4413      	add	r3, r2
 800409c:	3301      	adds	r3, #1
 800409e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	029a      	lsls	r2, r3, #10
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	e028      	b.n	80040fc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80040aa:	7c7b      	ldrb	r3, [r7, #17]
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	7dbb      	ldrb	r3, [r7, #22]
 80040b4:	09db      	lsrs	r3, r3, #7
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	7d7b      	ldrb	r3, [r7, #21]
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f003 0306 	and.w	r3, r3, #6
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	3302      	adds	r3, #2
 80040ce:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80040d2:	7d3b      	ldrb	r3, [r7, #20]
 80040d4:	099b      	lsrs	r3, r3, #6
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	7cfb      	ldrb	r3, [r7, #19]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	441a      	add	r2, r3
 80040e0:	7cbb      	ldrb	r3, [r7, #18]
 80040e2:	029b      	lsls	r3, r3, #10
 80040e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80040e8:	4413      	add	r3, r2
 80040ea:	3301      	adds	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80040ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80040f2:	3b09      	subs	r3, #9
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	409a      	lsls	r2, r3
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8004102:	e0ce      	b.n	80042a2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004104:	4b71      	ldr	r3, [pc, #452]	@ (80042cc <USER_SPI_ioctl+0x2dc>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d031      	beq.n	8004174 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004110:	2100      	movs	r1, #0
 8004112:	208d      	movs	r0, #141	@ 0x8d
 8004114:	f7ff fd19 	bl	8003b4a <send_cmd>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	f040 80c3 	bne.w	80042a6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004120:	20ff      	movs	r0, #255	@ 0xff
 8004122:	f7ff fc25 	bl	8003970 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004126:	f107 030c 	add.w	r3, r7, #12
 800412a:	2110      	movs	r1, #16
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fcb1 	bl	8003a94 <rcvr_datablock>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80b6 	beq.w	80042a6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800413a:	2330      	movs	r3, #48	@ 0x30
 800413c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004140:	e007      	b.n	8004152 <USER_SPI_ioctl+0x162>
 8004142:	20ff      	movs	r0, #255	@ 0xff
 8004144:	f7ff fc14 	bl	8003970 <xchg_spi>
 8004148:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800414c:	3b01      	subs	r3, #1
 800414e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004152:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f3      	bne.n	8004142 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800415a:	7dbb      	ldrb	r3, [r7, #22]
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	b2db      	uxtb	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	2310      	movs	r3, #16
 8004164:	fa03 f202 	lsl.w	r2, r3, r2
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004172:	e098      	b.n	80042a6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004174:	2100      	movs	r1, #0
 8004176:	2009      	movs	r0, #9
 8004178:	f7ff fce7 	bl	8003b4a <send_cmd>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	f040 8091 	bne.w	80042a6 <USER_SPI_ioctl+0x2b6>
 8004184:	f107 030c 	add.w	r3, r7, #12
 8004188:	2110      	movs	r1, #16
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff fc82 	bl	8003a94 <rcvr_datablock>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8087 	beq.w	80042a6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004198:	4b4c      	ldr	r3, [pc, #304]	@ (80042cc <USER_SPI_ioctl+0x2dc>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d012      	beq.n	80041ca <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80041a4:	7dbb      	ldrb	r3, [r7, #22]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80041ac:	7dfa      	ldrb	r2, [r7, #23]
 80041ae:	09d2      	lsrs	r2, r2, #7
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	4413      	add	r3, r2
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	7e7b      	ldrb	r3, [r7, #25]
 80041b8:	099b      	lsrs	r3, r3, #6
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	e013      	b.n	80041f2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80041ca:	7dbb      	ldrb	r3, [r7, #22]
 80041cc:	109b      	asrs	r3, r3, #2
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	3301      	adds	r3, #1
 80041d6:	7dfa      	ldrb	r2, [r7, #23]
 80041d8:	00d2      	lsls	r2, r2, #3
 80041da:	f002 0218 	and.w	r2, r2, #24
 80041de:	7df9      	ldrb	r1, [r7, #23]
 80041e0:	0949      	lsrs	r1, r1, #5
 80041e2:	b2c9      	uxtb	r1, r1
 80041e4:	440a      	add	r2, r1
 80041e6:	3201      	adds	r2, #1
 80041e8:	fb02 f303 	mul.w	r3, r2, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80041f8:	e055      	b.n	80042a6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80041fa:	4b34      	ldr	r3, [pc, #208]	@ (80042cc <USER_SPI_ioctl+0x2dc>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	f003 0306 	and.w	r3, r3, #6
 8004202:	2b00      	cmp	r3, #0
 8004204:	d051      	beq.n	80042aa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004206:	f107 020c 	add.w	r2, r7, #12
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	210b      	movs	r1, #11
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff feee 	bl	8003ff0 <USER_SPI_ioctl>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d149      	bne.n	80042ae <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800421a:	7b3b      	ldrb	r3, [r7, #12]
 800421c:	099b      	lsrs	r3, r3, #6
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d104      	bne.n	800422e <USER_SPI_ioctl+0x23e>
 8004224:	7dbb      	ldrb	r3, [r7, #22]
 8004226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d041      	beq.n	80042b2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	623b      	str	r3, [r7, #32]
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800423e:	4b23      	ldr	r3, [pc, #140]	@ (80042cc <USER_SPI_ioctl+0x2dc>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d105      	bne.n	8004256 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800424a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424c:	025b      	lsls	r3, r3, #9
 800424e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004252:	025b      	lsls	r3, r3, #9
 8004254:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004258:	2020      	movs	r0, #32
 800425a:	f7ff fc76 	bl	8003b4a <send_cmd>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d128      	bne.n	80042b6 <USER_SPI_ioctl+0x2c6>
 8004264:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004266:	2021      	movs	r0, #33	@ 0x21
 8004268:	f7ff fc6f 	bl	8003b4a <send_cmd>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d121      	bne.n	80042b6 <USER_SPI_ioctl+0x2c6>
 8004272:	2100      	movs	r1, #0
 8004274:	2026      	movs	r0, #38	@ 0x26
 8004276:	f7ff fc68 	bl	8003b4a <send_cmd>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d11a      	bne.n	80042b6 <USER_SPI_ioctl+0x2c6>
 8004280:	f247 5030 	movw	r0, #30000	@ 0x7530
 8004284:	f7ff fbba 	bl	80039fc <wait_ready>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d013      	beq.n	80042b6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800428e:	2300      	movs	r3, #0
 8004290:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8004294:	e00f      	b.n	80042b6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004296:	2304      	movs	r3, #4
 8004298:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800429c:	e00c      	b.n	80042b8 <USER_SPI_ioctl+0x2c8>
		break;
 800429e:	bf00      	nop
 80042a0:	e00a      	b.n	80042b8 <USER_SPI_ioctl+0x2c8>
		break;
 80042a2:	bf00      	nop
 80042a4:	e008      	b.n	80042b8 <USER_SPI_ioctl+0x2c8>
		break;
 80042a6:	bf00      	nop
 80042a8:	e006      	b.n	80042b8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80042aa:	bf00      	nop
 80042ac:	e004      	b.n	80042b8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80042ae:	bf00      	nop
 80042b0:	e002      	b.n	80042b8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80042b2:	bf00      	nop
 80042b4:	e000      	b.n	80042b8 <USER_SPI_ioctl+0x2c8>
		break;
 80042b6:	bf00      	nop
	}

	despiselect();
 80042b8:	f7ff fbc4 	bl	8003a44 <despiselect>

	return res;
 80042bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3730      	adds	r7, #48	@ 0x30
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20000020 	.word	0x20000020
 80042cc:	200003b8 	.word	0x200003b8

080042d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	4a08      	ldr	r2, [pc, #32]	@ (8004300 <disk_status+0x30>)
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	79fa      	ldrb	r2, [r7, #7]
 80042e8:	4905      	ldr	r1, [pc, #20]	@ (8004300 <disk_status+0x30>)
 80042ea:	440a      	add	r2, r1
 80042ec:	7a12      	ldrb	r2, [r2, #8]
 80042ee:	4610      	mov	r0, r2
 80042f0:	4798      	blx	r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	200005ec 	.word	0x200005ec

08004304 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	4a0e      	ldr	r2, [pc, #56]	@ (8004350 <disk_initialize+0x4c>)
 8004316:	5cd3      	ldrb	r3, [r2, r3]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d114      	bne.n	8004346 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	4a0c      	ldr	r2, [pc, #48]	@ (8004350 <disk_initialize+0x4c>)
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	79fa      	ldrb	r2, [r7, #7]
 800432a:	4909      	ldr	r1, [pc, #36]	@ (8004350 <disk_initialize+0x4c>)
 800432c:	440a      	add	r2, r1
 800432e:	7a12      	ldrb	r2, [r2, #8]
 8004330:	4610      	mov	r0, r2
 8004332:	4798      	blx	r3
 8004334:	4603      	mov	r3, r0
 8004336:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d103      	bne.n	8004346 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	4a03      	ldr	r2, [pc, #12]	@ (8004350 <disk_initialize+0x4c>)
 8004342:	2101      	movs	r1, #1
 8004344:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8004346:	7bfb      	ldrb	r3, [r7, #15]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	200005ec 	.word	0x200005ec

08004354 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004354:	b590      	push	{r4, r7, lr}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	4603      	mov	r3, r0
 8004362:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	4a0a      	ldr	r2, [pc, #40]	@ (8004390 <disk_read+0x3c>)
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	689c      	ldr	r4, [r3, #8]
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	4a07      	ldr	r2, [pc, #28]	@ (8004390 <disk_read+0x3c>)
 8004374:	4413      	add	r3, r2
 8004376:	7a18      	ldrb	r0, [r3, #8]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	47a0      	blx	r4
 8004380:	4603      	mov	r3, r0
 8004382:	75fb      	strb	r3, [r7, #23]
  return res;
 8004384:	7dfb      	ldrb	r3, [r7, #23]
}
 8004386:	4618      	mov	r0, r3
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	bd90      	pop	{r4, r7, pc}
 800438e:	bf00      	nop
 8004390:	200005ec 	.word	0x200005ec

08004394 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004394:	b590      	push	{r4, r7, lr}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	4a0a      	ldr	r2, [pc, #40]	@ (80043d0 <disk_write+0x3c>)
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	68dc      	ldr	r4, [r3, #12]
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	4a07      	ldr	r2, [pc, #28]	@ (80043d0 <disk_write+0x3c>)
 80043b4:	4413      	add	r3, r2
 80043b6:	7a18      	ldrb	r0, [r3, #8]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	47a0      	blx	r4
 80043c0:	4603      	mov	r3, r0
 80043c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd90      	pop	{r4, r7, pc}
 80043ce:	bf00      	nop
 80043d0:	200005ec 	.word	0x200005ec

080043d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	603a      	str	r2, [r7, #0]
 80043de:	71fb      	strb	r3, [r7, #7]
 80043e0:	460b      	mov	r3, r1
 80043e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	4a09      	ldr	r2, [pc, #36]	@ (800440c <disk_ioctl+0x38>)
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	79fa      	ldrb	r2, [r7, #7]
 80043f2:	4906      	ldr	r1, [pc, #24]	@ (800440c <disk_ioctl+0x38>)
 80043f4:	440a      	add	r2, r1
 80043f6:	7a10      	ldrb	r0, [r2, #8]
 80043f8:	79b9      	ldrb	r1, [r7, #6]
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	4798      	blx	r3
 80043fe:	4603      	mov	r3, r0
 8004400:	73fb      	strb	r3, [r7, #15]
  return res;
 8004402:	7bfb      	ldrb	r3, [r7, #15]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	200005ec 	.word	0x200005ec

08004410 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3301      	adds	r3, #1
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004420:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	b21a      	sxth	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	b21b      	sxth	r3, r3
 800442e:	4313      	orrs	r3, r2
 8004430:	b21b      	sxth	r3, r3
 8004432:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004434:	89fb      	ldrh	r3, [r7, #14]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004442:	b480      	push	{r7}
 8004444:	b085      	sub	sp, #20
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3303      	adds	r3, #3
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	3202      	adds	r2, #2
 800445a:	7812      	ldrb	r2, [r2, #0]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	3201      	adds	r2, #1
 8004468:	7812      	ldrb	r2, [r2, #0]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	7812      	ldrb	r2, [r2, #0]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
	return rv;
 800447a:	68fb      	ldr	r3, [r7, #12]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	607a      	str	r2, [r7, #4]
 800449a:	887a      	ldrh	r2, [r7, #2]
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	887b      	ldrh	r3, [r7, #2]
 80044a2:	0a1b      	lsrs	r3, r3, #8
 80044a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	887a      	ldrh	r2, [r7, #2]
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	701a      	strb	r2, [r3, #0]
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	607a      	str	r2, [r7, #4]
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004516:	b480      	push	{r7}
 8004518:	b087      	sub	sp, #28
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00d      	beq.n	800454c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	1c53      	adds	r3, r2, #1
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	1c59      	adds	r1, r3, #1
 800453a:	6179      	str	r1, [r7, #20]
 800453c:	7812      	ldrb	r2, [r2, #0]
 800453e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3b01      	subs	r3, #1
 8004544:	607b      	str	r3, [r7, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f1      	bne.n	8004530 <mem_cpy+0x1a>
	}
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	617a      	str	r2, [r7, #20]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3b01      	subs	r3, #1
 8004578:	607b      	str	r3, [r7, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f3      	bne.n	8004568 <mem_set+0x10>
}
 8004580:	bf00      	nop
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800458e:	b480      	push	{r7}
 8004590:	b089      	sub	sp, #36	@ 0x24
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	61fa      	str	r2, [r7, #28]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	4619      	mov	r1, r3
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	61ba      	str	r2, [r7, #24]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	1acb      	subs	r3, r1, r3
 80045ba:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3b01      	subs	r3, #1
 80045c0:	607b      	str	r3, [r7, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <mem_cmp+0x40>
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0eb      	beq.n	80045a6 <mem_cmp+0x18>

	return r;
 80045ce:	697b      	ldr	r3, [r7, #20]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3724      	adds	r7, #36	@ 0x24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80045e6:	e002      	b.n	80045ee <chk_chr+0x12>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3301      	adds	r3, #1
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <chk_chr+0x26>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	4293      	cmp	r3, r2
 8004600:	d1f2      	bne.n	80045e8 <chk_chr+0xc>
	return *str;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	781b      	ldrb	r3, [r3, #0]
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e029      	b.n	800467c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004628:	4a27      	ldr	r2, [pc, #156]	@ (80046c8 <chk_lock+0xb4>)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	4413      	add	r3, r2
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01d      	beq.n	8004672 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004636:	4a24      	ldr	r2, [pc, #144]	@ (80046c8 <chk_lock+0xb4>)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	4413      	add	r3, r2
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d116      	bne.n	8004676 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004648:	4a1f      	ldr	r2, [pc, #124]	@ (80046c8 <chk_lock+0xb4>)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	4413      	add	r3, r2
 8004650:	3304      	adds	r3, #4
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004658:	429a      	cmp	r2, r3
 800465a:	d10c      	bne.n	8004676 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800465c:	4a1a      	ldr	r2, [pc, #104]	@ (80046c8 <chk_lock+0xb4>)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	4413      	add	r3, r2
 8004664:	3308      	adds	r3, #8
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800466c:	429a      	cmp	r2, r3
 800466e:	d102      	bne.n	8004676 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004670:	e007      	b.n	8004682 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004672:	2301      	movs	r3, #1
 8004674:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3301      	adds	r3, #1
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d9d2      	bls.n	8004628 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d109      	bne.n	800469c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d102      	bne.n	8004694 <chk_lock+0x80>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d101      	bne.n	8004698 <chk_lock+0x84>
 8004694:	2300      	movs	r3, #0
 8004696:	e010      	b.n	80046ba <chk_lock+0xa6>
 8004698:	2312      	movs	r3, #18
 800469a:	e00e      	b.n	80046ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d108      	bne.n	80046b4 <chk_lock+0xa0>
 80046a2:	4a09      	ldr	r2, [pc, #36]	@ (80046c8 <chk_lock+0xb4>)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	4413      	add	r3, r2
 80046aa:	330c      	adds	r3, #12
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046b2:	d101      	bne.n	80046b8 <chk_lock+0xa4>
 80046b4:	2310      	movs	r3, #16
 80046b6:	e000      	b.n	80046ba <chk_lock+0xa6>
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	200003cc 	.word	0x200003cc

080046cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80046d2:	2300      	movs	r3, #0
 80046d4:	607b      	str	r3, [r7, #4]
 80046d6:	e002      	b.n	80046de <enq_lock+0x12>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3301      	adds	r3, #1
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d806      	bhi.n	80046f2 <enq_lock+0x26>
 80046e4:	4a09      	ldr	r2, [pc, #36]	@ (800470c <enq_lock+0x40>)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	4413      	add	r3, r2
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f2      	bne.n	80046d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	bf14      	ite	ne
 80046f8:	2301      	movne	r3, #1
 80046fa:	2300      	moveq	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	200003cc 	.word	0x200003cc

08004710 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e01f      	b.n	8004760 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004720:	4a41      	ldr	r2, [pc, #260]	@ (8004828 <inc_lock+0x118>)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	4413      	add	r3, r2
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d113      	bne.n	800475a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004732:	4a3d      	ldr	r2, [pc, #244]	@ (8004828 <inc_lock+0x118>)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	4413      	add	r3, r2
 800473a:	3304      	adds	r3, #4
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004742:	429a      	cmp	r2, r3
 8004744:	d109      	bne.n	800475a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004746:	4a38      	ldr	r2, [pc, #224]	@ (8004828 <inc_lock+0x118>)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	4413      	add	r3, r2
 800474e:	3308      	adds	r3, #8
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004756:	429a      	cmp	r2, r3
 8004758:	d006      	beq.n	8004768 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	3301      	adds	r3, #1
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d9dc      	bls.n	8004720 <inc_lock+0x10>
 8004766:	e000      	b.n	800476a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004768:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d132      	bne.n	80047d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e002      	b.n	800477c <inc_lock+0x6c>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3301      	adds	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d806      	bhi.n	8004790 <inc_lock+0x80>
 8004782:	4a29      	ldr	r2, [pc, #164]	@ (8004828 <inc_lock+0x118>)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	4413      	add	r3, r2
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1f2      	bne.n	8004776 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d101      	bne.n	800479a <inc_lock+0x8a>
 8004796:	2300      	movs	r3, #0
 8004798:	e040      	b.n	800481c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4922      	ldr	r1, [pc, #136]	@ (8004828 <inc_lock+0x118>)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	440b      	add	r3, r1
 80047a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	491e      	ldr	r1, [pc, #120]	@ (8004828 <inc_lock+0x118>)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	440b      	add	r3, r1
 80047b4:	3304      	adds	r3, #4
 80047b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	491a      	ldr	r1, [pc, #104]	@ (8004828 <inc_lock+0x118>)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	440b      	add	r3, r1
 80047c4:	3308      	adds	r3, #8
 80047c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80047c8:	4a17      	ldr	r2, [pc, #92]	@ (8004828 <inc_lock+0x118>)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	4413      	add	r3, r2
 80047d0:	330c      	adds	r3, #12
 80047d2:	2200      	movs	r2, #0
 80047d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d009      	beq.n	80047f0 <inc_lock+0xe0>
 80047dc:	4a12      	ldr	r2, [pc, #72]	@ (8004828 <inc_lock+0x118>)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	4413      	add	r3, r2
 80047e4:	330c      	adds	r3, #12
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <inc_lock+0xe0>
 80047ec:	2300      	movs	r3, #0
 80047ee:	e015      	b.n	800481c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d108      	bne.n	8004808 <inc_lock+0xf8>
 80047f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004828 <inc_lock+0x118>)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	4413      	add	r3, r2
 80047fe:	330c      	adds	r3, #12
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	3301      	adds	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	e001      	b.n	800480c <inc_lock+0xfc>
 8004808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800480c:	4906      	ldr	r1, [pc, #24]	@ (8004828 <inc_lock+0x118>)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	440b      	add	r3, r1
 8004814:	330c      	adds	r3, #12
 8004816:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3301      	adds	r3, #1
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	200003cc 	.word	0x200003cc

0800482c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3b01      	subs	r3, #1
 8004838:	607b      	str	r3, [r7, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d825      	bhi.n	800488c <dec_lock+0x60>
		n = Files[i].ctr;
 8004840:	4a17      	ldr	r2, [pc, #92]	@ (80048a0 <dec_lock+0x74>)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	4413      	add	r3, r2
 8004848:	330c      	adds	r3, #12
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800484e:	89fb      	ldrh	r3, [r7, #14]
 8004850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004854:	d101      	bne.n	800485a <dec_lock+0x2e>
 8004856:	2300      	movs	r3, #0
 8004858:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800485a:	89fb      	ldrh	r3, [r7, #14]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <dec_lock+0x3a>
 8004860:	89fb      	ldrh	r3, [r7, #14]
 8004862:	3b01      	subs	r3, #1
 8004864:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004866:	4a0e      	ldr	r2, [pc, #56]	@ (80048a0 <dec_lock+0x74>)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	4413      	add	r3, r2
 800486e:	330c      	adds	r3, #12
 8004870:	89fa      	ldrh	r2, [r7, #14]
 8004872:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004874:	89fb      	ldrh	r3, [r7, #14]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d105      	bne.n	8004886 <dec_lock+0x5a>
 800487a:	4a09      	ldr	r2, [pc, #36]	@ (80048a0 <dec_lock+0x74>)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	4413      	add	r3, r2
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	737b      	strb	r3, [r7, #13]
 800488a:	e001      	b.n	8004890 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800488c:	2302      	movs	r3, #2
 800488e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004890:	7b7b      	ldrb	r3, [r7, #13]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	200003cc 	.word	0x200003cc

080048a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e010      	b.n	80048d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80048b2:	4a0d      	ldr	r2, [pc, #52]	@ (80048e8 <clear_lock+0x44>)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	4413      	add	r3, r2
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d105      	bne.n	80048ce <clear_lock+0x2a>
 80048c2:	4a09      	ldr	r2, [pc, #36]	@ (80048e8 <clear_lock+0x44>)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	4413      	add	r3, r2
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3301      	adds	r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d9eb      	bls.n	80048b2 <clear_lock+0xe>
	}
}
 80048da:	bf00      	nop
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	200003cc 	.word	0x200003cc

080048ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80048f4:	2300      	movs	r3, #0
 80048f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	78db      	ldrb	r3, [r3, #3]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d034      	beq.n	800496a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004904:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	7858      	ldrb	r0, [r3, #1]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004910:	2301      	movs	r3, #1
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	f7ff fd3e 	bl	8004394 <disk_write>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <sync_window+0x38>
			res = FR_DISK_ERR;
 800491e:	2301      	movs	r3, #1
 8004920:	73fb      	strb	r3, [r7, #15]
 8004922:	e022      	b.n	800496a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	1ad2      	subs	r2, r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	429a      	cmp	r2, r3
 8004938:	d217      	bcs.n	800496a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	789b      	ldrb	r3, [r3, #2]
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	e010      	b.n	8004964 <sync_window+0x78>
					wsect += fs->fsize;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4413      	add	r3, r2
 800494a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	7858      	ldrb	r0, [r3, #1]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004956:	2301      	movs	r3, #1
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	f7ff fd1b 	bl	8004394 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	3b01      	subs	r3, #1
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d8eb      	bhi.n	8004942 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800496a:	7bfb      	ldrb	r3, [r7, #15]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d01b      	beq.n	80049c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff ffad 	bl	80048ec <sync_window>
 8004992:	4603      	mov	r3, r0
 8004994:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d113      	bne.n	80049c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	7858      	ldrb	r0, [r3, #1]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80049a6:	2301      	movs	r3, #1
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	f7ff fcd3 	bl	8004354 <disk_read>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d004      	beq.n	80049be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80049b4:	f04f 33ff 	mov.w	r3, #4294967295
 80049b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff ff87 	bl	80048ec <sync_window>
 80049de:	4603      	mov	r3, r0
 80049e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d158      	bne.n	8004a9a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d148      	bne.n	8004a82 <sync_fs+0xb2>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	791b      	ldrb	r3, [r3, #4]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d144      	bne.n	8004a82 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3334      	adds	r3, #52	@ 0x34
 80049fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a00:	2100      	movs	r1, #0
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fda8 	bl	8004558 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3334      	adds	r3, #52	@ 0x34
 8004a0c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004a10:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff fd37 	bl	8004488 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3334      	adds	r3, #52	@ 0x34
 8004a1e:	4921      	ldr	r1, [pc, #132]	@ (8004aa4 <sync_fs+0xd4>)
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fd4c 	bl	80044be <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3334      	adds	r3, #52	@ 0x34
 8004a2a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004a2e:	491e      	ldr	r1, [pc, #120]	@ (8004aa8 <sync_fs+0xd8>)
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fd44 	bl	80044be <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3334      	adds	r3, #52	@ 0x34
 8004a3a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	4619      	mov	r1, r3
 8004a44:	4610      	mov	r0, r2
 8004a46:	f7ff fd3a 	bl	80044be <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3334      	adds	r3, #52	@ 0x34
 8004a4e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	4619      	mov	r1, r3
 8004a58:	4610      	mov	r0, r2
 8004a5a:	f7ff fd30 	bl	80044be <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	7858      	ldrb	r0, [r3, #1]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a76:	2301      	movs	r3, #1
 8004a78:	f7ff fc8c 	bl	8004394 <disk_write>
			fs->fsi_flag = 0;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	785b      	ldrb	r3, [r3, #1]
 8004a86:	2200      	movs	r2, #0
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff fca2 	bl	80043d4 <disk_ioctl>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <sync_fs+0xca>
 8004a96:	2301      	movs	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	41615252 	.word	0x41615252
 8004aa8:	61417272 	.word	0x61417272

08004aac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	3b02      	subs	r3, #2
 8004aba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	3b02      	subs	r3, #2
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d301      	bcc.n	8004acc <clust2sect+0x20>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e008      	b.n	8004ade <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	895b      	ldrh	r3, [r3, #10]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	fb03 f202 	mul.w	r2, r3, r2
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004adc:	4413      	add	r3, r2
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d904      	bls.n	8004b0a <get_fat+0x20>
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d302      	bcc.n	8004b10 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	e08e      	b.n	8004c2e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004b10:	f04f 33ff 	mov.w	r3, #4294967295
 8004b14:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d061      	beq.n	8004be2 <get_fat+0xf8>
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	dc7b      	bgt.n	8004c1a <get_fat+0x130>
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d002      	beq.n	8004b2c <get_fat+0x42>
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d041      	beq.n	8004bae <get_fat+0xc4>
 8004b2a:	e076      	b.n	8004c1a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	085b      	lsrs	r3, r3, #1
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	0a5b      	lsrs	r3, r3, #9
 8004b42:	4413      	add	r3, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	6938      	ldr	r0, [r7, #16]
 8004b48:	f7ff ff14 	bl	8004974 <move_window>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d166      	bne.n	8004c20 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	60fa      	str	r2, [r7, #12]
 8004b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004b64:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	0a5b      	lsrs	r3, r3, #9
 8004b6e:	4413      	add	r3, r2
 8004b70:	4619      	mov	r1, r3
 8004b72:	6938      	ldr	r0, [r7, #16]
 8004b74:	f7ff fefe 	bl	8004974 <move_window>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d152      	bne.n	8004c24 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	4413      	add	r3, r2
 8004b88:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <get_fat+0xba>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	e002      	b.n	8004baa <get_fat+0xc0>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004baa:	617b      	str	r3, [r7, #20]
			break;
 8004bac:	e03f      	b.n	8004c2e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	0a1b      	lsrs	r3, r3, #8
 8004bb6:	4413      	add	r3, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	6938      	ldr	r0, [r7, #16]
 8004bbc:	f7ff feda 	bl	8004974 <move_window>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d130      	bne.n	8004c28 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004bd4:	4413      	add	r3, r2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff fc1a 	bl	8004410 <ld_word>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	617b      	str	r3, [r7, #20]
			break;
 8004be0:	e025      	b.n	8004c2e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	09db      	lsrs	r3, r3, #7
 8004bea:	4413      	add	r3, r2
 8004bec:	4619      	mov	r1, r3
 8004bee:	6938      	ldr	r0, [r7, #16]
 8004bf0:	f7ff fec0 	bl	8004974 <move_window>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d118      	bne.n	8004c2c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004c08:	4413      	add	r3, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff fc19 	bl	8004442 <ld_dword>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c16:	617b      	str	r3, [r7, #20]
			break;
 8004c18:	e009      	b.n	8004c2e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	e006      	b.n	8004c2e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c20:	bf00      	nop
 8004c22:	e004      	b.n	8004c2e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c24:	bf00      	nop
 8004c26:	e002      	b.n	8004c2e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004c28:	bf00      	nop
 8004c2a:	e000      	b.n	8004c2e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004c2c:	bf00      	nop
		}
	}

	return val;
 8004c2e:	697b      	ldr	r3, [r7, #20]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b089      	sub	sp, #36	@ 0x24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004c44:	2302      	movs	r3, #2
 8004c46:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	f240 80d9 	bls.w	8004e02 <put_fat+0x1ca>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	f080 80d3 	bcs.w	8004e02 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	f000 8096 	beq.w	8004d92 <put_fat+0x15a>
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	f300 80cb 	bgt.w	8004e02 <put_fat+0x1ca>
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d002      	beq.n	8004c76 <put_fat+0x3e>
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d06e      	beq.n	8004d52 <put_fat+0x11a>
 8004c74:	e0c5      	b.n	8004e02 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	61bb      	str	r3, [r7, #24]
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	085b      	lsrs	r3, r3, #1
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4413      	add	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	0a5b      	lsrs	r3, r3, #9
 8004c8c:	4413      	add	r3, r2
 8004c8e:	4619      	mov	r1, r3
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff fe6f 	bl	8004974 <move_window>
 8004c96:	4603      	mov	r3, r0
 8004c98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c9a:	7ffb      	ldrb	r3, [r7, #31]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f040 80a9 	bne.w	8004df4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	1c59      	adds	r1, r3, #1
 8004cac:	61b9      	str	r1, [r7, #24]
 8004cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb2:	4413      	add	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00d      	beq.n	8004cdc <put_fat+0xa4>
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	b25b      	sxtb	r3, r3
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	b25a      	sxtb	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	b25b      	sxtb	r3, r3
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	b25b      	sxtb	r3, r3
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	b25b      	sxtb	r3, r3
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	e001      	b.n	8004ce0 <put_fat+0xa8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	0a5b      	lsrs	r3, r3, #9
 8004cf2:	4413      	add	r3, r2
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff fe3c 	bl	8004974 <move_window>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d00:	7ffb      	ldrb	r3, [r7, #31]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d178      	bne.n	8004df8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d12:	4413      	add	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <put_fat+0xf0>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	091b      	lsrs	r3, r3, #4
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	e00e      	b.n	8004d46 <put_fat+0x10e>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	b25b      	sxtb	r3, r3
 8004d2e:	f023 030f 	bic.w	r3, r3, #15
 8004d32:	b25a      	sxtb	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	0a1b      	lsrs	r3, r3, #8
 8004d38:	b25b      	sxtb	r3, r3
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	b25b      	sxtb	r3, r3
 8004d40:	4313      	orrs	r3, r2
 8004d42:	b25b      	sxtb	r3, r3
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	70da      	strb	r2, [r3, #3]
			break;
 8004d50:	e057      	b.n	8004e02 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	0a1b      	lsrs	r3, r3, #8
 8004d5a:	4413      	add	r3, r2
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f7ff fe08 	bl	8004974 <move_window>
 8004d64:	4603      	mov	r3, r0
 8004d66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d68:	7ffb      	ldrb	r3, [r7, #31]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d146      	bne.n	8004dfc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004d7c:	4413      	add	r3, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	b292      	uxth	r2, r2
 8004d82:	4611      	mov	r1, r2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff fb7f 	bl	8004488 <st_word>
			fs->wflag = 1;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	70da      	strb	r2, [r3, #3]
			break;
 8004d90:	e037      	b.n	8004e02 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	09db      	lsrs	r3, r3, #7
 8004d9a:	4413      	add	r3, r2
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f7ff fde8 	bl	8004974 <move_window>
 8004da4:	4603      	mov	r3, r0
 8004da6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004da8:	7ffb      	ldrb	r3, [r7, #31]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d128      	bne.n	8004e00 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004dc2:	4413      	add	r3, r2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff fb3c 	bl	8004442 <ld_dword>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004dd0:	4323      	orrs	r3, r4
 8004dd2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004de2:	4413      	add	r3, r2
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fb69 	bl	80044be <st_dword>
			fs->wflag = 1;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2201      	movs	r2, #1
 8004df0:	70da      	strb	r2, [r3, #3]
			break;
 8004df2:	e006      	b.n	8004e02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004df4:	bf00      	nop
 8004df6:	e004      	b.n	8004e02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004df8:	bf00      	nop
 8004dfa:	e002      	b.n	8004e02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004dfc:	bf00      	nop
 8004dfe:	e000      	b.n	8004e02 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004e00:	bf00      	nop
		}
	}
	return res;
 8004e02:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3724      	adds	r7, #36	@ 0x24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd90      	pop	{r4, r7, pc}

08004e0c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d904      	bls.n	8004e32 <remove_chain+0x26>
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d301      	bcc.n	8004e36 <remove_chain+0x2a>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e04b      	b.n	8004ece <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00c      	beq.n	8004e56 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	69b8      	ldr	r0, [r7, #24]
 8004e44:	f7ff fef8 	bl	8004c38 <put_fat>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004e4c:	7ffb      	ldrb	r3, [r7, #31]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <remove_chain+0x4a>
 8004e52:	7ffb      	ldrb	r3, [r7, #31]
 8004e54:	e03b      	b.n	8004ece <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7ff fe46 	bl	8004aea <get_fat>
 8004e5e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d031      	beq.n	8004eca <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <remove_chain+0x64>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e02e      	b.n	8004ece <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e76:	d101      	bne.n	8004e7c <remove_chain+0x70>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e028      	b.n	8004ece <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	69b8      	ldr	r0, [r7, #24]
 8004e82:	f7ff fed9 	bl	8004c38 <put_fat>
 8004e86:	4603      	mov	r3, r0
 8004e88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004e8a:	7ffb      	ldrb	r3, [r7, #31]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <remove_chain+0x88>
 8004e90:	7ffb      	ldrb	r3, [r7, #31]
 8004e92:	e01c      	b.n	8004ece <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	695a      	ldr	r2, [r3, #20]
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	3b02      	subs	r3, #2
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d20b      	bcs.n	8004eba <remove_chain+0xae>
			fs->free_clst++;
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	791b      	ldrb	r3, [r3, #4]
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d3c6      	bcc.n	8004e56 <remove_chain+0x4a>
 8004ec8:	e000      	b.n	8004ecc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004eca:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b088      	sub	sp, #32
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10d      	bne.n	8004f08 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d004      	beq.n	8004f02 <create_chain+0x2c>
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d31b      	bcc.n	8004f3a <create_chain+0x64>
 8004f02:	2301      	movs	r3, #1
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	e018      	b.n	8004f3a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004f08:	6839      	ldr	r1, [r7, #0]
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff fded 	bl	8004aea <get_fat>
 8004f10:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d801      	bhi.n	8004f1c <create_chain+0x46>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e070      	b.n	8004ffe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f22:	d101      	bne.n	8004f28 <create_chain+0x52>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	e06a      	b.n	8004ffe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d201      	bcs.n	8004f36 <create_chain+0x60>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	e063      	b.n	8004ffe <create_chain+0x128>
		scl = clst;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	3301      	adds	r3, #1
 8004f42:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d307      	bcc.n	8004f5e <create_chain+0x88>
				ncl = 2;
 8004f4e:	2302      	movs	r3, #2
 8004f50:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d901      	bls.n	8004f5e <create_chain+0x88>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e04f      	b.n	8004ffe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004f5e:	69f9      	ldr	r1, [r7, #28]
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff fdc2 	bl	8004aea <get_fat>
 8004f66:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00e      	beq.n	8004f8c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d003      	beq.n	8004f7c <create_chain+0xa6>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7a:	d101      	bne.n	8004f80 <create_chain+0xaa>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	e03e      	b.n	8004ffe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d1da      	bne.n	8004f3e <create_chain+0x68>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e038      	b.n	8004ffe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004f8c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f92:	69f9      	ldr	r1, [r7, #28]
 8004f94:	6938      	ldr	r0, [r7, #16]
 8004f96:	f7ff fe4f 	bl	8004c38 <put_fat>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004f9e:	7dfb      	ldrb	r3, [r7, #23]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d109      	bne.n	8004fb8 <create_chain+0xe2>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d006      	beq.n	8004fb8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	6839      	ldr	r1, [r7, #0]
 8004fae:	6938      	ldr	r0, [r7, #16]
 8004fb0:	f7ff fe42 	bl	8004c38 <put_fat>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d116      	bne.n	8004fec <create_chain+0x116>
		fs->last_clst = ncl;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	69fa      	ldr	r2, [r7, #28]
 8004fc2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	695a      	ldr	r2, [r3, #20]
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	3b02      	subs	r3, #2
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d804      	bhi.n	8004fdc <create_chain+0x106>
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	1e5a      	subs	r2, r3, #1
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	791b      	ldrb	r3, [r3, #4]
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	711a      	strb	r2, [r3, #4]
 8004fea:	e007      	b.n	8004ffc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d102      	bne.n	8004ff8 <create_chain+0x122>
 8004ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff6:	e000      	b.n	8004ffa <create_chain+0x124>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004ffc:	69fb      	ldr	r3, [r7, #28]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3720      	adds	r7, #32
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005006:	b480      	push	{r7}
 8005008:	b087      	sub	sp, #28
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501a:	3304      	adds	r3, #4
 800501c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	0a5b      	lsrs	r3, r3, #9
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	8952      	ldrh	r2, [r2, #10]
 8005026:	fbb3 f3f2 	udiv	r3, r3, r2
 800502a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1d1a      	adds	r2, r3, #4
 8005030:	613a      	str	r2, [r7, #16]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <clmt_clust+0x3a>
 800503c:	2300      	movs	r3, #0
 800503e:	e010      	b.n	8005062 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	429a      	cmp	r2, r3
 8005046:	d307      	bcc.n	8005058 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	3304      	adds	r3, #4
 8005054:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005056:	e7e9      	b.n	800502c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005058:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	4413      	add	r3, r2
}
 8005062:	4618      	mov	r0, r3
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b086      	sub	sp, #24
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005084:	d204      	bcs.n	8005090 <dir_sdi+0x22>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	f003 031f 	and.w	r3, r3, #31
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005090:	2302      	movs	r3, #2
 8005092:	e063      	b.n	800515c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <dir_sdi+0x46>
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d902      	bls.n	80050b4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10c      	bne.n	80050d4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	8912      	ldrh	r2, [r2, #8]
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d301      	bcc.n	80050ca <dir_sdi+0x5c>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e048      	b.n	800515c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	61da      	str	r2, [r3, #28]
 80050d2:	e029      	b.n	8005128 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	895b      	ldrh	r3, [r3, #10]
 80050d8:	025b      	lsls	r3, r3, #9
 80050da:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80050dc:	e019      	b.n	8005112 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6979      	ldr	r1, [r7, #20]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff fd01 	bl	8004aea <get_fat>
 80050e8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f0:	d101      	bne.n	80050f6 <dir_sdi+0x88>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e032      	b.n	800515c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d904      	bls.n	8005106 <dir_sdi+0x98>
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	429a      	cmp	r2, r3
 8005104:	d301      	bcc.n	800510a <dir_sdi+0x9c>
 8005106:	2302      	movs	r3, #2
 8005108:	e028      	b.n	800515c <dir_sdi+0xee>
			ofs -= csz;
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	429a      	cmp	r2, r3
 8005118:	d2e1      	bcs.n	80050de <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800511a:	6979      	ldr	r1, [r7, #20]
 800511c:	6938      	ldr	r0, [r7, #16]
 800511e:	f7ff fcc5 	bl	8004aac <clust2sect>
 8005122:	4602      	mov	r2, r0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <dir_sdi+0xcc>
 8005136:	2302      	movs	r3, #2
 8005138:	e010      	b.n	800515c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69da      	ldr	r2, [r3, #28]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	0a5b      	lsrs	r3, r3, #9
 8005142:	441a      	add	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005154:	441a      	add	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	3320      	adds	r3, #32
 800517a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d003      	beq.n	800518c <dir_next+0x28>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800518a:	d301      	bcc.n	8005190 <dir_next+0x2c>
 800518c:	2304      	movs	r3, #4
 800518e:	e0aa      	b.n	80052e6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005196:	2b00      	cmp	r3, #0
 8005198:	f040 8098 	bne.w	80052cc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10b      	bne.n	80051c6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	8912      	ldrh	r2, [r2, #8]
 80051b6:	4293      	cmp	r3, r2
 80051b8:	f0c0 8088 	bcc.w	80052cc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	61da      	str	r2, [r3, #28]
 80051c2:	2304      	movs	r3, #4
 80051c4:	e08f      	b.n	80052e6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	0a5b      	lsrs	r3, r3, #9
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	8952      	ldrh	r2, [r2, #10]
 80051ce:	3a01      	subs	r2, #1
 80051d0:	4013      	ands	r3, r2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d17a      	bne.n	80052cc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	4619      	mov	r1, r3
 80051de:	4610      	mov	r0, r2
 80051e0:	f7ff fc83 	bl	8004aea <get_fat>
 80051e4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d801      	bhi.n	80051f0 <dir_next+0x8c>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e07a      	b.n	80052e6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d101      	bne.n	80051fc <dir_next+0x98>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e074      	b.n	80052e6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	429a      	cmp	r2, r3
 8005204:	d358      	bcc.n	80052b8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d104      	bne.n	8005216 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	61da      	str	r2, [r3, #28]
 8005212:	2304      	movs	r3, #4
 8005214:	e067      	b.n	80052e6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f7ff fe59 	bl	8004ed6 <create_chain>
 8005224:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <dir_next+0xcc>
 800522c:	2307      	movs	r3, #7
 800522e:	e05a      	b.n	80052e6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <dir_next+0xd6>
 8005236:	2302      	movs	r3, #2
 8005238:	e055      	b.n	80052e6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d101      	bne.n	8005246 <dir_next+0xe2>
 8005242:	2301      	movs	r3, #1
 8005244:	e04f      	b.n	80052e6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f7ff fb50 	bl	80048ec <sync_window>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <dir_next+0xf2>
 8005252:	2301      	movs	r3, #1
 8005254:	e047      	b.n	80052e6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3334      	adds	r3, #52	@ 0x34
 800525a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800525e:	2100      	movs	r1, #0
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff f979 	bl	8004558 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005266:	2300      	movs	r3, #0
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	6979      	ldr	r1, [r7, #20]
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f7ff fc1d 	bl	8004aac <clust2sect>
 8005272:	4602      	mov	r2, r0
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	631a      	str	r2, [r3, #48]	@ 0x30
 8005278:	e012      	b.n	80052a0 <dir_next+0x13c>
						fs->wflag = 1;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f7ff fb33 	bl	80048ec <sync_window>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <dir_next+0x12c>
 800528c:	2301      	movs	r3, #1
 800528e:	e02a      	b.n	80052e6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	3301      	adds	r3, #1
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	631a      	str	r2, [r3, #48]	@ 0x30
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	895b      	ldrh	r3, [r3, #10]
 80052a4:	461a      	mov	r2, r3
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d3e6      	bcc.n	800527a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad2      	subs	r2, r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80052be:	6979      	ldr	r1, [r7, #20]
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f7ff fbf3 	bl	8004aac <clust2sect>
 80052c6:	4602      	mov	r2, r0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052de:	441a      	add	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b086      	sub	sp, #24
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80052fe:	2100      	movs	r1, #0
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff feb4 	bl	800506e <dir_sdi>
 8005306:	4603      	mov	r3, r0
 8005308:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800530a:	7dfb      	ldrb	r3, [r7, #23]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d12b      	bne.n	8005368 <dir_alloc+0x7a>
		n = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	4619      	mov	r1, r3
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7ff fb2a 	bl	8004974 <move_window>
 8005320:	4603      	mov	r3, r0
 8005322:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d11d      	bne.n	8005366 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2be5      	cmp	r3, #229	@ 0xe5
 8005332:	d004      	beq.n	800533e <dir_alloc+0x50>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d107      	bne.n	800534e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	3301      	adds	r3, #1
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	429a      	cmp	r2, r3
 800534a:	d102      	bne.n	8005352 <dir_alloc+0x64>
 800534c:	e00c      	b.n	8005368 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800534e:	2300      	movs	r3, #0
 8005350:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005352:	2101      	movs	r1, #1
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff ff05 	bl	8005164 <dir_next>
 800535a:	4603      	mov	r3, r0
 800535c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800535e:	7dfb      	ldrb	r3, [r7, #23]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0d7      	beq.n	8005314 <dir_alloc+0x26>
 8005364:	e000      	b.n	8005368 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005366:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005368:	7dfb      	ldrb	r3, [r7, #23]
 800536a:	2b04      	cmp	r3, #4
 800536c:	d101      	bne.n	8005372 <dir_alloc+0x84>
 800536e:	2307      	movs	r3, #7
 8005370:	75fb      	strb	r3, [r7, #23]
	return res;
 8005372:	7dfb      	ldrb	r3, [r7, #23]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	331a      	adds	r3, #26
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff f840 	bl	8004410 <ld_word>
 8005390:	4603      	mov	r3, r0
 8005392:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b03      	cmp	r3, #3
 800539a:	d109      	bne.n	80053b0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	3314      	adds	r3, #20
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff f835 	bl	8004410 <ld_word>
 80053a6:	4603      	mov	r3, r0
 80053a8:	041b      	lsls	r3, r3, #16
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80053b0:	68fb      	ldr	r3, [r7, #12]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	331a      	adds	r3, #26
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	b292      	uxth	r2, r2
 80053ce:	4611      	mov	r1, r2
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff f859 	bl	8004488 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d109      	bne.n	80053f2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f103 0214 	add.w	r2, r3, #20
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	0c1b      	lsrs	r3, r3, #16
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	4619      	mov	r1, r3
 80053ec:	4610      	mov	r0, r2
 80053ee:	f7ff f84b 	bl	8004488 <st_word>
	}
}
 80053f2:	bf00      	nop
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80053fc:	b590      	push	{r4, r7, lr}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	331a      	adds	r3, #26
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff f800 	bl	8004410 <ld_word>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <cmp_lfn+0x1e>
 8005416:	2300      	movs	r3, #0
 8005418:	e059      	b.n	80054ce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005422:	1e5a      	subs	r2, r3, #1
 8005424:	4613      	mov	r3, r2
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005430:	2301      	movs	r3, #1
 8005432:	81fb      	strh	r3, [r7, #14]
 8005434:	2300      	movs	r3, #0
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	e033      	b.n	80054a2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800543a:	4a27      	ldr	r2, [pc, #156]	@ (80054d8 <cmp_lfn+0xdc>)
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	4413      	add	r3, r2
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	4413      	add	r3, r2
 8005448:	4618      	mov	r0, r3
 800544a:	f7fe ffe1 	bl	8004410 <ld_word>
 800544e:	4603      	mov	r3, r0
 8005450:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005452:	89fb      	ldrh	r3, [r7, #14]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01a      	beq.n	800548e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2bfe      	cmp	r3, #254	@ 0xfe
 800545c:	d812      	bhi.n	8005484 <cmp_lfn+0x88>
 800545e:	89bb      	ldrh	r3, [r7, #12]
 8005460:	4618      	mov	r0, r3
 8005462:	f001 ff3d 	bl	80072e0 <ff_wtoupper>
 8005466:	4603      	mov	r3, r0
 8005468:	461c      	mov	r4, r3
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	617a      	str	r2, [r7, #20]
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	4413      	add	r3, r2
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f001 ff31 	bl	80072e0 <ff_wtoupper>
 800547e:	4603      	mov	r3, r0
 8005480:	429c      	cmp	r4, r3
 8005482:	d001      	beq.n	8005488 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005484:	2300      	movs	r3, #0
 8005486:	e022      	b.n	80054ce <cmp_lfn+0xd2>
			}
			wc = uc;
 8005488:	89bb      	ldrh	r3, [r7, #12]
 800548a:	81fb      	strh	r3, [r7, #14]
 800548c:	e006      	b.n	800549c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800548e:	89bb      	ldrh	r3, [r7, #12]
 8005490:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005494:	4293      	cmp	r3, r2
 8005496:	d001      	beq.n	800549c <cmp_lfn+0xa0>
 8005498:	2300      	movs	r3, #0
 800549a:	e018      	b.n	80054ce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	3301      	adds	r3, #1
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b0c      	cmp	r3, #12
 80054a6:	d9c8      	bls.n	800543a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00b      	beq.n	80054cc <cmp_lfn+0xd0>
 80054b4:	89fb      	ldrh	r3, [r7, #14]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d008      	beq.n	80054cc <cmp_lfn+0xd0>
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	4413      	add	r3, r2
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <cmp_lfn+0xd0>
 80054c8:	2300      	movs	r3, #0
 80054ca:	e000      	b.n	80054ce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80054cc:	2301      	movs	r3, #1
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd90      	pop	{r4, r7, pc}
 80054d6:	bf00      	nop
 80054d8:	0800bdf4 	.word	0x0800bdf4

080054dc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	4611      	mov	r1, r2
 80054e8:	461a      	mov	r2, r3
 80054ea:	460b      	mov	r3, r1
 80054ec:	71fb      	strb	r3, [r7, #7]
 80054ee:	4613      	mov	r3, r2
 80054f0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	330d      	adds	r3, #13
 80054f6:	79ba      	ldrb	r2, [r7, #6]
 80054f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	330b      	adds	r3, #11
 80054fe:	220f      	movs	r2, #15
 8005500:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	330c      	adds	r3, #12
 8005506:	2200      	movs	r2, #0
 8005508:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	331a      	adds	r3, #26
 800550e:	2100      	movs	r1, #0
 8005510:	4618      	mov	r0, r3
 8005512:	f7fe ffb9 	bl	8004488 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	1e5a      	subs	r2, r3, #1
 800551a:	4613      	mov	r3, r2
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	4413      	add	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	82fb      	strh	r3, [r7, #22]
 800552a:	2300      	movs	r3, #0
 800552c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800552e:	8afb      	ldrh	r3, [r7, #22]
 8005530:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005534:	4293      	cmp	r3, r2
 8005536:	d007      	beq.n	8005548 <put_lfn+0x6c>
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	61fa      	str	r2, [r7, #28]
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005548:	4a17      	ldr	r2, [pc, #92]	@ (80055a8 <put_lfn+0xcc>)
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	4413      	add	r3, r2
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	461a      	mov	r2, r3
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	4413      	add	r3, r2
 8005556:	8afa      	ldrh	r2, [r7, #22]
 8005558:	4611      	mov	r1, r2
 800555a:	4618      	mov	r0, r3
 800555c:	f7fe ff94 	bl	8004488 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005560:	8afb      	ldrh	r3, [r7, #22]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d102      	bne.n	800556c <put_lfn+0x90>
 8005566:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800556a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	3301      	adds	r3, #1
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	2b0c      	cmp	r3, #12
 8005576:	d9da      	bls.n	800552e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005578:	8afb      	ldrh	r3, [r7, #22]
 800557a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800557e:	4293      	cmp	r3, r2
 8005580:	d006      	beq.n	8005590 <put_lfn+0xb4>
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d103      	bne.n	8005598 <put_lfn+0xbc>
 8005590:	79fb      	ldrb	r3, [r7, #7]
 8005592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005596:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	79fa      	ldrb	r2, [r7, #7]
 800559c:	701a      	strb	r2, [r3, #0]
}
 800559e:	bf00      	nop
 80055a0:	3720      	adds	r7, #32
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	0800bdf4 	.word	0x0800bdf4

080055ac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08c      	sub	sp, #48	@ 0x30
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80055ba:	220b      	movs	r2, #11
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7fe ffa9 	bl	8004516 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b05      	cmp	r3, #5
 80055c8:	d92b      	bls.n	8005622 <gen_numname+0x76>
		sr = seq;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80055ce:	e022      	b.n	8005616 <gen_numname+0x6a>
			wc = *lfn++;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	1c9a      	adds	r2, r3, #2
 80055d4:	607a      	str	r2, [r7, #4]
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80055da:	2300      	movs	r3, #0
 80055dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055de:	e017      	b.n	8005610 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	005a      	lsls	r2, r3, #1
 80055e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	4413      	add	r3, r2
 80055ec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80055ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80055f0:	085b      	lsrs	r3, r3, #1
 80055f2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d005      	beq.n	800560a <gen_numname+0x5e>
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005604:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005608:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800560a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560c:	3301      	adds	r3, #1
 800560e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005612:	2b0f      	cmp	r3, #15
 8005614:	d9e4      	bls.n	80055e0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1d8      	bne.n	80055d0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005622:	2307      	movs	r3, #7
 8005624:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	b2db      	uxtb	r3, r3
 8005630:	3330      	adds	r3, #48	@ 0x30
 8005632:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005636:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800563a:	2b39      	cmp	r3, #57	@ 0x39
 800563c:	d904      	bls.n	8005648 <gen_numname+0x9c>
 800563e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005642:	3307      	adds	r3, #7
 8005644:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564a:	1e5a      	subs	r2, r3, #1
 800564c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800564e:	3330      	adds	r3, #48	@ 0x30
 8005650:	443b      	add	r3, r7
 8005652:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005656:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	091b      	lsrs	r3, r3, #4
 800565e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1df      	bne.n	8005626 <gen_numname+0x7a>
	ns[i] = '~';
 8005666:	f107 0214 	add.w	r2, r7, #20
 800566a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566c:	4413      	add	r3, r2
 800566e:	227e      	movs	r2, #126	@ 0x7e
 8005670:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005672:	2300      	movs	r3, #0
 8005674:	627b      	str	r3, [r7, #36]	@ 0x24
 8005676:	e002      	b.n	800567e <gen_numname+0xd2>
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	3301      	adds	r3, #1
 800567c:	627b      	str	r3, [r7, #36]	@ 0x24
 800567e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005682:	429a      	cmp	r2, r3
 8005684:	d205      	bcs.n	8005692 <gen_numname+0xe6>
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	4413      	add	r3, r2
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b20      	cmp	r3, #32
 8005690:	d1f2      	bne.n	8005678 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005694:	2b07      	cmp	r3, #7
 8005696:	d807      	bhi.n	80056a8 <gen_numname+0xfc>
 8005698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800569e:	3330      	adds	r3, #48	@ 0x30
 80056a0:	443b      	add	r3, r7
 80056a2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80056a6:	e000      	b.n	80056aa <gen_numname+0xfe>
 80056a8:	2120      	movs	r1, #32
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	460a      	mov	r2, r1
 80056b6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80056b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ba:	2b07      	cmp	r3, #7
 80056bc:	d9e9      	bls.n	8005692 <gen_numname+0xe6>
}
 80056be:	bf00      	nop
 80056c0:	bf00      	nop
 80056c2:	3730      	adds	r7, #48	@ 0x30
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80056d4:	230b      	movs	r3, #11
 80056d6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	0852      	lsrs	r2, r2, #1
 80056de:	01db      	lsls	r3, r3, #7
 80056e0:	4313      	orrs	r3, r2
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	1c59      	adds	r1, r3, #1
 80056e8:	6079      	str	r1, [r7, #4]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	4413      	add	r3, r2
 80056ee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1ed      	bne.n	80056d8 <sum_sfn+0x10>
	return sum;
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b086      	sub	sp, #24
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005718:	2100      	movs	r1, #0
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff fca7 	bl	800506e <dir_sdi>
 8005720:	4603      	mov	r3, r0
 8005722:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005724:	7dfb      	ldrb	r3, [r7, #23]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <dir_find+0x24>
 800572a:	7dfb      	ldrb	r3, [r7, #23]
 800572c:	e0a9      	b.n	8005882 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800572e:	23ff      	movs	r3, #255	@ 0xff
 8005730:	753b      	strb	r3, [r7, #20]
 8005732:	7d3b      	ldrb	r3, [r7, #20]
 8005734:	757b      	strb	r3, [r7, #21]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f04f 32ff 	mov.w	r2, #4294967295
 800573c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	4619      	mov	r1, r3
 8005744:	6938      	ldr	r0, [r7, #16]
 8005746:	f7ff f915 	bl	8004974 <move_window>
 800574a:	4603      	mov	r3, r0
 800574c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800574e:	7dfb      	ldrb	r3, [r7, #23]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f040 8090 	bne.w	8005876 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800575e:	7dbb      	ldrb	r3, [r7, #22]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d102      	bne.n	800576a <dir_find+0x60>
 8005764:	2304      	movs	r3, #4
 8005766:	75fb      	strb	r3, [r7, #23]
 8005768:	e08a      	b.n	8005880 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	330b      	adds	r3, #11
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005776:	73fb      	strb	r3, [r7, #15]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	7bfa      	ldrb	r2, [r7, #15]
 800577c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800577e:	7dbb      	ldrb	r3, [r7, #22]
 8005780:	2be5      	cmp	r3, #229	@ 0xe5
 8005782:	d007      	beq.n	8005794 <dir_find+0x8a>
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <dir_find+0x98>
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	2b0f      	cmp	r3, #15
 8005792:	d006      	beq.n	80057a2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005794:	23ff      	movs	r3, #255	@ 0xff
 8005796:	757b      	strb	r3, [r7, #21]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f04f 32ff 	mov.w	r2, #4294967295
 800579e:	631a      	str	r2, [r3, #48]	@ 0x30
 80057a0:	e05e      	b.n	8005860 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	2b0f      	cmp	r3, #15
 80057a6:	d136      	bne.n	8005816 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80057ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d154      	bne.n	8005860 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80057b6:	7dbb      	ldrb	r3, [r7, #22]
 80057b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00d      	beq.n	80057dc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	7b5b      	ldrb	r3, [r3, #13]
 80057c6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80057c8:	7dbb      	ldrb	r3, [r7, #22]
 80057ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057ce:	75bb      	strb	r3, [r7, #22]
 80057d0:	7dbb      	ldrb	r3, [r7, #22]
 80057d2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	695a      	ldr	r2, [r3, #20]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80057dc:	7dba      	ldrb	r2, [r7, #22]
 80057de:	7d7b      	ldrb	r3, [r7, #21]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d115      	bne.n	8005810 <dir_find+0x106>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	330d      	adds	r3, #13
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	7d3a      	ldrb	r2, [r7, #20]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d10e      	bne.n	8005810 <dir_find+0x106>
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	4619      	mov	r1, r3
 80057fc:	4610      	mov	r0, r2
 80057fe:	f7ff fdfd 	bl	80053fc <cmp_lfn>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <dir_find+0x106>
 8005808:	7d7b      	ldrb	r3, [r7, #21]
 800580a:	3b01      	subs	r3, #1
 800580c:	b2db      	uxtb	r3, r3
 800580e:	e000      	b.n	8005812 <dir_find+0x108>
 8005810:	23ff      	movs	r3, #255	@ 0xff
 8005812:	757b      	strb	r3, [r7, #21]
 8005814:	e024      	b.n	8005860 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005816:	7d7b      	ldrb	r3, [r7, #21]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d109      	bne.n	8005830 <dir_find+0x126>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff ff51 	bl	80056c8 <sum_sfn>
 8005826:	4603      	mov	r3, r0
 8005828:	461a      	mov	r2, r3
 800582a:	7d3b      	ldrb	r3, [r7, #20]
 800582c:	4293      	cmp	r3, r2
 800582e:	d024      	beq.n	800587a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10a      	bne.n	8005854 <dir_find+0x14a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a18      	ldr	r0, [r3, #32]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3324      	adds	r3, #36	@ 0x24
 8005846:	220b      	movs	r2, #11
 8005848:	4619      	mov	r1, r3
 800584a:	f7fe fea0 	bl	800458e <mem_cmp>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d014      	beq.n	800587e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005854:	23ff      	movs	r3, #255	@ 0xff
 8005856:	757b      	strb	r3, [r7, #21]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f04f 32ff 	mov.w	r2, #4294967295
 800585e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005860:	2100      	movs	r1, #0
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff fc7e 	bl	8005164 <dir_next>
 8005868:	4603      	mov	r3, r0
 800586a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800586c:	7dfb      	ldrb	r3, [r7, #23]
 800586e:	2b00      	cmp	r3, #0
 8005870:	f43f af65 	beq.w	800573e <dir_find+0x34>
 8005874:	e004      	b.n	8005880 <dir_find+0x176>
		if (res != FR_OK) break;
 8005876:	bf00      	nop
 8005878:	e002      	b.n	8005880 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800587a:	bf00      	nop
 800587c:	e000      	b.n	8005880 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800587e:	bf00      	nop

	return res;
 8005880:	7dfb      	ldrb	r3, [r7, #23]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08c      	sub	sp, #48	@ 0x30
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80058a0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <dir_register+0x20>
 80058a8:	2306      	movs	r3, #6
 80058aa:	e0e0      	b.n	8005a6e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80058ac:	2300      	movs	r3, #0
 80058ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80058b0:	e002      	b.n	80058b8 <dir_register+0x2c>
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b4:	3301      	adds	r3, #1
 80058b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	4413      	add	r3, r2
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1f4      	bne.n	80058b2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80058ce:	f107 030c 	add.w	r3, r7, #12
 80058d2:	220c      	movs	r2, #12
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fe fe1e 	bl	8004516 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80058da:	7dfb      	ldrb	r3, [r7, #23]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d032      	beq.n	800594a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2240      	movs	r2, #64	@ 0x40
 80058e8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80058ec:	2301      	movs	r3, #1
 80058ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058f0:	e016      	b.n	8005920 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	68da      	ldr	r2, [r3, #12]
 80058fc:	f107 010c 	add.w	r1, r7, #12
 8005900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005902:	f7ff fe53 	bl	80055ac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff feff 	bl	800570a <dir_find>
 800590c:	4603      	mov	r3, r0
 800590e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005912:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800591a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591c:	3301      	adds	r3, #1
 800591e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005922:	2b63      	cmp	r3, #99	@ 0x63
 8005924:	d9e5      	bls.n	80058f2 <dir_register+0x66>
 8005926:	e000      	b.n	800592a <dir_register+0x9e>
			if (res != FR_OK) break;
 8005928:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800592a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592c:	2b64      	cmp	r3, #100	@ 0x64
 800592e:	d101      	bne.n	8005934 <dir_register+0xa8>
 8005930:	2307      	movs	r3, #7
 8005932:	e09c      	b.n	8005a6e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005934:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005938:	2b04      	cmp	r3, #4
 800593a:	d002      	beq.n	8005942 <dir_register+0xb6>
 800593c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005940:	e095      	b.n	8005a6e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005942:	7dfa      	ldrb	r2, [r7, #23]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800594a:	7dfb      	ldrb	r3, [r7, #23]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d007      	beq.n	8005964 <dir_register+0xd8>
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	330c      	adds	r3, #12
 8005958:	4a47      	ldr	r2, [pc, #284]	@ (8005a78 <dir_register+0x1ec>)
 800595a:	fba2 2303 	umull	r2, r3, r2, r3
 800595e:	089b      	lsrs	r3, r3, #2
 8005960:	3301      	adds	r3, #1
 8005962:	e000      	b.n	8005966 <dir_register+0xda>
 8005964:	2301      	movs	r3, #1
 8005966:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005968:	6a39      	ldr	r1, [r7, #32]
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff fcbf 	bl	80052ee <dir_alloc>
 8005970:	4603      	mov	r3, r0
 8005972:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005976:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800597a:	2b00      	cmp	r3, #0
 800597c:	d148      	bne.n	8005a10 <dir_register+0x184>
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	3b01      	subs	r3, #1
 8005982:	623b      	str	r3, [r7, #32]
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d042      	beq.n	8005a10 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695a      	ldr	r2, [r3, #20]
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	015b      	lsls	r3, r3, #5
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff fb69 	bl	800506e <dir_sdi>
 800599c:	4603      	mov	r3, r0
 800599e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80059a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d132      	bne.n	8005a10 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3324      	adds	r3, #36	@ 0x24
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff fe8a 	bl	80056c8 <sum_sfn>
 80059b4:	4603      	mov	r3, r0
 80059b6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	4619      	mov	r1, r3
 80059be:	69f8      	ldr	r0, [r7, #28]
 80059c0:	f7fe ffd8 	bl	8004974 <move_window>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80059ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d11d      	bne.n	8005a0e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	68d8      	ldr	r0, [r3, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a19      	ldr	r1, [r3, #32]
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	7efb      	ldrb	r3, [r7, #27]
 80059e0:	f7ff fd7c 	bl	80054dc <put_lfn>
				fs->wflag = 1;
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	2201      	movs	r2, #1
 80059e8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80059ea:	2100      	movs	r1, #0
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff fbb9 	bl	8005164 <dir_next>
 80059f2:	4603      	mov	r3, r0
 80059f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80059f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d107      	bne.n	8005a10 <dir_register+0x184>
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	623b      	str	r3, [r7, #32]
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1d5      	bne.n	80059b8 <dir_register+0x12c>
 8005a0c:	e000      	b.n	8005a10 <dir_register+0x184>
				if (res != FR_OK) break;
 8005a0e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005a10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d128      	bne.n	8005a6a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	69f8      	ldr	r0, [r7, #28]
 8005a20:	f7fe ffa8 	bl	8004974 <move_window>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d11b      	bne.n	8005a6a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	2220      	movs	r2, #32
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe fd8c 	bl	8004558 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a18      	ldr	r0, [r3, #32]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3324      	adds	r3, #36	@ 0x24
 8005a48:	220b      	movs	r2, #11
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	f7fe fd63 	bl	8004516 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	330c      	adds	r3, #12
 8005a5c:	f002 0218 	and.w	r2, r2, #24
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	2201      	movs	r2, #1
 8005a68:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3730      	adds	r7, #48	@ 0x30
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	4ec4ec4f 	.word	0x4ec4ec4f

08005a7c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08a      	sub	sp, #40	@ 0x28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	2300      	movs	r3, #0
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	61ba      	str	r2, [r7, #24]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005aaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005aac:	2b1f      	cmp	r3, #31
 8005aae:	d940      	bls.n	8005b32 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005ab0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ab2:	2b2f      	cmp	r3, #47	@ 0x2f
 8005ab4:	d006      	beq.n	8005ac4 <create_name+0x48>
 8005ab6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ab8:	2b5c      	cmp	r3, #92	@ 0x5c
 8005aba:	d110      	bne.n	8005ade <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005abc:	e002      	b.n	8005ac4 <create_name+0x48>
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	4413      	add	r3, r2
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b2f      	cmp	r3, #47	@ 0x2f
 8005ace:	d0f6      	beq.n	8005abe <create_name+0x42>
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b5c      	cmp	r3, #92	@ 0x5c
 8005ada:	d0f0      	beq.n	8005abe <create_name+0x42>
			break;
 8005adc:	e02a      	b.n	8005b34 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2bfe      	cmp	r3, #254	@ 0xfe
 8005ae2:	d901      	bls.n	8005ae8 <create_name+0x6c>
 8005ae4:	2306      	movs	r3, #6
 8005ae6:	e17d      	b.n	8005de4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005ae8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005aee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005af0:	2101      	movs	r1, #1
 8005af2:	4618      	mov	r0, r3
 8005af4:	f001 fbb8 	bl	8007268 <ff_convert>
 8005af8:	4603      	mov	r3, r0
 8005afa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005afc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <create_name+0x8a>
 8005b02:	2306      	movs	r3, #6
 8005b04:	e16e      	b.n	8005de4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005b06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b08:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b0a:	d809      	bhi.n	8005b20 <create_name+0xa4>
 8005b0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b0e:	4619      	mov	r1, r3
 8005b10:	488d      	ldr	r0, [pc, #564]	@ (8005d48 <create_name+0x2cc>)
 8005b12:	f7fe fd63 	bl	80045dc <chk_chr>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <create_name+0xa4>
 8005b1c:	2306      	movs	r3, #6
 8005b1e:	e161      	b.n	8005de4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	617a      	str	r2, [r7, #20]
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b2e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005b30:	e7b4      	b.n	8005a9c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005b32:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	441a      	add	r2, r3
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005b3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b40:	2b1f      	cmp	r3, #31
 8005b42:	d801      	bhi.n	8005b48 <create_name+0xcc>
 8005b44:	2304      	movs	r3, #4
 8005b46:	e000      	b.n	8005b4a <create_name+0xce>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005b4e:	e011      	b.n	8005b74 <create_name+0xf8>
		w = lfn[di - 1];
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005b56:	3b01      	subs	r3, #1
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8005b62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d002      	beq.n	8005b6e <create_name+0xf2>
 8005b68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b6c:	d106      	bne.n	8005b7c <create_name+0x100>
		di--;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1ea      	bne.n	8005b50 <create_name+0xd4>
 8005b7a:	e000      	b.n	8005b7e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005b7c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4413      	add	r3, r2
 8005b86:	2200      	movs	r2, #0
 8005b88:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <create_name+0x118>
 8005b90:	2306      	movs	r3, #6
 8005b92:	e127      	b.n	8005de4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3324      	adds	r3, #36	@ 0x24
 8005b98:	220b      	movs	r2, #11
 8005b9a:	2120      	movs	r1, #32
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fe fcdb 	bl	8004558 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	e002      	b.n	8005bae <create_name+0x132>
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	3301      	adds	r3, #1
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d0f5      	beq.n	8005ba8 <create_name+0x12c>
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bc8:	d0ee      	beq.n	8005ba8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d009      	beq.n	8005be4 <create_name+0x168>
 8005bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bd4:	f043 0303 	orr.w	r3, r3, #3
 8005bd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005bdc:	e002      	b.n	8005be4 <create_name+0x168>
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d009      	beq.n	8005bfe <create_name+0x182>
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bfc:	d1ef      	bne.n	8005bde <create_name+0x162>

	i = b = 0; ni = 8;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005c04:	2300      	movs	r3, #0
 8005c06:	623b      	str	r3, [r7, #32]
 8005c08:	2308      	movs	r3, #8
 8005c0a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	61ba      	str	r2, [r7, #24]
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005c1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 8090 	beq.w	8005d44 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005c24:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	d006      	beq.n	8005c38 <create_name+0x1bc>
 8005c2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c2e:	d10a      	bne.n	8005c46 <create_name+0x1ca>
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d006      	beq.n	8005c46 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005c38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c3c:	f043 0303 	orr.w	r3, r3, #3
 8005c40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005c44:	e07d      	b.n	8005d42 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005c46:	6a3a      	ldr	r2, [r7, #32]
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d203      	bcs.n	8005c56 <create_name+0x1da>
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d123      	bne.n	8005c9e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	2b0b      	cmp	r3, #11
 8005c5a:	d106      	bne.n	8005c6a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c60:	f043 0303 	orr.w	r3, r3, #3
 8005c64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005c68:	e075      	b.n	8005d56 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d005      	beq.n	8005c7e <create_name+0x202>
 8005c72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c76:	f043 0303 	orr.w	r3, r3, #3
 8005c7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d866      	bhi.n	8005d54 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	61bb      	str	r3, [r7, #24]
 8005c8a:	2308      	movs	r3, #8
 8005c8c:	623b      	str	r3, [r7, #32]
 8005c8e:	230b      	movs	r3, #11
 8005c90:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005c92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005c9c:	e051      	b.n	8005d42 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005c9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ca0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ca2:	d914      	bls.n	8005cce <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005ca4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 fadd 	bl	8007268 <ff_convert>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005cb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d004      	beq.n	8005cc2 <create_name+0x246>
 8005cb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cba:	3b80      	subs	r3, #128	@ 0x80
 8005cbc:	4a23      	ldr	r2, [pc, #140]	@ (8005d4c <create_name+0x2d0>)
 8005cbe:	5cd3      	ldrb	r3, [r2, r3]
 8005cc0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cc6:	f043 0302 	orr.w	r3, r3, #2
 8005cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005cce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d007      	beq.n	8005ce4 <create_name+0x268>
 8005cd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	481d      	ldr	r0, [pc, #116]	@ (8005d50 <create_name+0x2d4>)
 8005cda:	f7fe fc7f 	bl	80045dc <chk_chr>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d008      	beq.n	8005cf6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005ce4:	235f      	movs	r3, #95	@ 0x5f
 8005ce6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cec:	f043 0303 	orr.w	r3, r3, #3
 8005cf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005cf4:	e01b      	b.n	8005d2e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005cf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cf8:	2b40      	cmp	r3, #64	@ 0x40
 8005cfa:	d909      	bls.n	8005d10 <create_name+0x294>
 8005cfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cfe:	2b5a      	cmp	r3, #90	@ 0x5a
 8005d00:	d806      	bhi.n	8005d10 <create_name+0x294>
					b |= 2;
 8005d02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d06:	f043 0302 	orr.w	r3, r3, #2
 8005d0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005d0e:	e00e      	b.n	8005d2e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005d10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d12:	2b60      	cmp	r3, #96	@ 0x60
 8005d14:	d90b      	bls.n	8005d2e <create_name+0x2b2>
 8005d16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d18:	2b7a      	cmp	r3, #122	@ 0x7a
 8005d1a:	d808      	bhi.n	8005d2e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005d1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005d28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d2a:	3b20      	subs	r3, #32
 8005d2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	623a      	str	r2, [r7, #32]
 8005d34:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005d36:	b2d1      	uxtb	r1, r2
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	460a      	mov	r2, r1
 8005d3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005d42:	e763      	b.n	8005c0c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005d44:	bf00      	nop
 8005d46:	e006      	b.n	8005d56 <create_name+0x2da>
 8005d48:	0800bd14 	.word	0x0800bd14
 8005d4c:	0800bd74 	.word	0x0800bd74
 8005d50:	0800bd20 	.word	0x0800bd20
			if (si > di) break;			/* No extension */
 8005d54:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d5c:	2be5      	cmp	r3, #229	@ 0xe5
 8005d5e:	d103      	bne.n	8005d68 <create_name+0x2ec>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2205      	movs	r2, #5
 8005d64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d104      	bne.n	8005d78 <create_name+0x2fc>
 8005d6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005d78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d7c:	f003 030c 	and.w	r3, r3, #12
 8005d80:	2b0c      	cmp	r3, #12
 8005d82:	d005      	beq.n	8005d90 <create_name+0x314>
 8005d84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d88:	f003 0303 	and.w	r3, r3, #3
 8005d8c:	2b03      	cmp	r3, #3
 8005d8e:	d105      	bne.n	8005d9c <create_name+0x320>
 8005d90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d94:	f043 0302 	orr.w	r3, r3, #2
 8005d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d117      	bne.n	8005dd8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005da8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d105      	bne.n	8005dc0 <create_name+0x344>
 8005db4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005db8:	f043 0310 	orr.w	r3, r3, #16
 8005dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005dc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005dc4:	f003 030c 	and.w	r3, r3, #12
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d105      	bne.n	8005dd8 <create_name+0x35c>
 8005dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dd0:	f043 0308 	orr.w	r3, r3, #8
 8005dd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005dde:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8005de2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3728      	adds	r7, #40	@ 0x28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005e00:	e002      	b.n	8005e08 <follow_path+0x1c>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	3301      	adds	r3, #1
 8005e06:	603b      	str	r3, [r7, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8005e0e:	d0f8      	beq.n	8005e02 <follow_path+0x16>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b5c      	cmp	r3, #92	@ 0x5c
 8005e16:	d0f4      	beq.n	8005e02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b1f      	cmp	r3, #31
 8005e24:	d80a      	bhi.n	8005e3c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2280      	movs	r2, #128	@ 0x80
 8005e2a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005e2e:	2100      	movs	r1, #0
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff f91c 	bl	800506e <dir_sdi>
 8005e36:	4603      	mov	r3, r0
 8005e38:	75fb      	strb	r3, [r7, #23]
 8005e3a:	e043      	b.n	8005ec4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005e3c:	463b      	mov	r3, r7
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff fe1b 	bl	8005a7c <create_name>
 8005e46:	4603      	mov	r3, r0
 8005e48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d134      	bne.n	8005eba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff fc5a 	bl	800570a <dir_find>
 8005e56:	4603      	mov	r3, r0
 8005e58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005e60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d127      	bne.n	8005ebe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005e6e:	7afb      	ldrb	r3, [r7, #11]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d122      	bne.n	8005ebe <follow_path+0xd2>
 8005e78:	2305      	movs	r3, #5
 8005e7a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005e7c:	e01f      	b.n	8005ebe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005e7e:	7afb      	ldrb	r3, [r7, #11]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d11c      	bne.n	8005ec2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	799b      	ldrb	r3, [r3, #6]
 8005e8c:	f003 0310 	and.w	r3, r3, #16
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d102      	bne.n	8005e9a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005e94:	2305      	movs	r3, #5
 8005e96:	75fb      	strb	r3, [r7, #23]
 8005e98:	e014      	b.n	8005ec4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea8:	4413      	add	r3, r2
 8005eaa:	4619      	mov	r1, r3
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f7ff fa65 	bl	800537c <ld_clust>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005eb8:	e7c0      	b.n	8005e3c <follow_path+0x50>
			if (res != FR_OK) break;
 8005eba:	bf00      	nop
 8005ebc:	e002      	b.n	8005ec4 <follow_path+0xd8>
				break;
 8005ebe:	bf00      	nop
 8005ec0:	e000      	b.n	8005ec4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ec2:	bf00      	nop
			}
		}
	}

	return res;
 8005ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b087      	sub	sp, #28
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eda:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d031      	beq.n	8005f48 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	e002      	b.n	8005ef2 <get_ldnumber+0x24>
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b1f      	cmp	r3, #31
 8005ef8:	d903      	bls.n	8005f02 <get_ldnumber+0x34>
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b3a      	cmp	r3, #58	@ 0x3a
 8005f00:	d1f4      	bne.n	8005eec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b3a      	cmp	r3, #58	@ 0x3a
 8005f08:	d11c      	bne.n	8005f44 <get_ldnumber+0x76>
			tp = *path;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	60fa      	str	r2, [r7, #12]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	3b30      	subs	r3, #48	@ 0x30
 8005f1a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b09      	cmp	r3, #9
 8005f20:	d80e      	bhi.n	8005f40 <get_ldnumber+0x72>
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d10a      	bne.n	8005f40 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d107      	bne.n	8005f40 <get_ldnumber+0x72>
					vol = (int)i;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	3301      	adds	r3, #1
 8005f38:	617b      	str	r3, [r7, #20]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	e002      	b.n	8005f4a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005f44:	2300      	movs	r3, #0
 8005f46:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005f48:	693b      	ldr	r3, [r7, #16]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
	...

08005f58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	70da      	strb	r2, [r3, #3]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fe fcfe 	bl	8004974 <move_window>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <check_fs+0x2a>
 8005f7e:	2304      	movs	r3, #4
 8005f80:	e038      	b.n	8005ff4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3334      	adds	r3, #52	@ 0x34
 8005f86:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fe fa40 	bl	8004410 <ld_word>
 8005f90:	4603      	mov	r3, r0
 8005f92:	461a      	mov	r2, r3
 8005f94:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d001      	beq.n	8005fa0 <check_fs+0x48>
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e029      	b.n	8005ff4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005fa6:	2be9      	cmp	r3, #233	@ 0xe9
 8005fa8:	d009      	beq.n	8005fbe <check_fs+0x66>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005fb0:	2beb      	cmp	r3, #235	@ 0xeb
 8005fb2:	d11e      	bne.n	8005ff2 <check_fs+0x9a>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005fba:	2b90      	cmp	r3, #144	@ 0x90
 8005fbc:	d119      	bne.n	8005ff2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3334      	adds	r3, #52	@ 0x34
 8005fc2:	3336      	adds	r3, #54	@ 0x36
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fe fa3c 	bl	8004442 <ld_dword>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8005ffc <check_fs+0xa4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d101      	bne.n	8005fda <check_fs+0x82>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e00c      	b.n	8005ff4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3334      	adds	r3, #52	@ 0x34
 8005fde:	3352      	adds	r3, #82	@ 0x52
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fe fa2e 	bl	8004442 <ld_dword>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	4a05      	ldr	r2, [pc, #20]	@ (8006000 <check_fs+0xa8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d101      	bne.n	8005ff2 <check_fs+0x9a>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e000      	b.n	8005ff4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005ff2:	2302      	movs	r3, #2
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	00544146 	.word	0x00544146
 8006000:	33544146 	.word	0x33544146

08006004 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b096      	sub	sp, #88	@ 0x58
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	4613      	mov	r3, r2
 8006010:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7ff ff58 	bl	8005ece <get_ldnumber>
 800601e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006022:	2b00      	cmp	r3, #0
 8006024:	da01      	bge.n	800602a <find_volume+0x26>
 8006026:	230b      	movs	r3, #11
 8006028:	e230      	b.n	800648c <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800602a:	4aa1      	ldr	r2, [pc, #644]	@ (80062b0 <find_volume+0x2ac>)
 800602c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800602e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006032:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <find_volume+0x3a>
 800603a:	230c      	movs	r3, #12
 800603c:	e226      	b.n	800648c <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006042:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	f023 0301 	bic.w	r3, r3, #1
 800604a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800604c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01a      	beq.n	800608a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006056:	785b      	ldrb	r3, [r3, #1]
 8006058:	4618      	mov	r0, r3
 800605a:	f7fe f939 	bl	80042d0 <disk_status>
 800605e:	4603      	mov	r3, r0
 8006060:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006064:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10c      	bne.n	800608a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <find_volume+0x82>
 8006076:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006082:	230a      	movs	r3, #10
 8006084:	e202      	b.n	800648c <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 8006086:	2300      	movs	r3, #0
 8006088:	e200      	b.n	800648c <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800608a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608c:	2200      	movs	r2, #0
 800608e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006092:	b2da      	uxtb	r2, r3
 8006094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006096:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609a:	785b      	ldrb	r3, [r3, #1]
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe f931 	bl	8004304 <disk_initialize>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80060a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80060b4:	2303      	movs	r3, #3
 80060b6:	e1e9      	b.n	800648c <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <find_volume+0xca>
 80060be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80060ca:	230a      	movs	r3, #10
 80060cc:	e1de      	b.n	800648c <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80060ce:	2300      	movs	r3, #0
 80060d0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80060d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80060d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80060d6:	f7ff ff3f 	bl	8005f58 <check_fs>
 80060da:	4603      	mov	r3, r0
 80060dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80060e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d149      	bne.n	800617c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80060e8:	2300      	movs	r3, #0
 80060ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80060ec:	e01e      	b.n	800612c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80060ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80060f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80060fc:	4413      	add	r3, r2
 80060fe:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006102:	3304      	adds	r3, #4
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d006      	beq.n	8006118 <find_volume+0x114>
 800610a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610c:	3308      	adds	r3, #8
 800610e:	4618      	mov	r0, r3
 8006110:	f7fe f997 	bl	8004442 <ld_dword>
 8006114:	4602      	mov	r2, r0
 8006116:	e000      	b.n	800611a <find_volume+0x116>
 8006118:	2200      	movs	r2, #0
 800611a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	3358      	adds	r3, #88	@ 0x58
 8006120:	443b      	add	r3, r7
 8006122:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006128:	3301      	adds	r3, #1
 800612a:	643b      	str	r3, [r7, #64]	@ 0x40
 800612c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800612e:	2b03      	cmp	r3, #3
 8006130:	d9dd      	bls.n	80060ee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006132:	2300      	movs	r3, #0
 8006134:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <find_volume+0x13e>
 800613c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800613e:	3b01      	subs	r3, #1
 8006140:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	3358      	adds	r3, #88	@ 0x58
 8006148:	443b      	add	r3, r7
 800614a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800614e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006150:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006152:	2b00      	cmp	r3, #0
 8006154:	d005      	beq.n	8006162 <find_volume+0x15e>
 8006156:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006158:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800615a:	f7ff fefd 	bl	8005f58 <check_fs>
 800615e:	4603      	mov	r3, r0
 8006160:	e000      	b.n	8006164 <find_volume+0x160>
 8006162:	2303      	movs	r3, #3
 8006164:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006168:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800616c:	2b01      	cmp	r3, #1
 800616e:	d905      	bls.n	800617c <find_volume+0x178>
 8006170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006172:	3301      	adds	r3, #1
 8006174:	643b      	str	r3, [r7, #64]	@ 0x40
 8006176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006178:	2b03      	cmp	r3, #3
 800617a:	d9e2      	bls.n	8006142 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800617c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006180:	2b04      	cmp	r3, #4
 8006182:	d101      	bne.n	8006188 <find_volume+0x184>
 8006184:	2301      	movs	r3, #1
 8006186:	e181      	b.n	800648c <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006188:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800618c:	2b01      	cmp	r3, #1
 800618e:	d901      	bls.n	8006194 <find_volume+0x190>
 8006190:	230d      	movs	r3, #13
 8006192:	e17b      	b.n	800648c <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006196:	3334      	adds	r3, #52	@ 0x34
 8006198:	330b      	adds	r3, #11
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe f938 	bl	8004410 <ld_word>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061a6:	d001      	beq.n	80061ac <find_volume+0x1a8>
 80061a8:	230d      	movs	r3, #13
 80061aa:	e16f      	b.n	800648c <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80061ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ae:	3334      	adds	r3, #52	@ 0x34
 80061b0:	3316      	adds	r3, #22
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fe f92c 	bl	8004410 <ld_word>
 80061b8:	4603      	mov	r3, r0
 80061ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80061bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <find_volume+0x1cc>
 80061c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c4:	3334      	adds	r3, #52	@ 0x34
 80061c6:	3324      	adds	r3, #36	@ 0x24
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fe f93a 	bl	8004442 <ld_dword>
 80061ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80061d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061d4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80061d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d8:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80061dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80061e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e2:	789b      	ldrb	r3, [r3, #2]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d005      	beq.n	80061f4 <find_volume+0x1f0>
 80061e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ea:	789b      	ldrb	r3, [r3, #2]
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d001      	beq.n	80061f4 <find_volume+0x1f0>
 80061f0:	230d      	movs	r3, #13
 80061f2:	e14b      	b.n	800648c <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80061f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f6:	789b      	ldrb	r3, [r3, #2]
 80061f8:	461a      	mov	r2, r3
 80061fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061fc:	fb02 f303 	mul.w	r3, r2, r3
 8006200:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006208:	461a      	mov	r2, r3
 800620a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800620e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006210:	895b      	ldrh	r3, [r3, #10]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d008      	beq.n	8006228 <find_volume+0x224>
 8006216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006218:	895b      	ldrh	r3, [r3, #10]
 800621a:	461a      	mov	r2, r3
 800621c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621e:	895b      	ldrh	r3, [r3, #10]
 8006220:	3b01      	subs	r3, #1
 8006222:	4013      	ands	r3, r2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <find_volume+0x228>
 8006228:	230d      	movs	r3, #13
 800622a:	e12f      	b.n	800648c <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800622c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622e:	3334      	adds	r3, #52	@ 0x34
 8006230:	3311      	adds	r3, #17
 8006232:	4618      	mov	r0, r3
 8006234:	f7fe f8ec 	bl	8004410 <ld_word>
 8006238:	4603      	mov	r3, r0
 800623a:	461a      	mov	r2, r3
 800623c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006242:	891b      	ldrh	r3, [r3, #8]
 8006244:	f003 030f 	and.w	r3, r3, #15
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <find_volume+0x24e>
 800624e:	230d      	movs	r3, #13
 8006250:	e11c      	b.n	800648c <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006254:	3334      	adds	r3, #52	@ 0x34
 8006256:	3313      	adds	r3, #19
 8006258:	4618      	mov	r0, r3
 800625a:	f7fe f8d9 	bl	8004410 <ld_word>
 800625e:	4603      	mov	r3, r0
 8006260:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006264:	2b00      	cmp	r3, #0
 8006266:	d106      	bne.n	8006276 <find_volume+0x272>
 8006268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626a:	3334      	adds	r3, #52	@ 0x34
 800626c:	3320      	adds	r3, #32
 800626e:	4618      	mov	r0, r3
 8006270:	f7fe f8e7 	bl	8004442 <ld_dword>
 8006274:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006278:	3334      	adds	r3, #52	@ 0x34
 800627a:	330e      	adds	r3, #14
 800627c:	4618      	mov	r0, r3
 800627e:	f7fe f8c7 	bl	8004410 <ld_word>
 8006282:	4603      	mov	r3, r0
 8006284:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006286:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <find_volume+0x28c>
 800628c:	230d      	movs	r3, #13
 800628e:	e0fd      	b.n	800648c <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006290:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006294:	4413      	add	r3, r2
 8006296:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006298:	8912      	ldrh	r2, [r2, #8]
 800629a:	0912      	lsrs	r2, r2, #4
 800629c:	b292      	uxth	r2, r2
 800629e:	4413      	add	r3, r2
 80062a0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80062a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d204      	bcs.n	80062b4 <find_volume+0x2b0>
 80062aa:	230d      	movs	r3, #13
 80062ac:	e0ee      	b.n	800648c <find_volume+0x488>
 80062ae:	bf00      	nop
 80062b0:	200003c4 	.word	0x200003c4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80062b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062bc:	8952      	ldrh	r2, [r2, #10]
 80062be:	fbb3 f3f2 	udiv	r3, r3, r2
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80062c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <find_volume+0x2ca>
 80062ca:	230d      	movs	r3, #13
 80062cc:	e0de      	b.n	800648c <find_volume+0x488>
		fmt = FS_FAT32;
 80062ce:	2303      	movs	r3, #3
 80062d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80062d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80062da:	4293      	cmp	r3, r2
 80062dc:	d802      	bhi.n	80062e4 <find_volume+0x2e0>
 80062de:	2302      	movs	r3, #2
 80062e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80062e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d802      	bhi.n	80062f4 <find_volume+0x2f0>
 80062ee:	2301      	movs	r3, #1
 80062f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80062f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f6:	1c9a      	adds	r2, r3, #2
 80062f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fa:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80062fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006300:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006302:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006306:	441a      	add	r2, r3
 8006308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800630c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800630e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006310:	441a      	add	r2, r3
 8006312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006314:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8006316:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800631a:	2b03      	cmp	r3, #3
 800631c:	d11e      	bne.n	800635c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800631e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006320:	3334      	adds	r3, #52	@ 0x34
 8006322:	332a      	adds	r3, #42	@ 0x2a
 8006324:	4618      	mov	r0, r3
 8006326:	f7fe f873 	bl	8004410 <ld_word>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <find_volume+0x330>
 8006330:	230d      	movs	r3, #13
 8006332:	e0ab      	b.n	800648c <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006336:	891b      	ldrh	r3, [r3, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <find_volume+0x33c>
 800633c:	230d      	movs	r3, #13
 800633e:	e0a5      	b.n	800648c <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006342:	3334      	adds	r3, #52	@ 0x34
 8006344:	332c      	adds	r3, #44	@ 0x2c
 8006346:	4618      	mov	r0, r3
 8006348:	f7fe f87b 	bl	8004442 <ld_dword>
 800634c:	4602      	mov	r2, r0
 800634e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006350:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	647b      	str	r3, [r7, #68]	@ 0x44
 800635a:	e01f      	b.n	800639c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800635c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635e:	891b      	ldrh	r3, [r3, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <find_volume+0x364>
 8006364:	230d      	movs	r3, #13
 8006366:	e091      	b.n	800648c <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800636c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800636e:	441a      	add	r2, r3
 8006370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006372:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006374:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006378:	2b02      	cmp	r3, #2
 800637a:	d103      	bne.n	8006384 <find_volume+0x380>
 800637c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	e00a      	b.n	800639a <find_volume+0x396>
 8006384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006386:	699a      	ldr	r2, [r3, #24]
 8006388:	4613      	mov	r3, r2
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	4413      	add	r3, r2
 800638e:	085a      	lsrs	r2, r3, #1
 8006390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800639a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800639c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639e:	69da      	ldr	r2, [r3, #28]
 80063a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063a2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80063a6:	0a5b      	lsrs	r3, r3, #9
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d201      	bcs.n	80063b0 <find_volume+0x3ac>
 80063ac:	230d      	movs	r3, #13
 80063ae:	e06d      	b.n	800648c <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80063b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b2:	f04f 32ff 	mov.w	r2, #4294967295
 80063b6:	615a      	str	r2, [r3, #20]
 80063b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ba:	695a      	ldr	r2, [r3, #20]
 80063bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063be:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80063c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c2:	2280      	movs	r2, #128	@ 0x80
 80063c4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80063c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d149      	bne.n	8006462 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80063ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d0:	3334      	adds	r3, #52	@ 0x34
 80063d2:	3330      	adds	r3, #48	@ 0x30
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe f81b 	bl	8004410 <ld_word>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d140      	bne.n	8006462 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80063e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063e2:	3301      	adds	r3, #1
 80063e4:	4619      	mov	r1, r3
 80063e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80063e8:	f7fe fac4 	bl	8004974 <move_window>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d137      	bne.n	8006462 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80063f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f4:	2200      	movs	r2, #0
 80063f6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80063f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fa:	3334      	adds	r3, #52	@ 0x34
 80063fc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe f805 	bl	8004410 <ld_word>
 8006406:	4603      	mov	r3, r0
 8006408:	461a      	mov	r2, r3
 800640a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800640e:	429a      	cmp	r2, r3
 8006410:	d127      	bne.n	8006462 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006414:	3334      	adds	r3, #52	@ 0x34
 8006416:	4618      	mov	r0, r3
 8006418:	f7fe f813 	bl	8004442 <ld_dword>
 800641c:	4603      	mov	r3, r0
 800641e:	4a1d      	ldr	r2, [pc, #116]	@ (8006494 <find_volume+0x490>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d11e      	bne.n	8006462 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006426:	3334      	adds	r3, #52	@ 0x34
 8006428:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800642c:	4618      	mov	r0, r3
 800642e:	f7fe f808 	bl	8004442 <ld_dword>
 8006432:	4603      	mov	r3, r0
 8006434:	4a18      	ldr	r2, [pc, #96]	@ (8006498 <find_volume+0x494>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d113      	bne.n	8006462 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800643a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800643c:	3334      	adds	r3, #52	@ 0x34
 800643e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006442:	4618      	mov	r0, r3
 8006444:	f7fd fffd 	bl	8004442 <ld_dword>
 8006448:	4602      	mov	r2, r0
 800644a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800644e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006450:	3334      	adds	r3, #52	@ 0x34
 8006452:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006456:	4618      	mov	r0, r3
 8006458:	f7fd fff3 	bl	8004442 <ld_dword>
 800645c:	4602      	mov	r2, r0
 800645e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006460:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006464:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006468:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800646a:	4b0c      	ldr	r3, [pc, #48]	@ (800649c <find_volume+0x498>)
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	3301      	adds	r3, #1
 8006470:	b29a      	uxth	r2, r3
 8006472:	4b0a      	ldr	r3, [pc, #40]	@ (800649c <find_volume+0x498>)
 8006474:	801a      	strh	r2, [r3, #0]
 8006476:	4b09      	ldr	r3, [pc, #36]	@ (800649c <find_volume+0x498>)
 8006478:	881a      	ldrh	r2, [r3, #0]
 800647a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800647e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006480:	4a07      	ldr	r2, [pc, #28]	@ (80064a0 <find_volume+0x49c>)
 8006482:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006484:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006486:	f7fe fa0d 	bl	80048a4 <clear_lock>
#endif
	return FR_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3758      	adds	r7, #88	@ 0x58
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	41615252 	.word	0x41615252
 8006498:	61417272 	.word	0x61417272
 800649c:	200003c8 	.word	0x200003c8
 80064a0:	200003ec 	.word	0x200003ec

080064a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80064ae:	2309      	movs	r3, #9
 80064b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01c      	beq.n	80064f2 <validate+0x4e>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d018      	beq.n	80064f2 <validate+0x4e>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d013      	beq.n	80064f2 <validate+0x4e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	889a      	ldrh	r2, [r3, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	88db      	ldrh	r3, [r3, #6]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d10c      	bne.n	80064f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	785b      	ldrb	r3, [r3, #1]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fd fef6 	bl	80042d0 <disk_status>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <validate+0x4e>
			res = FR_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d102      	bne.n	80064fe <validate+0x5a>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	e000      	b.n	8006500 <validate+0x5c>
 80064fe:	2300      	movs	r3, #0
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	6013      	str	r3, [r2, #0]
	return res;
 8006504:	7bfb      	ldrb	r3, [r7, #15]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006522:	f107 0310 	add.w	r3, r7, #16
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff fcd1 	bl	8005ece <get_ldnumber>
 800652c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	2b00      	cmp	r3, #0
 8006532:	da01      	bge.n	8006538 <f_mount+0x28>
 8006534:	230b      	movs	r3, #11
 8006536:	e02b      	b.n	8006590 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006538:	4a17      	ldr	r2, [pc, #92]	@ (8006598 <f_mount+0x88>)
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006540:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006548:	69b8      	ldr	r0, [r7, #24]
 800654a:	f7fe f9ab 	bl	80048a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2200      	movs	r2, #0
 8006552:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	490d      	ldr	r1, [pc, #52]	@ (8006598 <f_mount+0x88>)
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <f_mount+0x66>
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d001      	beq.n	800657a <f_mount+0x6a>
 8006576:	2300      	movs	r3, #0
 8006578:	e00a      	b.n	8006590 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800657a:	f107 010c 	add.w	r1, r7, #12
 800657e:	f107 0308 	add.w	r3, r7, #8
 8006582:	2200      	movs	r2, #0
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff fd3d 	bl	8006004 <find_volume>
 800658a:	4603      	mov	r3, r0
 800658c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800658e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3720      	adds	r7, #32
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	200003c4 	.word	0x200003c4

0800659c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b09a      	sub	sp, #104	@ 0x68
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	4613      	mov	r3, r2
 80065a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <f_open+0x18>
 80065b0:	2309      	movs	r3, #9
 80065b2:	e1a9      	b.n	8006908 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80065b4:	79fb      	ldrb	r3, [r7, #7]
 80065b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80065bc:	79fa      	ldrb	r2, [r7, #7]
 80065be:	f107 0114 	add.w	r1, r7, #20
 80065c2:	f107 0308 	add.w	r3, r7, #8
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff fd1c 	bl	8006004 <find_volume>
 80065cc:	4603      	mov	r3, r0
 80065ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80065d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f040 818d 	bne.w	80068f6 <f_open+0x35a>
		dj.obj.fs = fs;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	f107 0318 	add.w	r3, r7, #24
 80065e6:	4611      	mov	r1, r2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff fbff 	bl	8005dec <follow_path>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80065f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d118      	bne.n	800662e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80065fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006600:	b25b      	sxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	da03      	bge.n	800660e <f_open+0x72>
				res = FR_INVALID_NAME;
 8006606:	2306      	movs	r3, #6
 8006608:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800660c:	e00f      	b.n	800662e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	2b01      	cmp	r3, #1
 8006612:	bf8c      	ite	hi
 8006614:	2301      	movhi	r3, #1
 8006616:	2300      	movls	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	461a      	mov	r2, r3
 800661c:	f107 0318 	add.w	r3, r7, #24
 8006620:	4611      	mov	r1, r2
 8006622:	4618      	mov	r0, r3
 8006624:	f7fd fff6 	bl	8004614 <chk_lock>
 8006628:	4603      	mov	r3, r0
 800662a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800662e:	79fb      	ldrb	r3, [r7, #7]
 8006630:	f003 031c 	and.w	r3, r3, #28
 8006634:	2b00      	cmp	r3, #0
 8006636:	d07f      	beq.n	8006738 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006638:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800663c:	2b00      	cmp	r3, #0
 800663e:	d017      	beq.n	8006670 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006640:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006644:	2b04      	cmp	r3, #4
 8006646:	d10e      	bne.n	8006666 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006648:	f7fe f840 	bl	80046cc <enq_lock>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d006      	beq.n	8006660 <f_open+0xc4>
 8006652:	f107 0318 	add.w	r3, r7, #24
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff f918 	bl	800588c <dir_register>
 800665c:	4603      	mov	r3, r0
 800665e:	e000      	b.n	8006662 <f_open+0xc6>
 8006660:	2312      	movs	r3, #18
 8006662:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006666:	79fb      	ldrb	r3, [r7, #7]
 8006668:	f043 0308 	orr.w	r3, r3, #8
 800666c:	71fb      	strb	r3, [r7, #7]
 800666e:	e010      	b.n	8006692 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006670:	7fbb      	ldrb	r3, [r7, #30]
 8006672:	f003 0311 	and.w	r3, r3, #17
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <f_open+0xe6>
					res = FR_DENIED;
 800667a:	2307      	movs	r3, #7
 800667c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006680:	e007      	b.n	8006692 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006682:	79fb      	ldrb	r3, [r7, #7]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <f_open+0xf6>
 800668c:	2308      	movs	r3, #8
 800668e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006692:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006696:	2b00      	cmp	r3, #0
 8006698:	d168      	bne.n	800676c <f_open+0x1d0>
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d063      	beq.n	800676c <f_open+0x1d0>
				dw = GET_FATTIME();
 80066a4:	f7fd f8dc 	bl	8003860 <get_fattime>
 80066a8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80066aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ac:	330e      	adds	r3, #14
 80066ae:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7fd ff04 	bl	80044be <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80066b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b8:	3316      	adds	r3, #22
 80066ba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fd fefe 	bl	80044be <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80066c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c4:	330b      	adds	r3, #11
 80066c6:	2220      	movs	r2, #32
 80066c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066ce:	4611      	mov	r1, r2
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fe fe53 	bl	800537c <ld_clust>
 80066d6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80066dc:	2200      	movs	r2, #0
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fe fe6b 	bl	80053ba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80066e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e6:	331c      	adds	r3, #28
 80066e8:	2100      	movs	r1, #0
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fd fee7 	bl	80044be <st_dword>
					fs->wflag = 1;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2201      	movs	r2, #1
 80066f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80066f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d037      	beq.n	800676c <f_open+0x1d0>
						dw = fs->winsect;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006700:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006702:	f107 0318 	add.w	r3, r7, #24
 8006706:	2200      	movs	r2, #0
 8006708:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800670a:	4618      	mov	r0, r3
 800670c:	f7fe fb7e 	bl	8004e0c <remove_chain>
 8006710:	4603      	mov	r3, r0
 8006712:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8006716:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800671a:	2b00      	cmp	r3, #0
 800671c:	d126      	bne.n	800676c <f_open+0x1d0>
							res = move_window(fs, dw);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe f926 	bl	8004974 <move_window>
 8006728:	4603      	mov	r3, r0
 800672a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006732:	3a01      	subs	r2, #1
 8006734:	611a      	str	r2, [r3, #16]
 8006736:	e019      	b.n	800676c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006738:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800673c:	2b00      	cmp	r3, #0
 800673e:	d115      	bne.n	800676c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006740:	7fbb      	ldrb	r3, [r7, #30]
 8006742:	f003 0310 	and.w	r3, r3, #16
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <f_open+0x1b6>
					res = FR_NO_FILE;
 800674a:	2304      	movs	r3, #4
 800674c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006750:	e00c      	b.n	800676c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d007      	beq.n	800676c <f_open+0x1d0>
 800675c:	7fbb      	ldrb	r3, [r7, #30]
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <f_open+0x1d0>
						res = FR_DENIED;
 8006766:	2307      	movs	r3, #7
 8006768:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800676c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006770:	2b00      	cmp	r3, #0
 8006772:	d126      	bne.n	80067c2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006774:	79fb      	ldrb	r3, [r7, #7]
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006784:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800678e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006794:	79fb      	ldrb	r3, [r7, #7]
 8006796:	2b01      	cmp	r3, #1
 8006798:	bf8c      	ite	hi
 800679a:	2301      	movhi	r3, #1
 800679c:	2300      	movls	r3, #0
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	461a      	mov	r2, r3
 80067a2:	f107 0318 	add.w	r3, r7, #24
 80067a6:	4611      	mov	r1, r2
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fd ffb1 	bl	8004710 <inc_lock>
 80067ae:	4602      	mov	r2, r0
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d102      	bne.n	80067c2 <f_open+0x226>
 80067bc:	2302      	movs	r3, #2
 80067be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80067c2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f040 8095 	bne.w	80068f6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067d0:	4611      	mov	r1, r2
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe fdd2 	bl	800537c <ld_clust>
 80067d8:	4602      	mov	r2, r0
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80067de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e0:	331c      	adds	r3, #28
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fd fe2d 	bl	8004442 <ld_dword>
 80067e8:	4602      	mov	r2, r0
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	88da      	ldrh	r2, [r3, #6]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	79fa      	ldrb	r2, [r7, #7]
 8006806:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	3330      	adds	r3, #48	@ 0x30
 800681e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006822:	2100      	movs	r1, #0
 8006824:	4618      	mov	r0, r3
 8006826:	f7fd fe97 	bl	8004558 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	f003 0320 	and.w	r3, r3, #32
 8006830:	2b00      	cmp	r3, #0
 8006832:	d060      	beq.n	80068f6 <f_open+0x35a>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d05c      	beq.n	80068f6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	895b      	ldrh	r3, [r3, #10]
 8006848:	025b      	lsls	r3, r3, #9
 800684a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006858:	e016      	b.n	8006888 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800685e:	4618      	mov	r0, r3
 8006860:	f7fe f943 	bl	8004aea <get_fat>
 8006864:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006866:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006868:	2b01      	cmp	r3, #1
 800686a:	d802      	bhi.n	8006872 <f_open+0x2d6>
 800686c:	2302      	movs	r3, #2
 800686e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006872:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006878:	d102      	bne.n	8006880 <f_open+0x2e4>
 800687a:	2301      	movs	r3, #1
 800687c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006880:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006888:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800688c:	2b00      	cmp	r3, #0
 800688e:	d103      	bne.n	8006898 <f_open+0x2fc>
 8006890:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006892:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006894:	429a      	cmp	r2, r3
 8006896:	d8e0      	bhi.n	800685a <f_open+0x2be>
				}
				fp->clust = clst;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800689c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800689e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d127      	bne.n	80068f6 <f_open+0x35a>
 80068a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d022      	beq.n	80068f6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fe f8f9 	bl	8004aac <clust2sect>
 80068ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80068bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d103      	bne.n	80068ca <f_open+0x32e>
						res = FR_INT_ERR;
 80068c2:	2302      	movs	r3, #2
 80068c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80068c8:	e015      	b.n	80068f6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80068ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068cc:	0a5a      	lsrs	r2, r3, #9
 80068ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068d0:	441a      	add	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	7858      	ldrb	r0, [r3, #1]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a1a      	ldr	r2, [r3, #32]
 80068e4:	2301      	movs	r3, #1
 80068e6:	f7fd fd35 	bl	8004354 <disk_read>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <f_open+0x35a>
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80068f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <f_open+0x368>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006904:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8006908:	4618      	mov	r0, r3
 800690a:	3768      	adds	r7, #104	@ 0x68
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b08e      	sub	sp, #56	@ 0x38
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2200      	movs	r2, #0
 8006926:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f107 0214 	add.w	r2, r7, #20
 800692e:	4611      	mov	r1, r2
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff fdb7 	bl	80064a4 <validate>
 8006936:	4603      	mov	r3, r0
 8006938:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800693c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006940:	2b00      	cmp	r3, #0
 8006942:	d107      	bne.n	8006954 <f_read+0x44>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	7d5b      	ldrb	r3, [r3, #21]
 8006948:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800694c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <f_read+0x4a>
 8006954:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006958:	e115      	b.n	8006b86 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	7d1b      	ldrb	r3, [r3, #20]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <f_read+0x5a>
 8006966:	2307      	movs	r3, #7
 8006968:	e10d      	b.n	8006b86 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	68da      	ldr	r2, [r3, #12]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	429a      	cmp	r2, r3
 800697c:	f240 80fe 	bls.w	8006b7c <f_read+0x26c>
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006984:	e0fa      	b.n	8006b7c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800698e:	2b00      	cmp	r3, #0
 8006990:	f040 80c6 	bne.w	8006b20 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	0a5b      	lsrs	r3, r3, #9
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	8952      	ldrh	r2, [r2, #10]
 800699e:	3a01      	subs	r2, #1
 80069a0:	4013      	ands	r3, r2
 80069a2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d12f      	bne.n	8006a0a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d103      	bne.n	80069ba <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80069b8:	e013      	b.n	80069e2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	4619      	mov	r1, r3
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f7fe fb1c 	bl	8005006 <clmt_clust>
 80069ce:	6338      	str	r0, [r7, #48]	@ 0x30
 80069d0:	e007      	b.n	80069e2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	4619      	mov	r1, r3
 80069da:	4610      	mov	r0, r2
 80069dc:	f7fe f885 	bl	8004aea <get_fat>
 80069e0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d804      	bhi.n	80069f2 <f_read+0xe2>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2202      	movs	r2, #2
 80069ec:	755a      	strb	r2, [r3, #21]
 80069ee:	2302      	movs	r3, #2
 80069f0:	e0c9      	b.n	8006b86 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80069f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d104      	bne.n	8006a04 <f_read+0xf4>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	755a      	strb	r2, [r3, #21]
 8006a00:	2301      	movs	r3, #1
 8006a02:	e0c0      	b.n	8006b86 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a08:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	4619      	mov	r1, r3
 8006a12:	4610      	mov	r0, r2
 8006a14:	f7fe f84a 	bl	8004aac <clust2sect>
 8006a18:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d104      	bne.n	8006a2a <f_read+0x11a>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2202      	movs	r2, #2
 8006a24:	755a      	strb	r2, [r3, #21]
 8006a26:	2302      	movs	r3, #2
 8006a28:	e0ad      	b.n	8006b86 <f_read+0x276>
			sect += csect;
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	4413      	add	r3, r2
 8006a30:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	0a5b      	lsrs	r3, r3, #9
 8006a36:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d039      	beq.n	8006ab2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006a3e:	69fa      	ldr	r2, [r7, #28]
 8006a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a42:	4413      	add	r3, r2
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	8952      	ldrh	r2, [r2, #10]
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d905      	bls.n	8006a58 <f_read+0x148>
					cc = fs->csize - csect;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	895b      	ldrh	r3, [r3, #10]
 8006a50:	461a      	mov	r2, r3
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	7858      	ldrb	r0, [r3, #1]
 8006a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5e:	69ba      	ldr	r2, [r7, #24]
 8006a60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a62:	f7fd fc77 	bl	8004354 <disk_read>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d004      	beq.n	8006a76 <f_read+0x166>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	755a      	strb	r2, [r3, #21]
 8006a72:	2301      	movs	r3, #1
 8006a74:	e087      	b.n	8006b86 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	7d1b      	ldrb	r3, [r3, #20]
 8006a7a:	b25b      	sxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	da14      	bge.n	8006aaa <f_read+0x19a>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a1a      	ldr	r2, [r3, #32]
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d90d      	bls.n	8006aaa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a1a      	ldr	r2, [r3, #32]
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	025b      	lsls	r3, r3, #9
 8006a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a9a:	18d0      	adds	r0, r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3330      	adds	r3, #48	@ 0x30
 8006aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	f7fd fd36 	bl	8004516 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aac:	025b      	lsls	r3, r3, #9
 8006aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8006ab0:	e050      	b.n	8006b54 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d02e      	beq.n	8006b1a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	7d1b      	ldrb	r3, [r3, #20]
 8006ac0:	b25b      	sxtb	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	da18      	bge.n	8006af8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	7858      	ldrb	r0, [r3, #1]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a1a      	ldr	r2, [r3, #32]
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f7fd fc5d 	bl	8004394 <disk_write>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d004      	beq.n	8006aea <f_read+0x1da>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	755a      	strb	r2, [r3, #21]
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e04d      	b.n	8006b86 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	7d1b      	ldrb	r3, [r3, #20]
 8006aee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	7858      	ldrb	r0, [r3, #1]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006b02:	2301      	movs	r3, #1
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	f7fd fc25 	bl	8004354 <disk_read>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d004      	beq.n	8006b1a <f_read+0x20a>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2201      	movs	r2, #1
 8006b14:	755a      	strb	r2, [r3, #21]
 8006b16:	2301      	movs	r3, #1
 8006b18:	e035      	b.n	8006b86 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b28:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006b2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d901      	bls.n	8006b3a <f_read+0x22a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b48:	4413      	add	r3, r2
 8006b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b50:	f7fd fce1 	bl	8004516 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b58:	4413      	add	r3, r2
 8006b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	699a      	ldr	r2, [r3, #24]
 8006b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b62:	441a      	add	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	619a      	str	r2, [r3, #24]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6e:	441a      	add	r2, r3
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f47f af01 	bne.w	8006986 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3738      	adds	r7, #56	@ 0x38
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b08c      	sub	sp, #48	@ 0x30
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	60f8      	str	r0, [r7, #12]
 8006b96:	60b9      	str	r1, [r7, #8]
 8006b98:	607a      	str	r2, [r7, #4]
 8006b9a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f107 0210 	add.w	r2, r7, #16
 8006bac:	4611      	mov	r1, r2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff fc78 	bl	80064a4 <validate>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006bba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d107      	bne.n	8006bd2 <f_write+0x44>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	7d5b      	ldrb	r3, [r3, #21]
 8006bc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006bca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <f_write+0x4a>
 8006bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bd6:	e14b      	b.n	8006e70 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	7d1b      	ldrb	r3, [r3, #20]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <f_write+0x5a>
 8006be4:	2307      	movs	r3, #7
 8006be6:	e143      	b.n	8006e70 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	699a      	ldr	r2, [r3, #24]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	441a      	add	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	f080 812d 	bcs.w	8006e54 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	43db      	mvns	r3, r3
 8006c00:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006c02:	e127      	b.n	8006e54 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f040 80e3 	bne.w	8006dd8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	0a5b      	lsrs	r3, r3, #9
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	8952      	ldrh	r2, [r2, #10]
 8006c1c:	3a01      	subs	r2, #1
 8006c1e:	4013      	ands	r3, r2
 8006c20:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d143      	bne.n	8006cb0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10c      	bne.n	8006c4a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d11a      	bne.n	8006c72 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2100      	movs	r1, #0
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fe f948 	bl	8004ed6 <create_chain>
 8006c46:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006c48:	e013      	b.n	8006c72 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	4619      	mov	r1, r3
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f7fe f9d4 	bl	8005006 <clmt_clust>
 8006c5e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006c60:	e007      	b.n	8006c72 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4610      	mov	r0, r2
 8006c6c:	f7fe f933 	bl	8004ed6 <create_chain>
 8006c70:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 80f2 	beq.w	8006e5e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d104      	bne.n	8006c8a <f_write+0xfc>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2202      	movs	r2, #2
 8006c84:	755a      	strb	r2, [r3, #21]
 8006c86:	2302      	movs	r3, #2
 8006c88:	e0f2      	b.n	8006e70 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c90:	d104      	bne.n	8006c9c <f_write+0x10e>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	755a      	strb	r2, [r3, #21]
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e0e9      	b.n	8006e70 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ca0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d102      	bne.n	8006cb0 <f_write+0x122>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cae:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	7d1b      	ldrb	r3, [r3, #20]
 8006cb4:	b25b      	sxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	da18      	bge.n	8006cec <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	7858      	ldrb	r0, [r3, #1]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a1a      	ldr	r2, [r3, #32]
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f7fd fb63 	bl	8004394 <disk_write>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d004      	beq.n	8006cde <f_write+0x150>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	755a      	strb	r2, [r3, #21]
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e0c8      	b.n	8006e70 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	7d1b      	ldrb	r3, [r3, #20]
 8006ce2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	f7fd fed9 	bl	8004aac <clust2sect>
 8006cfa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d104      	bne.n	8006d0c <f_write+0x17e>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2202      	movs	r2, #2
 8006d06:	755a      	strb	r2, [r3, #21]
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e0b1      	b.n	8006e70 <f_write+0x2e2>
			sect += csect;
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	4413      	add	r3, r2
 8006d12:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	0a5b      	lsrs	r3, r3, #9
 8006d18:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d03c      	beq.n	8006d9a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	4413      	add	r3, r2
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	8952      	ldrh	r2, [r2, #10]
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d905      	bls.n	8006d3a <f_write+0x1ac>
					cc = fs->csize - csect;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	895b      	ldrh	r3, [r3, #10]
 8006d32:	461a      	mov	r2, r3
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	7858      	ldrb	r0, [r3, #1]
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	69f9      	ldr	r1, [r7, #28]
 8006d44:	f7fd fb26 	bl	8004394 <disk_write>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d004      	beq.n	8006d58 <f_write+0x1ca>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2201      	movs	r2, #1
 8006d52:	755a      	strb	r2, [r3, #21]
 8006d54:	2301      	movs	r3, #1
 8006d56:	e08b      	b.n	8006e70 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a1a      	ldr	r2, [r3, #32]
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	6a3a      	ldr	r2, [r7, #32]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d915      	bls.n	8006d92 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a1a      	ldr	r2, [r3, #32]
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	025b      	lsls	r3, r3, #9
 8006d76:	69fa      	ldr	r2, [r7, #28]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d7e:	4619      	mov	r1, r3
 8006d80:	f7fd fbc9 	bl	8004516 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	7d1b      	ldrb	r3, [r3, #20]
 8006d88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	025b      	lsls	r3, r3, #9
 8006d96:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8006d98:	e03f      	b.n	8006e1a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d016      	beq.n	8006dd2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	699a      	ldr	r2, [r3, #24]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d210      	bcs.n	8006dd2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	7858      	ldrb	r0, [r3, #1]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006dba:	2301      	movs	r3, #1
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	f7fd fac9 	bl	8004354 <disk_read>
 8006dc2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d004      	beq.n	8006dd2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	755a      	strb	r2, [r3, #21]
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e04e      	b.n	8006e70 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006de4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d901      	bls.n	8006df2 <f_write+0x264>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e00:	4413      	add	r3, r2
 8006e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e04:	69f9      	ldr	r1, [r7, #28]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fd fb85 	bl	8004516 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	7d1b      	ldrb	r3, [r3, #20]
 8006e10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006e1a:	69fa      	ldr	r2, [r7, #28]
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1e:	4413      	add	r3, r2
 8006e20:	61fb      	str	r3, [r7, #28]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	699a      	ldr	r2, [r3, #24]
 8006e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e28:	441a      	add	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	619a      	str	r2, [r3, #24]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	68da      	ldr	r2, [r3, #12]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	bf38      	it	cc
 8006e3a:	461a      	movcc	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	60da      	str	r2, [r3, #12]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e46:	441a      	add	r2, r3
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f47f aed4 	bne.w	8006c04 <f_write+0x76>
 8006e5c:	e000      	b.n	8006e60 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006e5e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	7d1b      	ldrb	r3, [r3, #20]
 8006e64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3730      	adds	r7, #48	@ 0x30
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f107 0208 	add.w	r2, r7, #8
 8006e86:	4611      	mov	r1, r2
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff fb0b 	bl	80064a4 <validate>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006e92:	7dfb      	ldrb	r3, [r7, #23]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d168      	bne.n	8006f6a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	7d1b      	ldrb	r3, [r3, #20]
 8006e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d062      	beq.n	8006f6a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	7d1b      	ldrb	r3, [r3, #20]
 8006ea8:	b25b      	sxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	da15      	bge.n	8006eda <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	7858      	ldrb	r0, [r3, #1]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1a      	ldr	r2, [r3, #32]
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f7fd fa69 	bl	8004394 <disk_write>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <f_sync+0x54>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e04f      	b.n	8006f6c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	7d1b      	ldrb	r3, [r3, #20]
 8006ed0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006eda:	f7fc fcc1 	bl	8003860 <get_fattime>
 8006ede:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	4610      	mov	r0, r2
 8006eea:	f7fd fd43 	bl	8004974 <move_window>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d138      	bne.n	8006f6a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	330b      	adds	r3, #11
 8006f02:	781a      	ldrb	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	330b      	adds	r3, #11
 8006f08:	f042 0220 	orr.w	r2, r2, #32
 8006f0c:	b2d2      	uxtb	r2, r2
 8006f0e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6818      	ldr	r0, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	68f9      	ldr	r1, [r7, #12]
 8006f1c:	f7fe fa4d 	bl	80053ba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f103 021c 	add.w	r2, r3, #28
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	f7fd fac6 	bl	80044be <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3316      	adds	r3, #22
 8006f36:	6939      	ldr	r1, [r7, #16]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fd fac0 	bl	80044be <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3312      	adds	r3, #18
 8006f42:	2100      	movs	r1, #0
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fd fa9f 	bl	8004488 <st_word>
					fs->wflag = 1;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fd fd3c 	bl	80049d0 <sync_fs>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	7d1b      	ldrb	r3, [r3, #20]
 8006f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff ff7b 	bl	8006e78 <f_sync>
 8006f82:	4603      	mov	r3, r0
 8006f84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d118      	bne.n	8006fbe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f107 0208 	add.w	r2, r7, #8
 8006f92:	4611      	mov	r1, r2
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7ff fa85 	bl	80064a4 <validate>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10c      	bne.n	8006fbe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fd fc3f 	bl	800482c <dec_lock>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d102      	bne.n	8006fbe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b092      	sub	sp, #72	@ 0x48
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006fd4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8006fd8:	f107 030c 	add.w	r3, r7, #12
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7ff f810 	bl	8006004 <find_volume>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8006fea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f040 8099 	bne.w	8007126 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006ff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffc:	695a      	ldr	r2, [r3, #20]
 8006ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	3b02      	subs	r3, #2
 8007004:	429a      	cmp	r2, r3
 8007006:	d804      	bhi.n	8007012 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700a:	695a      	ldr	r2, [r3, #20]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	e089      	b.n	8007126 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d128      	bne.n	8007070 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800701e:	2302      	movs	r3, #2
 8007020:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007024:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007026:	f107 0314 	add.w	r3, r7, #20
 800702a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800702c:	4618      	mov	r0, r3
 800702e:	f7fd fd5c 	bl	8004aea <get_fat>
 8007032:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703a:	d103      	bne.n	8007044 <f_getfree+0x7c>
 800703c:	2301      	movs	r3, #1
 800703e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007042:	e063      	b.n	800710c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007046:	2b01      	cmp	r3, #1
 8007048:	d103      	bne.n	8007052 <f_getfree+0x8a>
 800704a:	2302      	movs	r3, #2
 800704c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007050:	e05c      	b.n	800710c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d102      	bne.n	800705e <f_getfree+0x96>
 8007058:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800705a:	3301      	adds	r3, #1
 800705c:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800705e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007060:	3301      	adds	r3, #1
 8007062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800706a:	429a      	cmp	r2, r3
 800706c:	d3db      	bcc.n	8007026 <f_getfree+0x5e>
 800706e:	e04d      	b.n	800710c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707a:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800707c:	2300      	movs	r3, #0
 800707e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007080:	2300      	movs	r3, #0
 8007082:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8007084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007086:	2b00      	cmp	r3, #0
 8007088:	d113      	bne.n	80070b2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800708a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800708c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007092:	4619      	mov	r1, r3
 8007094:	f7fd fc6e 	bl	8004974 <move_window>
 8007098:	4603      	mov	r3, r0
 800709a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800709e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d131      	bne.n	800710a <f_getfree+0x142>
							p = fs->win;
 80070a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a8:	3334      	adds	r3, #52	@ 0x34
 80070aa:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 80070ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070b0:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80070b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d10f      	bne.n	80070da <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80070ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070bc:	f7fd f9a8 	bl	8004410 <ld_word>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d102      	bne.n	80070cc <f_getfree+0x104>
 80070c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070c8:	3301      	adds	r3, #1
 80070ca:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 80070cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ce:	3302      	adds	r3, #2
 80070d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80070d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d4:	3b02      	subs	r3, #2
 80070d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d8:	e010      	b.n	80070fc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80070da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070dc:	f7fd f9b1 	bl	8004442 <ld_dword>
 80070e0:	4603      	mov	r3, r0
 80070e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d102      	bne.n	80070f0 <f_getfree+0x128>
 80070ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070ec:	3301      	adds	r3, #1
 80070ee:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80070f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f2:	3304      	adds	r3, #4
 80070f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80070f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070f8:	3b04      	subs	r3, #4
 80070fa:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80070fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070fe:	3b01      	subs	r3, #1
 8007100:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1bd      	bne.n	8007084 <f_getfree+0xbc>
 8007108:	e000      	b.n	800710c <f_getfree+0x144>
							if (res != FR_OK) break;
 800710a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007110:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007114:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007116:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711a:	791a      	ldrb	r2, [r3, #4]
 800711c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711e:	f042 0201 	orr.w	r2, r2, #1
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007126:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800712a:	4618      	mov	r0, r3
 800712c:	3748      	adds	r7, #72	@ 0x48
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b088      	sub	sp, #32
 8007136:	af00      	add	r7, sp, #0
 8007138:	60f8      	str	r0, [r7, #12]
 800713a:	60b9      	str	r1, [r7, #8]
 800713c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007146:	e01c      	b.n	8007182 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007148:	f107 0310 	add.w	r3, r7, #16
 800714c:	f107 0114 	add.w	r1, r7, #20
 8007150:	2201      	movs	r2, #1
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff fbdc 	bl	8006910 <f_read>
		if (rc != 1) break;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d117      	bne.n	800718e <f_gets+0x5c>
		c = s[0];
 800715e:	7d3b      	ldrb	r3, [r7, #20]
 8007160:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007162:	7dfb      	ldrb	r3, [r7, #23]
 8007164:	2b0d      	cmp	r3, #13
 8007166:	d00b      	beq.n	8007180 <f_gets+0x4e>
		*p++ = c;
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	61ba      	str	r2, [r7, #24]
 800716e:	7dfa      	ldrb	r2, [r7, #23]
 8007170:	701a      	strb	r2, [r3, #0]
		n++;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	3301      	adds	r3, #1
 8007176:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007178:	7dfb      	ldrb	r3, [r7, #23]
 800717a:	2b0a      	cmp	r3, #10
 800717c:	d009      	beq.n	8007192 <f_gets+0x60>
 800717e:	e000      	b.n	8007182 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007180:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	3b01      	subs	r3, #1
 8007186:	69fa      	ldr	r2, [r7, #28]
 8007188:	429a      	cmp	r2, r3
 800718a:	dbdd      	blt.n	8007148 <f_gets+0x16>
 800718c:	e002      	b.n	8007194 <f_gets+0x62>
		if (rc != 1) break;
 800718e:	bf00      	nop
 8007190:	e000      	b.n	8007194 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8007192:	bf00      	nop
	}
	*p = 0;
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	2200      	movs	r2, #0
 8007198:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <f_gets+0x72>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	e000      	b.n	80071a6 <f_gets+0x74>
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3720      	adds	r7, #32
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
	...

080071b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	4613      	mov	r3, r2
 80071bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80071be:	2301      	movs	r3, #1
 80071c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80071c2:	2300      	movs	r3, #0
 80071c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80071c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007244 <FATFS_LinkDriverEx+0x94>)
 80071c8:	7a5b      	ldrb	r3, [r3, #9]
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d131      	bne.n	8007234 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80071d0:	4b1c      	ldr	r3, [pc, #112]	@ (8007244 <FATFS_LinkDriverEx+0x94>)
 80071d2:	7a5b      	ldrb	r3, [r3, #9]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	461a      	mov	r2, r3
 80071d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007244 <FATFS_LinkDriverEx+0x94>)
 80071da:	2100      	movs	r1, #0
 80071dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80071de:	4b19      	ldr	r3, [pc, #100]	@ (8007244 <FATFS_LinkDriverEx+0x94>)
 80071e0:	7a5b      	ldrb	r3, [r3, #9]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	4a17      	ldr	r2, [pc, #92]	@ (8007244 <FATFS_LinkDriverEx+0x94>)
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80071ee:	4b15      	ldr	r3, [pc, #84]	@ (8007244 <FATFS_LinkDriverEx+0x94>)
 80071f0:	7a5b      	ldrb	r3, [r3, #9]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	461a      	mov	r2, r3
 80071f6:	4b13      	ldr	r3, [pc, #76]	@ (8007244 <FATFS_LinkDriverEx+0x94>)
 80071f8:	4413      	add	r3, r2
 80071fa:	79fa      	ldrb	r2, [r7, #7]
 80071fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80071fe:	4b11      	ldr	r3, [pc, #68]	@ (8007244 <FATFS_LinkDriverEx+0x94>)
 8007200:	7a5b      	ldrb	r3, [r3, #9]
 8007202:	b2db      	uxtb	r3, r3
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	b2d1      	uxtb	r1, r2
 8007208:	4a0e      	ldr	r2, [pc, #56]	@ (8007244 <FATFS_LinkDriverEx+0x94>)
 800720a:	7251      	strb	r1, [r2, #9]
 800720c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800720e:	7dbb      	ldrb	r3, [r7, #22]
 8007210:	3330      	adds	r3, #48	@ 0x30
 8007212:	b2da      	uxtb	r2, r3
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	3301      	adds	r3, #1
 800721c:	223a      	movs	r2, #58	@ 0x3a
 800721e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	3302      	adds	r3, #2
 8007224:	222f      	movs	r2, #47	@ 0x2f
 8007226:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	3303      	adds	r3, #3
 800722c:	2200      	movs	r2, #0
 800722e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007230:	2300      	movs	r3, #0
 8007232:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007234:	7dfb      	ldrb	r3, [r7, #23]
}
 8007236:	4618      	mov	r0, r3
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	200005ec 	.word	0x200005ec

08007248 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007252:	2200      	movs	r2, #0
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7ff ffaa 	bl	80071b0 <FATFS_LinkDriverEx>
 800725c:	4603      	mov	r3, r0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	4603      	mov	r3, r0
 8007270:	6039      	str	r1, [r7, #0]
 8007272:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007274:	88fb      	ldrh	r3, [r7, #6]
 8007276:	2b7f      	cmp	r3, #127	@ 0x7f
 8007278:	d802      	bhi.n	8007280 <ff_convert+0x18>
		c = chr;
 800727a:	88fb      	ldrh	r3, [r7, #6]
 800727c:	81fb      	strh	r3, [r7, #14]
 800727e:	e025      	b.n	80072cc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00b      	beq.n	800729e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	2bff      	cmp	r3, #255	@ 0xff
 800728a:	d805      	bhi.n	8007298 <ff_convert+0x30>
 800728c:	88fb      	ldrh	r3, [r7, #6]
 800728e:	3b80      	subs	r3, #128	@ 0x80
 8007290:	4a12      	ldr	r2, [pc, #72]	@ (80072dc <ff_convert+0x74>)
 8007292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007296:	e000      	b.n	800729a <ff_convert+0x32>
 8007298:	2300      	movs	r3, #0
 800729a:	81fb      	strh	r3, [r7, #14]
 800729c:	e016      	b.n	80072cc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800729e:	2300      	movs	r3, #0
 80072a0:	81fb      	strh	r3, [r7, #14]
 80072a2:	e009      	b.n	80072b8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80072a4:	89fb      	ldrh	r3, [r7, #14]
 80072a6:	4a0d      	ldr	r2, [pc, #52]	@ (80072dc <ff_convert+0x74>)
 80072a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ac:	88fa      	ldrh	r2, [r7, #6]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d006      	beq.n	80072c0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80072b2:	89fb      	ldrh	r3, [r7, #14]
 80072b4:	3301      	adds	r3, #1
 80072b6:	81fb      	strh	r3, [r7, #14]
 80072b8:	89fb      	ldrh	r3, [r7, #14]
 80072ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80072bc:	d9f2      	bls.n	80072a4 <ff_convert+0x3c>
 80072be:	e000      	b.n	80072c2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80072c0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80072c2:	89fb      	ldrh	r3, [r7, #14]
 80072c4:	3380      	adds	r3, #128	@ 0x80
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80072cc:	89fb      	ldrh	r3, [r7, #14]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	0800be04 	.word	0x0800be04

080072e0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4603      	mov	r3, r0
 80072e8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80072ea:	88fb      	ldrh	r3, [r7, #6]
 80072ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f0:	d201      	bcs.n	80072f6 <ff_wtoupper+0x16>
 80072f2:	4b3e      	ldr	r3, [pc, #248]	@ (80073ec <ff_wtoupper+0x10c>)
 80072f4:	e000      	b.n	80072f8 <ff_wtoupper+0x18>
 80072f6:	4b3e      	ldr	r3, [pc, #248]	@ (80073f0 <ff_wtoupper+0x110>)
 80072f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	1c9a      	adds	r2, r3, #2
 80072fe:	617a      	str	r2, [r7, #20]
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007304:	8a7b      	ldrh	r3, [r7, #18]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d068      	beq.n	80073dc <ff_wtoupper+0xfc>
 800730a:	88fa      	ldrh	r2, [r7, #6]
 800730c:	8a7b      	ldrh	r3, [r7, #18]
 800730e:	429a      	cmp	r2, r3
 8007310:	d364      	bcc.n	80073dc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	1c9a      	adds	r2, r3, #2
 8007316:	617a      	str	r2, [r7, #20]
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	823b      	strh	r3, [r7, #16]
 800731c:	8a3b      	ldrh	r3, [r7, #16]
 800731e:	0a1b      	lsrs	r3, r3, #8
 8007320:	81fb      	strh	r3, [r7, #14]
 8007322:	8a3b      	ldrh	r3, [r7, #16]
 8007324:	b2db      	uxtb	r3, r3
 8007326:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007328:	88fa      	ldrh	r2, [r7, #6]
 800732a:	8a79      	ldrh	r1, [r7, #18]
 800732c:	8a3b      	ldrh	r3, [r7, #16]
 800732e:	440b      	add	r3, r1
 8007330:	429a      	cmp	r2, r3
 8007332:	da49      	bge.n	80073c8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007334:	89fb      	ldrh	r3, [r7, #14]
 8007336:	2b08      	cmp	r3, #8
 8007338:	d84f      	bhi.n	80073da <ff_wtoupper+0xfa>
 800733a:	a201      	add	r2, pc, #4	@ (adr r2, 8007340 <ff_wtoupper+0x60>)
 800733c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007340:	08007365 	.word	0x08007365
 8007344:	08007377 	.word	0x08007377
 8007348:	0800738d 	.word	0x0800738d
 800734c:	08007395 	.word	0x08007395
 8007350:	0800739d 	.word	0x0800739d
 8007354:	080073a5 	.word	0x080073a5
 8007358:	080073ad 	.word	0x080073ad
 800735c:	080073b5 	.word	0x080073b5
 8007360:	080073bd 	.word	0x080073bd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007364:	88fa      	ldrh	r2, [r7, #6]
 8007366:	8a7b      	ldrh	r3, [r7, #18]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4413      	add	r3, r2
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	80fb      	strh	r3, [r7, #6]
 8007374:	e027      	b.n	80073c6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007376:	88fa      	ldrh	r2, [r7, #6]
 8007378:	8a7b      	ldrh	r3, [r7, #18]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	b29b      	uxth	r3, r3
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	b29b      	uxth	r3, r3
 8007384:	88fa      	ldrh	r2, [r7, #6]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	80fb      	strh	r3, [r7, #6]
 800738a:	e01c      	b.n	80073c6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800738c:	88fb      	ldrh	r3, [r7, #6]
 800738e:	3b10      	subs	r3, #16
 8007390:	80fb      	strh	r3, [r7, #6]
 8007392:	e018      	b.n	80073c6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007394:	88fb      	ldrh	r3, [r7, #6]
 8007396:	3b20      	subs	r3, #32
 8007398:	80fb      	strh	r3, [r7, #6]
 800739a:	e014      	b.n	80073c6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800739c:	88fb      	ldrh	r3, [r7, #6]
 800739e:	3b30      	subs	r3, #48	@ 0x30
 80073a0:	80fb      	strh	r3, [r7, #6]
 80073a2:	e010      	b.n	80073c6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80073a4:	88fb      	ldrh	r3, [r7, #6]
 80073a6:	3b1a      	subs	r3, #26
 80073a8:	80fb      	strh	r3, [r7, #6]
 80073aa:	e00c      	b.n	80073c6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80073ac:	88fb      	ldrh	r3, [r7, #6]
 80073ae:	3308      	adds	r3, #8
 80073b0:	80fb      	strh	r3, [r7, #6]
 80073b2:	e008      	b.n	80073c6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80073b4:	88fb      	ldrh	r3, [r7, #6]
 80073b6:	3b50      	subs	r3, #80	@ 0x50
 80073b8:	80fb      	strh	r3, [r7, #6]
 80073ba:	e004      	b.n	80073c6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80073bc:	88fb      	ldrh	r3, [r7, #6]
 80073be:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80073c2:	80fb      	strh	r3, [r7, #6]
 80073c4:	bf00      	nop
			}
			break;
 80073c6:	e008      	b.n	80073da <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80073c8:	89fb      	ldrh	r3, [r7, #14]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d195      	bne.n	80072fa <ff_wtoupper+0x1a>
 80073ce:	8a3b      	ldrh	r3, [r7, #16]
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4413      	add	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80073d8:	e78f      	b.n	80072fa <ff_wtoupper+0x1a>
			break;
 80073da:	bf00      	nop
	}

	return chr;
 80073dc:	88fb      	ldrh	r3, [r7, #6]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	371c      	adds	r7, #28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	0800bf04 	.word	0x0800bf04
 80073f0:	0800c0f8 	.word	0x0800c0f8

080073f4 <__cvt>:
 80073f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	ec57 6b10 	vmov	r6, r7, d0
 80073fc:	2f00      	cmp	r7, #0
 80073fe:	460c      	mov	r4, r1
 8007400:	4619      	mov	r1, r3
 8007402:	463b      	mov	r3, r7
 8007404:	bfbb      	ittet	lt
 8007406:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800740a:	461f      	movlt	r7, r3
 800740c:	2300      	movge	r3, #0
 800740e:	232d      	movlt	r3, #45	@ 0x2d
 8007410:	700b      	strb	r3, [r1, #0]
 8007412:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007414:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007418:	4691      	mov	r9, r2
 800741a:	f023 0820 	bic.w	r8, r3, #32
 800741e:	bfbc      	itt	lt
 8007420:	4632      	movlt	r2, r6
 8007422:	4616      	movlt	r6, r2
 8007424:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007428:	d005      	beq.n	8007436 <__cvt+0x42>
 800742a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800742e:	d100      	bne.n	8007432 <__cvt+0x3e>
 8007430:	3401      	adds	r4, #1
 8007432:	2102      	movs	r1, #2
 8007434:	e000      	b.n	8007438 <__cvt+0x44>
 8007436:	2103      	movs	r1, #3
 8007438:	ab03      	add	r3, sp, #12
 800743a:	9301      	str	r3, [sp, #4]
 800743c:	ab02      	add	r3, sp, #8
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	ec47 6b10 	vmov	d0, r6, r7
 8007444:	4653      	mov	r3, sl
 8007446:	4622      	mov	r2, r4
 8007448:	f001 f8aa 	bl	80085a0 <_dtoa_r>
 800744c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007450:	4605      	mov	r5, r0
 8007452:	d119      	bne.n	8007488 <__cvt+0x94>
 8007454:	f019 0f01 	tst.w	r9, #1
 8007458:	d00e      	beq.n	8007478 <__cvt+0x84>
 800745a:	eb00 0904 	add.w	r9, r0, r4
 800745e:	2200      	movs	r2, #0
 8007460:	2300      	movs	r3, #0
 8007462:	4630      	mov	r0, r6
 8007464:	4639      	mov	r1, r7
 8007466:	f7f9 fb37 	bl	8000ad8 <__aeabi_dcmpeq>
 800746a:	b108      	cbz	r0, 8007470 <__cvt+0x7c>
 800746c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007470:	2230      	movs	r2, #48	@ 0x30
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	454b      	cmp	r3, r9
 8007476:	d31e      	bcc.n	80074b6 <__cvt+0xc2>
 8007478:	9b03      	ldr	r3, [sp, #12]
 800747a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800747c:	1b5b      	subs	r3, r3, r5
 800747e:	4628      	mov	r0, r5
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	b004      	add	sp, #16
 8007484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007488:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800748c:	eb00 0904 	add.w	r9, r0, r4
 8007490:	d1e5      	bne.n	800745e <__cvt+0x6a>
 8007492:	7803      	ldrb	r3, [r0, #0]
 8007494:	2b30      	cmp	r3, #48	@ 0x30
 8007496:	d10a      	bne.n	80074ae <__cvt+0xba>
 8007498:	2200      	movs	r2, #0
 800749a:	2300      	movs	r3, #0
 800749c:	4630      	mov	r0, r6
 800749e:	4639      	mov	r1, r7
 80074a0:	f7f9 fb1a 	bl	8000ad8 <__aeabi_dcmpeq>
 80074a4:	b918      	cbnz	r0, 80074ae <__cvt+0xba>
 80074a6:	f1c4 0401 	rsb	r4, r4, #1
 80074aa:	f8ca 4000 	str.w	r4, [sl]
 80074ae:	f8da 3000 	ldr.w	r3, [sl]
 80074b2:	4499      	add	r9, r3
 80074b4:	e7d3      	b.n	800745e <__cvt+0x6a>
 80074b6:	1c59      	adds	r1, r3, #1
 80074b8:	9103      	str	r1, [sp, #12]
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	e7d9      	b.n	8007472 <__cvt+0x7e>

080074be <__exponent>:
 80074be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074c0:	2900      	cmp	r1, #0
 80074c2:	bfba      	itte	lt
 80074c4:	4249      	neglt	r1, r1
 80074c6:	232d      	movlt	r3, #45	@ 0x2d
 80074c8:	232b      	movge	r3, #43	@ 0x2b
 80074ca:	2909      	cmp	r1, #9
 80074cc:	7002      	strb	r2, [r0, #0]
 80074ce:	7043      	strb	r3, [r0, #1]
 80074d0:	dd29      	ble.n	8007526 <__exponent+0x68>
 80074d2:	f10d 0307 	add.w	r3, sp, #7
 80074d6:	461d      	mov	r5, r3
 80074d8:	270a      	movs	r7, #10
 80074da:	461a      	mov	r2, r3
 80074dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80074e0:	fb07 1416 	mls	r4, r7, r6, r1
 80074e4:	3430      	adds	r4, #48	@ 0x30
 80074e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80074ea:	460c      	mov	r4, r1
 80074ec:	2c63      	cmp	r4, #99	@ 0x63
 80074ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80074f2:	4631      	mov	r1, r6
 80074f4:	dcf1      	bgt.n	80074da <__exponent+0x1c>
 80074f6:	3130      	adds	r1, #48	@ 0x30
 80074f8:	1e94      	subs	r4, r2, #2
 80074fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80074fe:	1c41      	adds	r1, r0, #1
 8007500:	4623      	mov	r3, r4
 8007502:	42ab      	cmp	r3, r5
 8007504:	d30a      	bcc.n	800751c <__exponent+0x5e>
 8007506:	f10d 0309 	add.w	r3, sp, #9
 800750a:	1a9b      	subs	r3, r3, r2
 800750c:	42ac      	cmp	r4, r5
 800750e:	bf88      	it	hi
 8007510:	2300      	movhi	r3, #0
 8007512:	3302      	adds	r3, #2
 8007514:	4403      	add	r3, r0
 8007516:	1a18      	subs	r0, r3, r0
 8007518:	b003      	add	sp, #12
 800751a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800751c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007520:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007524:	e7ed      	b.n	8007502 <__exponent+0x44>
 8007526:	2330      	movs	r3, #48	@ 0x30
 8007528:	3130      	adds	r1, #48	@ 0x30
 800752a:	7083      	strb	r3, [r0, #2]
 800752c:	70c1      	strb	r1, [r0, #3]
 800752e:	1d03      	adds	r3, r0, #4
 8007530:	e7f1      	b.n	8007516 <__exponent+0x58>
	...

08007534 <_printf_float>:
 8007534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007538:	b08d      	sub	sp, #52	@ 0x34
 800753a:	460c      	mov	r4, r1
 800753c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007540:	4616      	mov	r6, r2
 8007542:	461f      	mov	r7, r3
 8007544:	4605      	mov	r5, r0
 8007546:	f000 ff25 	bl	8008394 <_localeconv_r>
 800754a:	6803      	ldr	r3, [r0, #0]
 800754c:	9304      	str	r3, [sp, #16]
 800754e:	4618      	mov	r0, r3
 8007550:	f7f8 fe96 	bl	8000280 <strlen>
 8007554:	2300      	movs	r3, #0
 8007556:	930a      	str	r3, [sp, #40]	@ 0x28
 8007558:	f8d8 3000 	ldr.w	r3, [r8]
 800755c:	9005      	str	r0, [sp, #20]
 800755e:	3307      	adds	r3, #7
 8007560:	f023 0307 	bic.w	r3, r3, #7
 8007564:	f103 0208 	add.w	r2, r3, #8
 8007568:	f894 a018 	ldrb.w	sl, [r4, #24]
 800756c:	f8d4 b000 	ldr.w	fp, [r4]
 8007570:	f8c8 2000 	str.w	r2, [r8]
 8007574:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007578:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800757c:	9307      	str	r3, [sp, #28]
 800757e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007582:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007586:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800758a:	4b9c      	ldr	r3, [pc, #624]	@ (80077fc <_printf_float+0x2c8>)
 800758c:	f04f 32ff 	mov.w	r2, #4294967295
 8007590:	f7f9 fad4 	bl	8000b3c <__aeabi_dcmpun>
 8007594:	bb70      	cbnz	r0, 80075f4 <_printf_float+0xc0>
 8007596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800759a:	4b98      	ldr	r3, [pc, #608]	@ (80077fc <_printf_float+0x2c8>)
 800759c:	f04f 32ff 	mov.w	r2, #4294967295
 80075a0:	f7f9 faae 	bl	8000b00 <__aeabi_dcmple>
 80075a4:	bb30      	cbnz	r0, 80075f4 <_printf_float+0xc0>
 80075a6:	2200      	movs	r2, #0
 80075a8:	2300      	movs	r3, #0
 80075aa:	4640      	mov	r0, r8
 80075ac:	4649      	mov	r1, r9
 80075ae:	f7f9 fa9d 	bl	8000aec <__aeabi_dcmplt>
 80075b2:	b110      	cbz	r0, 80075ba <_printf_float+0x86>
 80075b4:	232d      	movs	r3, #45	@ 0x2d
 80075b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075ba:	4a91      	ldr	r2, [pc, #580]	@ (8007800 <_printf_float+0x2cc>)
 80075bc:	4b91      	ldr	r3, [pc, #580]	@ (8007804 <_printf_float+0x2d0>)
 80075be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80075c2:	bf8c      	ite	hi
 80075c4:	4690      	movhi	r8, r2
 80075c6:	4698      	movls	r8, r3
 80075c8:	2303      	movs	r3, #3
 80075ca:	6123      	str	r3, [r4, #16]
 80075cc:	f02b 0304 	bic.w	r3, fp, #4
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	f04f 0900 	mov.w	r9, #0
 80075d6:	9700      	str	r7, [sp, #0]
 80075d8:	4633      	mov	r3, r6
 80075da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80075dc:	4621      	mov	r1, r4
 80075de:	4628      	mov	r0, r5
 80075e0:	f000 f9d2 	bl	8007988 <_printf_common>
 80075e4:	3001      	adds	r0, #1
 80075e6:	f040 808d 	bne.w	8007704 <_printf_float+0x1d0>
 80075ea:	f04f 30ff 	mov.w	r0, #4294967295
 80075ee:	b00d      	add	sp, #52	@ 0x34
 80075f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f4:	4642      	mov	r2, r8
 80075f6:	464b      	mov	r3, r9
 80075f8:	4640      	mov	r0, r8
 80075fa:	4649      	mov	r1, r9
 80075fc:	f7f9 fa9e 	bl	8000b3c <__aeabi_dcmpun>
 8007600:	b140      	cbz	r0, 8007614 <_printf_float+0xe0>
 8007602:	464b      	mov	r3, r9
 8007604:	2b00      	cmp	r3, #0
 8007606:	bfbc      	itt	lt
 8007608:	232d      	movlt	r3, #45	@ 0x2d
 800760a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800760e:	4a7e      	ldr	r2, [pc, #504]	@ (8007808 <_printf_float+0x2d4>)
 8007610:	4b7e      	ldr	r3, [pc, #504]	@ (800780c <_printf_float+0x2d8>)
 8007612:	e7d4      	b.n	80075be <_printf_float+0x8a>
 8007614:	6863      	ldr	r3, [r4, #4]
 8007616:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800761a:	9206      	str	r2, [sp, #24]
 800761c:	1c5a      	adds	r2, r3, #1
 800761e:	d13b      	bne.n	8007698 <_printf_float+0x164>
 8007620:	2306      	movs	r3, #6
 8007622:	6063      	str	r3, [r4, #4]
 8007624:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007628:	2300      	movs	r3, #0
 800762a:	6022      	str	r2, [r4, #0]
 800762c:	9303      	str	r3, [sp, #12]
 800762e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007630:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007634:	ab09      	add	r3, sp, #36	@ 0x24
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	6861      	ldr	r1, [r4, #4]
 800763a:	ec49 8b10 	vmov	d0, r8, r9
 800763e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007642:	4628      	mov	r0, r5
 8007644:	f7ff fed6 	bl	80073f4 <__cvt>
 8007648:	9b06      	ldr	r3, [sp, #24]
 800764a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800764c:	2b47      	cmp	r3, #71	@ 0x47
 800764e:	4680      	mov	r8, r0
 8007650:	d129      	bne.n	80076a6 <_printf_float+0x172>
 8007652:	1cc8      	adds	r0, r1, #3
 8007654:	db02      	blt.n	800765c <_printf_float+0x128>
 8007656:	6863      	ldr	r3, [r4, #4]
 8007658:	4299      	cmp	r1, r3
 800765a:	dd41      	ble.n	80076e0 <_printf_float+0x1ac>
 800765c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007660:	fa5f fa8a 	uxtb.w	sl, sl
 8007664:	3901      	subs	r1, #1
 8007666:	4652      	mov	r2, sl
 8007668:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800766c:	9109      	str	r1, [sp, #36]	@ 0x24
 800766e:	f7ff ff26 	bl	80074be <__exponent>
 8007672:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007674:	1813      	adds	r3, r2, r0
 8007676:	2a01      	cmp	r2, #1
 8007678:	4681      	mov	r9, r0
 800767a:	6123      	str	r3, [r4, #16]
 800767c:	dc02      	bgt.n	8007684 <_printf_float+0x150>
 800767e:	6822      	ldr	r2, [r4, #0]
 8007680:	07d2      	lsls	r2, r2, #31
 8007682:	d501      	bpl.n	8007688 <_printf_float+0x154>
 8007684:	3301      	adds	r3, #1
 8007686:	6123      	str	r3, [r4, #16]
 8007688:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800768c:	2b00      	cmp	r3, #0
 800768e:	d0a2      	beq.n	80075d6 <_printf_float+0xa2>
 8007690:	232d      	movs	r3, #45	@ 0x2d
 8007692:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007696:	e79e      	b.n	80075d6 <_printf_float+0xa2>
 8007698:	9a06      	ldr	r2, [sp, #24]
 800769a:	2a47      	cmp	r2, #71	@ 0x47
 800769c:	d1c2      	bne.n	8007624 <_printf_float+0xf0>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1c0      	bne.n	8007624 <_printf_float+0xf0>
 80076a2:	2301      	movs	r3, #1
 80076a4:	e7bd      	b.n	8007622 <_printf_float+0xee>
 80076a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076aa:	d9db      	bls.n	8007664 <_printf_float+0x130>
 80076ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80076b0:	d118      	bne.n	80076e4 <_printf_float+0x1b0>
 80076b2:	2900      	cmp	r1, #0
 80076b4:	6863      	ldr	r3, [r4, #4]
 80076b6:	dd0b      	ble.n	80076d0 <_printf_float+0x19c>
 80076b8:	6121      	str	r1, [r4, #16]
 80076ba:	b913      	cbnz	r3, 80076c2 <_printf_float+0x18e>
 80076bc:	6822      	ldr	r2, [r4, #0]
 80076be:	07d0      	lsls	r0, r2, #31
 80076c0:	d502      	bpl.n	80076c8 <_printf_float+0x194>
 80076c2:	3301      	adds	r3, #1
 80076c4:	440b      	add	r3, r1
 80076c6:	6123      	str	r3, [r4, #16]
 80076c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80076ca:	f04f 0900 	mov.w	r9, #0
 80076ce:	e7db      	b.n	8007688 <_printf_float+0x154>
 80076d0:	b913      	cbnz	r3, 80076d8 <_printf_float+0x1a4>
 80076d2:	6822      	ldr	r2, [r4, #0]
 80076d4:	07d2      	lsls	r2, r2, #31
 80076d6:	d501      	bpl.n	80076dc <_printf_float+0x1a8>
 80076d8:	3302      	adds	r3, #2
 80076da:	e7f4      	b.n	80076c6 <_printf_float+0x192>
 80076dc:	2301      	movs	r3, #1
 80076de:	e7f2      	b.n	80076c6 <_printf_float+0x192>
 80076e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80076e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076e6:	4299      	cmp	r1, r3
 80076e8:	db05      	blt.n	80076f6 <_printf_float+0x1c2>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	6121      	str	r1, [r4, #16]
 80076ee:	07d8      	lsls	r0, r3, #31
 80076f0:	d5ea      	bpl.n	80076c8 <_printf_float+0x194>
 80076f2:	1c4b      	adds	r3, r1, #1
 80076f4:	e7e7      	b.n	80076c6 <_printf_float+0x192>
 80076f6:	2900      	cmp	r1, #0
 80076f8:	bfd4      	ite	le
 80076fa:	f1c1 0202 	rsble	r2, r1, #2
 80076fe:	2201      	movgt	r2, #1
 8007700:	4413      	add	r3, r2
 8007702:	e7e0      	b.n	80076c6 <_printf_float+0x192>
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	055a      	lsls	r2, r3, #21
 8007708:	d407      	bmi.n	800771a <_printf_float+0x1e6>
 800770a:	6923      	ldr	r3, [r4, #16]
 800770c:	4642      	mov	r2, r8
 800770e:	4631      	mov	r1, r6
 8007710:	4628      	mov	r0, r5
 8007712:	47b8      	blx	r7
 8007714:	3001      	adds	r0, #1
 8007716:	d12b      	bne.n	8007770 <_printf_float+0x23c>
 8007718:	e767      	b.n	80075ea <_printf_float+0xb6>
 800771a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800771e:	f240 80dd 	bls.w	80078dc <_printf_float+0x3a8>
 8007722:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007726:	2200      	movs	r2, #0
 8007728:	2300      	movs	r3, #0
 800772a:	f7f9 f9d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800772e:	2800      	cmp	r0, #0
 8007730:	d033      	beq.n	800779a <_printf_float+0x266>
 8007732:	4a37      	ldr	r2, [pc, #220]	@ (8007810 <_printf_float+0x2dc>)
 8007734:	2301      	movs	r3, #1
 8007736:	4631      	mov	r1, r6
 8007738:	4628      	mov	r0, r5
 800773a:	47b8      	blx	r7
 800773c:	3001      	adds	r0, #1
 800773e:	f43f af54 	beq.w	80075ea <_printf_float+0xb6>
 8007742:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007746:	4543      	cmp	r3, r8
 8007748:	db02      	blt.n	8007750 <_printf_float+0x21c>
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	07d8      	lsls	r0, r3, #31
 800774e:	d50f      	bpl.n	8007770 <_printf_float+0x23c>
 8007750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007754:	4631      	mov	r1, r6
 8007756:	4628      	mov	r0, r5
 8007758:	47b8      	blx	r7
 800775a:	3001      	adds	r0, #1
 800775c:	f43f af45 	beq.w	80075ea <_printf_float+0xb6>
 8007760:	f04f 0900 	mov.w	r9, #0
 8007764:	f108 38ff 	add.w	r8, r8, #4294967295
 8007768:	f104 0a1a 	add.w	sl, r4, #26
 800776c:	45c8      	cmp	r8, r9
 800776e:	dc09      	bgt.n	8007784 <_printf_float+0x250>
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	079b      	lsls	r3, r3, #30
 8007774:	f100 8103 	bmi.w	800797e <_printf_float+0x44a>
 8007778:	68e0      	ldr	r0, [r4, #12]
 800777a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800777c:	4298      	cmp	r0, r3
 800777e:	bfb8      	it	lt
 8007780:	4618      	movlt	r0, r3
 8007782:	e734      	b.n	80075ee <_printf_float+0xba>
 8007784:	2301      	movs	r3, #1
 8007786:	4652      	mov	r2, sl
 8007788:	4631      	mov	r1, r6
 800778a:	4628      	mov	r0, r5
 800778c:	47b8      	blx	r7
 800778e:	3001      	adds	r0, #1
 8007790:	f43f af2b 	beq.w	80075ea <_printf_float+0xb6>
 8007794:	f109 0901 	add.w	r9, r9, #1
 8007798:	e7e8      	b.n	800776c <_printf_float+0x238>
 800779a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800779c:	2b00      	cmp	r3, #0
 800779e:	dc39      	bgt.n	8007814 <_printf_float+0x2e0>
 80077a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007810 <_printf_float+0x2dc>)
 80077a2:	2301      	movs	r3, #1
 80077a4:	4631      	mov	r1, r6
 80077a6:	4628      	mov	r0, r5
 80077a8:	47b8      	blx	r7
 80077aa:	3001      	adds	r0, #1
 80077ac:	f43f af1d 	beq.w	80075ea <_printf_float+0xb6>
 80077b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80077b4:	ea59 0303 	orrs.w	r3, r9, r3
 80077b8:	d102      	bne.n	80077c0 <_printf_float+0x28c>
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	07d9      	lsls	r1, r3, #31
 80077be:	d5d7      	bpl.n	8007770 <_printf_float+0x23c>
 80077c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077c4:	4631      	mov	r1, r6
 80077c6:	4628      	mov	r0, r5
 80077c8:	47b8      	blx	r7
 80077ca:	3001      	adds	r0, #1
 80077cc:	f43f af0d 	beq.w	80075ea <_printf_float+0xb6>
 80077d0:	f04f 0a00 	mov.w	sl, #0
 80077d4:	f104 0b1a 	add.w	fp, r4, #26
 80077d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077da:	425b      	negs	r3, r3
 80077dc:	4553      	cmp	r3, sl
 80077de:	dc01      	bgt.n	80077e4 <_printf_float+0x2b0>
 80077e0:	464b      	mov	r3, r9
 80077e2:	e793      	b.n	800770c <_printf_float+0x1d8>
 80077e4:	2301      	movs	r3, #1
 80077e6:	465a      	mov	r2, fp
 80077e8:	4631      	mov	r1, r6
 80077ea:	4628      	mov	r0, r5
 80077ec:	47b8      	blx	r7
 80077ee:	3001      	adds	r0, #1
 80077f0:	f43f aefb 	beq.w	80075ea <_printf_float+0xb6>
 80077f4:	f10a 0a01 	add.w	sl, sl, #1
 80077f8:	e7ee      	b.n	80077d8 <_printf_float+0x2a4>
 80077fa:	bf00      	nop
 80077fc:	7fefffff 	.word	0x7fefffff
 8007800:	0800c1b8 	.word	0x0800c1b8
 8007804:	0800c1b4 	.word	0x0800c1b4
 8007808:	0800c1c0 	.word	0x0800c1c0
 800780c:	0800c1bc 	.word	0x0800c1bc
 8007810:	0800c1c4 	.word	0x0800c1c4
 8007814:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007816:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800781a:	4553      	cmp	r3, sl
 800781c:	bfa8      	it	ge
 800781e:	4653      	movge	r3, sl
 8007820:	2b00      	cmp	r3, #0
 8007822:	4699      	mov	r9, r3
 8007824:	dc36      	bgt.n	8007894 <_printf_float+0x360>
 8007826:	f04f 0b00 	mov.w	fp, #0
 800782a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800782e:	f104 021a 	add.w	r2, r4, #26
 8007832:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007834:	9306      	str	r3, [sp, #24]
 8007836:	eba3 0309 	sub.w	r3, r3, r9
 800783a:	455b      	cmp	r3, fp
 800783c:	dc31      	bgt.n	80078a2 <_printf_float+0x36e>
 800783e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007840:	459a      	cmp	sl, r3
 8007842:	dc3a      	bgt.n	80078ba <_printf_float+0x386>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	07da      	lsls	r2, r3, #31
 8007848:	d437      	bmi.n	80078ba <_printf_float+0x386>
 800784a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800784c:	ebaa 0903 	sub.w	r9, sl, r3
 8007850:	9b06      	ldr	r3, [sp, #24]
 8007852:	ebaa 0303 	sub.w	r3, sl, r3
 8007856:	4599      	cmp	r9, r3
 8007858:	bfa8      	it	ge
 800785a:	4699      	movge	r9, r3
 800785c:	f1b9 0f00 	cmp.w	r9, #0
 8007860:	dc33      	bgt.n	80078ca <_printf_float+0x396>
 8007862:	f04f 0800 	mov.w	r8, #0
 8007866:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800786a:	f104 0b1a 	add.w	fp, r4, #26
 800786e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007870:	ebaa 0303 	sub.w	r3, sl, r3
 8007874:	eba3 0309 	sub.w	r3, r3, r9
 8007878:	4543      	cmp	r3, r8
 800787a:	f77f af79 	ble.w	8007770 <_printf_float+0x23c>
 800787e:	2301      	movs	r3, #1
 8007880:	465a      	mov	r2, fp
 8007882:	4631      	mov	r1, r6
 8007884:	4628      	mov	r0, r5
 8007886:	47b8      	blx	r7
 8007888:	3001      	adds	r0, #1
 800788a:	f43f aeae 	beq.w	80075ea <_printf_float+0xb6>
 800788e:	f108 0801 	add.w	r8, r8, #1
 8007892:	e7ec      	b.n	800786e <_printf_float+0x33a>
 8007894:	4642      	mov	r2, r8
 8007896:	4631      	mov	r1, r6
 8007898:	4628      	mov	r0, r5
 800789a:	47b8      	blx	r7
 800789c:	3001      	adds	r0, #1
 800789e:	d1c2      	bne.n	8007826 <_printf_float+0x2f2>
 80078a0:	e6a3      	b.n	80075ea <_printf_float+0xb6>
 80078a2:	2301      	movs	r3, #1
 80078a4:	4631      	mov	r1, r6
 80078a6:	4628      	mov	r0, r5
 80078a8:	9206      	str	r2, [sp, #24]
 80078aa:	47b8      	blx	r7
 80078ac:	3001      	adds	r0, #1
 80078ae:	f43f ae9c 	beq.w	80075ea <_printf_float+0xb6>
 80078b2:	9a06      	ldr	r2, [sp, #24]
 80078b4:	f10b 0b01 	add.w	fp, fp, #1
 80078b8:	e7bb      	b.n	8007832 <_printf_float+0x2fe>
 80078ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078be:	4631      	mov	r1, r6
 80078c0:	4628      	mov	r0, r5
 80078c2:	47b8      	blx	r7
 80078c4:	3001      	adds	r0, #1
 80078c6:	d1c0      	bne.n	800784a <_printf_float+0x316>
 80078c8:	e68f      	b.n	80075ea <_printf_float+0xb6>
 80078ca:	9a06      	ldr	r2, [sp, #24]
 80078cc:	464b      	mov	r3, r9
 80078ce:	4442      	add	r2, r8
 80078d0:	4631      	mov	r1, r6
 80078d2:	4628      	mov	r0, r5
 80078d4:	47b8      	blx	r7
 80078d6:	3001      	adds	r0, #1
 80078d8:	d1c3      	bne.n	8007862 <_printf_float+0x32e>
 80078da:	e686      	b.n	80075ea <_printf_float+0xb6>
 80078dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078e0:	f1ba 0f01 	cmp.w	sl, #1
 80078e4:	dc01      	bgt.n	80078ea <_printf_float+0x3b6>
 80078e6:	07db      	lsls	r3, r3, #31
 80078e8:	d536      	bpl.n	8007958 <_printf_float+0x424>
 80078ea:	2301      	movs	r3, #1
 80078ec:	4642      	mov	r2, r8
 80078ee:	4631      	mov	r1, r6
 80078f0:	4628      	mov	r0, r5
 80078f2:	47b8      	blx	r7
 80078f4:	3001      	adds	r0, #1
 80078f6:	f43f ae78 	beq.w	80075ea <_printf_float+0xb6>
 80078fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078fe:	4631      	mov	r1, r6
 8007900:	4628      	mov	r0, r5
 8007902:	47b8      	blx	r7
 8007904:	3001      	adds	r0, #1
 8007906:	f43f ae70 	beq.w	80075ea <_printf_float+0xb6>
 800790a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800790e:	2200      	movs	r2, #0
 8007910:	2300      	movs	r3, #0
 8007912:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007916:	f7f9 f8df 	bl	8000ad8 <__aeabi_dcmpeq>
 800791a:	b9c0      	cbnz	r0, 800794e <_printf_float+0x41a>
 800791c:	4653      	mov	r3, sl
 800791e:	f108 0201 	add.w	r2, r8, #1
 8007922:	4631      	mov	r1, r6
 8007924:	4628      	mov	r0, r5
 8007926:	47b8      	blx	r7
 8007928:	3001      	adds	r0, #1
 800792a:	d10c      	bne.n	8007946 <_printf_float+0x412>
 800792c:	e65d      	b.n	80075ea <_printf_float+0xb6>
 800792e:	2301      	movs	r3, #1
 8007930:	465a      	mov	r2, fp
 8007932:	4631      	mov	r1, r6
 8007934:	4628      	mov	r0, r5
 8007936:	47b8      	blx	r7
 8007938:	3001      	adds	r0, #1
 800793a:	f43f ae56 	beq.w	80075ea <_printf_float+0xb6>
 800793e:	f108 0801 	add.w	r8, r8, #1
 8007942:	45d0      	cmp	r8, sl
 8007944:	dbf3      	blt.n	800792e <_printf_float+0x3fa>
 8007946:	464b      	mov	r3, r9
 8007948:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800794c:	e6df      	b.n	800770e <_printf_float+0x1da>
 800794e:	f04f 0800 	mov.w	r8, #0
 8007952:	f104 0b1a 	add.w	fp, r4, #26
 8007956:	e7f4      	b.n	8007942 <_printf_float+0x40e>
 8007958:	2301      	movs	r3, #1
 800795a:	4642      	mov	r2, r8
 800795c:	e7e1      	b.n	8007922 <_printf_float+0x3ee>
 800795e:	2301      	movs	r3, #1
 8007960:	464a      	mov	r2, r9
 8007962:	4631      	mov	r1, r6
 8007964:	4628      	mov	r0, r5
 8007966:	47b8      	blx	r7
 8007968:	3001      	adds	r0, #1
 800796a:	f43f ae3e 	beq.w	80075ea <_printf_float+0xb6>
 800796e:	f108 0801 	add.w	r8, r8, #1
 8007972:	68e3      	ldr	r3, [r4, #12]
 8007974:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007976:	1a5b      	subs	r3, r3, r1
 8007978:	4543      	cmp	r3, r8
 800797a:	dcf0      	bgt.n	800795e <_printf_float+0x42a>
 800797c:	e6fc      	b.n	8007778 <_printf_float+0x244>
 800797e:	f04f 0800 	mov.w	r8, #0
 8007982:	f104 0919 	add.w	r9, r4, #25
 8007986:	e7f4      	b.n	8007972 <_printf_float+0x43e>

08007988 <_printf_common>:
 8007988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800798c:	4616      	mov	r6, r2
 800798e:	4698      	mov	r8, r3
 8007990:	688a      	ldr	r2, [r1, #8]
 8007992:	690b      	ldr	r3, [r1, #16]
 8007994:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007998:	4293      	cmp	r3, r2
 800799a:	bfb8      	it	lt
 800799c:	4613      	movlt	r3, r2
 800799e:	6033      	str	r3, [r6, #0]
 80079a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079a4:	4607      	mov	r7, r0
 80079a6:	460c      	mov	r4, r1
 80079a8:	b10a      	cbz	r2, 80079ae <_printf_common+0x26>
 80079aa:	3301      	adds	r3, #1
 80079ac:	6033      	str	r3, [r6, #0]
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	0699      	lsls	r1, r3, #26
 80079b2:	bf42      	ittt	mi
 80079b4:	6833      	ldrmi	r3, [r6, #0]
 80079b6:	3302      	addmi	r3, #2
 80079b8:	6033      	strmi	r3, [r6, #0]
 80079ba:	6825      	ldr	r5, [r4, #0]
 80079bc:	f015 0506 	ands.w	r5, r5, #6
 80079c0:	d106      	bne.n	80079d0 <_printf_common+0x48>
 80079c2:	f104 0a19 	add.w	sl, r4, #25
 80079c6:	68e3      	ldr	r3, [r4, #12]
 80079c8:	6832      	ldr	r2, [r6, #0]
 80079ca:	1a9b      	subs	r3, r3, r2
 80079cc:	42ab      	cmp	r3, r5
 80079ce:	dc26      	bgt.n	8007a1e <_printf_common+0x96>
 80079d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80079d4:	6822      	ldr	r2, [r4, #0]
 80079d6:	3b00      	subs	r3, #0
 80079d8:	bf18      	it	ne
 80079da:	2301      	movne	r3, #1
 80079dc:	0692      	lsls	r2, r2, #26
 80079de:	d42b      	bmi.n	8007a38 <_printf_common+0xb0>
 80079e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80079e4:	4641      	mov	r1, r8
 80079e6:	4638      	mov	r0, r7
 80079e8:	47c8      	blx	r9
 80079ea:	3001      	adds	r0, #1
 80079ec:	d01e      	beq.n	8007a2c <_printf_common+0xa4>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	6922      	ldr	r2, [r4, #16]
 80079f2:	f003 0306 	and.w	r3, r3, #6
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	bf02      	ittt	eq
 80079fa:	68e5      	ldreq	r5, [r4, #12]
 80079fc:	6833      	ldreq	r3, [r6, #0]
 80079fe:	1aed      	subeq	r5, r5, r3
 8007a00:	68a3      	ldr	r3, [r4, #8]
 8007a02:	bf0c      	ite	eq
 8007a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a08:	2500      	movne	r5, #0
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	bfc4      	itt	gt
 8007a0e:	1a9b      	subgt	r3, r3, r2
 8007a10:	18ed      	addgt	r5, r5, r3
 8007a12:	2600      	movs	r6, #0
 8007a14:	341a      	adds	r4, #26
 8007a16:	42b5      	cmp	r5, r6
 8007a18:	d11a      	bne.n	8007a50 <_printf_common+0xc8>
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	e008      	b.n	8007a30 <_printf_common+0xa8>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	4652      	mov	r2, sl
 8007a22:	4641      	mov	r1, r8
 8007a24:	4638      	mov	r0, r7
 8007a26:	47c8      	blx	r9
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d103      	bne.n	8007a34 <_printf_common+0xac>
 8007a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a34:	3501      	adds	r5, #1
 8007a36:	e7c6      	b.n	80079c6 <_printf_common+0x3e>
 8007a38:	18e1      	adds	r1, r4, r3
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	2030      	movs	r0, #48	@ 0x30
 8007a3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a42:	4422      	add	r2, r4
 8007a44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a4c:	3302      	adds	r3, #2
 8007a4e:	e7c7      	b.n	80079e0 <_printf_common+0x58>
 8007a50:	2301      	movs	r3, #1
 8007a52:	4622      	mov	r2, r4
 8007a54:	4641      	mov	r1, r8
 8007a56:	4638      	mov	r0, r7
 8007a58:	47c8      	blx	r9
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	d0e6      	beq.n	8007a2c <_printf_common+0xa4>
 8007a5e:	3601      	adds	r6, #1
 8007a60:	e7d9      	b.n	8007a16 <_printf_common+0x8e>
	...

08007a64 <_printf_i>:
 8007a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a68:	7e0f      	ldrb	r7, [r1, #24]
 8007a6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a6c:	2f78      	cmp	r7, #120	@ 0x78
 8007a6e:	4691      	mov	r9, r2
 8007a70:	4680      	mov	r8, r0
 8007a72:	460c      	mov	r4, r1
 8007a74:	469a      	mov	sl, r3
 8007a76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a7a:	d807      	bhi.n	8007a8c <_printf_i+0x28>
 8007a7c:	2f62      	cmp	r7, #98	@ 0x62
 8007a7e:	d80a      	bhi.n	8007a96 <_printf_i+0x32>
 8007a80:	2f00      	cmp	r7, #0
 8007a82:	f000 80d1 	beq.w	8007c28 <_printf_i+0x1c4>
 8007a86:	2f58      	cmp	r7, #88	@ 0x58
 8007a88:	f000 80b8 	beq.w	8007bfc <_printf_i+0x198>
 8007a8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a94:	e03a      	b.n	8007b0c <_printf_i+0xa8>
 8007a96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a9a:	2b15      	cmp	r3, #21
 8007a9c:	d8f6      	bhi.n	8007a8c <_printf_i+0x28>
 8007a9e:	a101      	add	r1, pc, #4	@ (adr r1, 8007aa4 <_printf_i+0x40>)
 8007aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007aa4:	08007afd 	.word	0x08007afd
 8007aa8:	08007b11 	.word	0x08007b11
 8007aac:	08007a8d 	.word	0x08007a8d
 8007ab0:	08007a8d 	.word	0x08007a8d
 8007ab4:	08007a8d 	.word	0x08007a8d
 8007ab8:	08007a8d 	.word	0x08007a8d
 8007abc:	08007b11 	.word	0x08007b11
 8007ac0:	08007a8d 	.word	0x08007a8d
 8007ac4:	08007a8d 	.word	0x08007a8d
 8007ac8:	08007a8d 	.word	0x08007a8d
 8007acc:	08007a8d 	.word	0x08007a8d
 8007ad0:	08007c0f 	.word	0x08007c0f
 8007ad4:	08007b3b 	.word	0x08007b3b
 8007ad8:	08007bc9 	.word	0x08007bc9
 8007adc:	08007a8d 	.word	0x08007a8d
 8007ae0:	08007a8d 	.word	0x08007a8d
 8007ae4:	08007c31 	.word	0x08007c31
 8007ae8:	08007a8d 	.word	0x08007a8d
 8007aec:	08007b3b 	.word	0x08007b3b
 8007af0:	08007a8d 	.word	0x08007a8d
 8007af4:	08007a8d 	.word	0x08007a8d
 8007af8:	08007bd1 	.word	0x08007bd1
 8007afc:	6833      	ldr	r3, [r6, #0]
 8007afe:	1d1a      	adds	r2, r3, #4
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6032      	str	r2, [r6, #0]
 8007b04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e09c      	b.n	8007c4a <_printf_i+0x1e6>
 8007b10:	6833      	ldr	r3, [r6, #0]
 8007b12:	6820      	ldr	r0, [r4, #0]
 8007b14:	1d19      	adds	r1, r3, #4
 8007b16:	6031      	str	r1, [r6, #0]
 8007b18:	0606      	lsls	r6, r0, #24
 8007b1a:	d501      	bpl.n	8007b20 <_printf_i+0xbc>
 8007b1c:	681d      	ldr	r5, [r3, #0]
 8007b1e:	e003      	b.n	8007b28 <_printf_i+0xc4>
 8007b20:	0645      	lsls	r5, r0, #25
 8007b22:	d5fb      	bpl.n	8007b1c <_printf_i+0xb8>
 8007b24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b28:	2d00      	cmp	r5, #0
 8007b2a:	da03      	bge.n	8007b34 <_printf_i+0xd0>
 8007b2c:	232d      	movs	r3, #45	@ 0x2d
 8007b2e:	426d      	negs	r5, r5
 8007b30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b34:	4858      	ldr	r0, [pc, #352]	@ (8007c98 <_printf_i+0x234>)
 8007b36:	230a      	movs	r3, #10
 8007b38:	e011      	b.n	8007b5e <_printf_i+0xfa>
 8007b3a:	6821      	ldr	r1, [r4, #0]
 8007b3c:	6833      	ldr	r3, [r6, #0]
 8007b3e:	0608      	lsls	r0, r1, #24
 8007b40:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b44:	d402      	bmi.n	8007b4c <_printf_i+0xe8>
 8007b46:	0649      	lsls	r1, r1, #25
 8007b48:	bf48      	it	mi
 8007b4a:	b2ad      	uxthmi	r5, r5
 8007b4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b4e:	4852      	ldr	r0, [pc, #328]	@ (8007c98 <_printf_i+0x234>)
 8007b50:	6033      	str	r3, [r6, #0]
 8007b52:	bf14      	ite	ne
 8007b54:	230a      	movne	r3, #10
 8007b56:	2308      	moveq	r3, #8
 8007b58:	2100      	movs	r1, #0
 8007b5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b5e:	6866      	ldr	r6, [r4, #4]
 8007b60:	60a6      	str	r6, [r4, #8]
 8007b62:	2e00      	cmp	r6, #0
 8007b64:	db05      	blt.n	8007b72 <_printf_i+0x10e>
 8007b66:	6821      	ldr	r1, [r4, #0]
 8007b68:	432e      	orrs	r6, r5
 8007b6a:	f021 0104 	bic.w	r1, r1, #4
 8007b6e:	6021      	str	r1, [r4, #0]
 8007b70:	d04b      	beq.n	8007c0a <_printf_i+0x1a6>
 8007b72:	4616      	mov	r6, r2
 8007b74:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b78:	fb03 5711 	mls	r7, r3, r1, r5
 8007b7c:	5dc7      	ldrb	r7, [r0, r7]
 8007b7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b82:	462f      	mov	r7, r5
 8007b84:	42bb      	cmp	r3, r7
 8007b86:	460d      	mov	r5, r1
 8007b88:	d9f4      	bls.n	8007b74 <_printf_i+0x110>
 8007b8a:	2b08      	cmp	r3, #8
 8007b8c:	d10b      	bne.n	8007ba6 <_printf_i+0x142>
 8007b8e:	6823      	ldr	r3, [r4, #0]
 8007b90:	07df      	lsls	r7, r3, #31
 8007b92:	d508      	bpl.n	8007ba6 <_printf_i+0x142>
 8007b94:	6923      	ldr	r3, [r4, #16]
 8007b96:	6861      	ldr	r1, [r4, #4]
 8007b98:	4299      	cmp	r1, r3
 8007b9a:	bfde      	ittt	le
 8007b9c:	2330      	movle	r3, #48	@ 0x30
 8007b9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ba2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ba6:	1b92      	subs	r2, r2, r6
 8007ba8:	6122      	str	r2, [r4, #16]
 8007baa:	f8cd a000 	str.w	sl, [sp]
 8007bae:	464b      	mov	r3, r9
 8007bb0:	aa03      	add	r2, sp, #12
 8007bb2:	4621      	mov	r1, r4
 8007bb4:	4640      	mov	r0, r8
 8007bb6:	f7ff fee7 	bl	8007988 <_printf_common>
 8007bba:	3001      	adds	r0, #1
 8007bbc:	d14a      	bne.n	8007c54 <_printf_i+0x1f0>
 8007bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc2:	b004      	add	sp, #16
 8007bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	f043 0320 	orr.w	r3, r3, #32
 8007bce:	6023      	str	r3, [r4, #0]
 8007bd0:	4832      	ldr	r0, [pc, #200]	@ (8007c9c <_printf_i+0x238>)
 8007bd2:	2778      	movs	r7, #120	@ 0x78
 8007bd4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	6831      	ldr	r1, [r6, #0]
 8007bdc:	061f      	lsls	r7, r3, #24
 8007bde:	f851 5b04 	ldr.w	r5, [r1], #4
 8007be2:	d402      	bmi.n	8007bea <_printf_i+0x186>
 8007be4:	065f      	lsls	r7, r3, #25
 8007be6:	bf48      	it	mi
 8007be8:	b2ad      	uxthmi	r5, r5
 8007bea:	6031      	str	r1, [r6, #0]
 8007bec:	07d9      	lsls	r1, r3, #31
 8007bee:	bf44      	itt	mi
 8007bf0:	f043 0320 	orrmi.w	r3, r3, #32
 8007bf4:	6023      	strmi	r3, [r4, #0]
 8007bf6:	b11d      	cbz	r5, 8007c00 <_printf_i+0x19c>
 8007bf8:	2310      	movs	r3, #16
 8007bfa:	e7ad      	b.n	8007b58 <_printf_i+0xf4>
 8007bfc:	4826      	ldr	r0, [pc, #152]	@ (8007c98 <_printf_i+0x234>)
 8007bfe:	e7e9      	b.n	8007bd4 <_printf_i+0x170>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	f023 0320 	bic.w	r3, r3, #32
 8007c06:	6023      	str	r3, [r4, #0]
 8007c08:	e7f6      	b.n	8007bf8 <_printf_i+0x194>
 8007c0a:	4616      	mov	r6, r2
 8007c0c:	e7bd      	b.n	8007b8a <_printf_i+0x126>
 8007c0e:	6833      	ldr	r3, [r6, #0]
 8007c10:	6825      	ldr	r5, [r4, #0]
 8007c12:	6961      	ldr	r1, [r4, #20]
 8007c14:	1d18      	adds	r0, r3, #4
 8007c16:	6030      	str	r0, [r6, #0]
 8007c18:	062e      	lsls	r6, r5, #24
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	d501      	bpl.n	8007c22 <_printf_i+0x1be>
 8007c1e:	6019      	str	r1, [r3, #0]
 8007c20:	e002      	b.n	8007c28 <_printf_i+0x1c4>
 8007c22:	0668      	lsls	r0, r5, #25
 8007c24:	d5fb      	bpl.n	8007c1e <_printf_i+0x1ba>
 8007c26:	8019      	strh	r1, [r3, #0]
 8007c28:	2300      	movs	r3, #0
 8007c2a:	6123      	str	r3, [r4, #16]
 8007c2c:	4616      	mov	r6, r2
 8007c2e:	e7bc      	b.n	8007baa <_printf_i+0x146>
 8007c30:	6833      	ldr	r3, [r6, #0]
 8007c32:	1d1a      	adds	r2, r3, #4
 8007c34:	6032      	str	r2, [r6, #0]
 8007c36:	681e      	ldr	r6, [r3, #0]
 8007c38:	6862      	ldr	r2, [r4, #4]
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7f8 facf 	bl	80001e0 <memchr>
 8007c42:	b108      	cbz	r0, 8007c48 <_printf_i+0x1e4>
 8007c44:	1b80      	subs	r0, r0, r6
 8007c46:	6060      	str	r0, [r4, #4]
 8007c48:	6863      	ldr	r3, [r4, #4]
 8007c4a:	6123      	str	r3, [r4, #16]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c52:	e7aa      	b.n	8007baa <_printf_i+0x146>
 8007c54:	6923      	ldr	r3, [r4, #16]
 8007c56:	4632      	mov	r2, r6
 8007c58:	4649      	mov	r1, r9
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	47d0      	blx	sl
 8007c5e:	3001      	adds	r0, #1
 8007c60:	d0ad      	beq.n	8007bbe <_printf_i+0x15a>
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	079b      	lsls	r3, r3, #30
 8007c66:	d413      	bmi.n	8007c90 <_printf_i+0x22c>
 8007c68:	68e0      	ldr	r0, [r4, #12]
 8007c6a:	9b03      	ldr	r3, [sp, #12]
 8007c6c:	4298      	cmp	r0, r3
 8007c6e:	bfb8      	it	lt
 8007c70:	4618      	movlt	r0, r3
 8007c72:	e7a6      	b.n	8007bc2 <_printf_i+0x15e>
 8007c74:	2301      	movs	r3, #1
 8007c76:	4632      	mov	r2, r6
 8007c78:	4649      	mov	r1, r9
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	47d0      	blx	sl
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d09d      	beq.n	8007bbe <_printf_i+0x15a>
 8007c82:	3501      	adds	r5, #1
 8007c84:	68e3      	ldr	r3, [r4, #12]
 8007c86:	9903      	ldr	r1, [sp, #12]
 8007c88:	1a5b      	subs	r3, r3, r1
 8007c8a:	42ab      	cmp	r3, r5
 8007c8c:	dcf2      	bgt.n	8007c74 <_printf_i+0x210>
 8007c8e:	e7eb      	b.n	8007c68 <_printf_i+0x204>
 8007c90:	2500      	movs	r5, #0
 8007c92:	f104 0619 	add.w	r6, r4, #25
 8007c96:	e7f5      	b.n	8007c84 <_printf_i+0x220>
 8007c98:	0800c1c6 	.word	0x0800c1c6
 8007c9c:	0800c1d7 	.word	0x0800c1d7

08007ca0 <_scanf_float>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	b087      	sub	sp, #28
 8007ca6:	4691      	mov	r9, r2
 8007ca8:	9303      	str	r3, [sp, #12]
 8007caa:	688b      	ldr	r3, [r1, #8]
 8007cac:	1e5a      	subs	r2, r3, #1
 8007cae:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007cb2:	bf81      	itttt	hi
 8007cb4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007cb8:	eb03 0b05 	addhi.w	fp, r3, r5
 8007cbc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007cc0:	608b      	strhi	r3, [r1, #8]
 8007cc2:	680b      	ldr	r3, [r1, #0]
 8007cc4:	460a      	mov	r2, r1
 8007cc6:	f04f 0500 	mov.w	r5, #0
 8007cca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007cce:	f842 3b1c 	str.w	r3, [r2], #28
 8007cd2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007cd6:	4680      	mov	r8, r0
 8007cd8:	460c      	mov	r4, r1
 8007cda:	bf98      	it	ls
 8007cdc:	f04f 0b00 	movls.w	fp, #0
 8007ce0:	9201      	str	r2, [sp, #4]
 8007ce2:	4616      	mov	r6, r2
 8007ce4:	46aa      	mov	sl, r5
 8007ce6:	462f      	mov	r7, r5
 8007ce8:	9502      	str	r5, [sp, #8]
 8007cea:	68a2      	ldr	r2, [r4, #8]
 8007cec:	b15a      	cbz	r2, 8007d06 <_scanf_float+0x66>
 8007cee:	f8d9 3000 	ldr.w	r3, [r9]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b4e      	cmp	r3, #78	@ 0x4e
 8007cf6:	d863      	bhi.n	8007dc0 <_scanf_float+0x120>
 8007cf8:	2b40      	cmp	r3, #64	@ 0x40
 8007cfa:	d83b      	bhi.n	8007d74 <_scanf_float+0xd4>
 8007cfc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007d00:	b2c8      	uxtb	r0, r1
 8007d02:	280e      	cmp	r0, #14
 8007d04:	d939      	bls.n	8007d7a <_scanf_float+0xda>
 8007d06:	b11f      	cbz	r7, 8007d10 <_scanf_float+0x70>
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d0e:	6023      	str	r3, [r4, #0]
 8007d10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d14:	f1ba 0f01 	cmp.w	sl, #1
 8007d18:	f200 8114 	bhi.w	8007f44 <_scanf_float+0x2a4>
 8007d1c:	9b01      	ldr	r3, [sp, #4]
 8007d1e:	429e      	cmp	r6, r3
 8007d20:	f200 8105 	bhi.w	8007f2e <_scanf_float+0x28e>
 8007d24:	2001      	movs	r0, #1
 8007d26:	b007      	add	sp, #28
 8007d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d2c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007d30:	2a0d      	cmp	r2, #13
 8007d32:	d8e8      	bhi.n	8007d06 <_scanf_float+0x66>
 8007d34:	a101      	add	r1, pc, #4	@ (adr r1, 8007d3c <_scanf_float+0x9c>)
 8007d36:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d3a:	bf00      	nop
 8007d3c:	08007e85 	.word	0x08007e85
 8007d40:	08007d07 	.word	0x08007d07
 8007d44:	08007d07 	.word	0x08007d07
 8007d48:	08007d07 	.word	0x08007d07
 8007d4c:	08007ee1 	.word	0x08007ee1
 8007d50:	08007ebb 	.word	0x08007ebb
 8007d54:	08007d07 	.word	0x08007d07
 8007d58:	08007d07 	.word	0x08007d07
 8007d5c:	08007e93 	.word	0x08007e93
 8007d60:	08007d07 	.word	0x08007d07
 8007d64:	08007d07 	.word	0x08007d07
 8007d68:	08007d07 	.word	0x08007d07
 8007d6c:	08007d07 	.word	0x08007d07
 8007d70:	08007e4f 	.word	0x08007e4f
 8007d74:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007d78:	e7da      	b.n	8007d30 <_scanf_float+0x90>
 8007d7a:	290e      	cmp	r1, #14
 8007d7c:	d8c3      	bhi.n	8007d06 <_scanf_float+0x66>
 8007d7e:	a001      	add	r0, pc, #4	@ (adr r0, 8007d84 <_scanf_float+0xe4>)
 8007d80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007d84:	08007e3f 	.word	0x08007e3f
 8007d88:	08007d07 	.word	0x08007d07
 8007d8c:	08007e3f 	.word	0x08007e3f
 8007d90:	08007ecf 	.word	0x08007ecf
 8007d94:	08007d07 	.word	0x08007d07
 8007d98:	08007de1 	.word	0x08007de1
 8007d9c:	08007e25 	.word	0x08007e25
 8007da0:	08007e25 	.word	0x08007e25
 8007da4:	08007e25 	.word	0x08007e25
 8007da8:	08007e25 	.word	0x08007e25
 8007dac:	08007e25 	.word	0x08007e25
 8007db0:	08007e25 	.word	0x08007e25
 8007db4:	08007e25 	.word	0x08007e25
 8007db8:	08007e25 	.word	0x08007e25
 8007dbc:	08007e25 	.word	0x08007e25
 8007dc0:	2b6e      	cmp	r3, #110	@ 0x6e
 8007dc2:	d809      	bhi.n	8007dd8 <_scanf_float+0x138>
 8007dc4:	2b60      	cmp	r3, #96	@ 0x60
 8007dc6:	d8b1      	bhi.n	8007d2c <_scanf_float+0x8c>
 8007dc8:	2b54      	cmp	r3, #84	@ 0x54
 8007dca:	d07b      	beq.n	8007ec4 <_scanf_float+0x224>
 8007dcc:	2b59      	cmp	r3, #89	@ 0x59
 8007dce:	d19a      	bne.n	8007d06 <_scanf_float+0x66>
 8007dd0:	2d07      	cmp	r5, #7
 8007dd2:	d198      	bne.n	8007d06 <_scanf_float+0x66>
 8007dd4:	2508      	movs	r5, #8
 8007dd6:	e02f      	b.n	8007e38 <_scanf_float+0x198>
 8007dd8:	2b74      	cmp	r3, #116	@ 0x74
 8007dda:	d073      	beq.n	8007ec4 <_scanf_float+0x224>
 8007ddc:	2b79      	cmp	r3, #121	@ 0x79
 8007dde:	e7f6      	b.n	8007dce <_scanf_float+0x12e>
 8007de0:	6821      	ldr	r1, [r4, #0]
 8007de2:	05c8      	lsls	r0, r1, #23
 8007de4:	d51e      	bpl.n	8007e24 <_scanf_float+0x184>
 8007de6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007dea:	6021      	str	r1, [r4, #0]
 8007dec:	3701      	adds	r7, #1
 8007dee:	f1bb 0f00 	cmp.w	fp, #0
 8007df2:	d003      	beq.n	8007dfc <_scanf_float+0x15c>
 8007df4:	3201      	adds	r2, #1
 8007df6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007dfa:	60a2      	str	r2, [r4, #8]
 8007dfc:	68a3      	ldr	r3, [r4, #8]
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	60a3      	str	r3, [r4, #8]
 8007e02:	6923      	ldr	r3, [r4, #16]
 8007e04:	3301      	adds	r3, #1
 8007e06:	6123      	str	r3, [r4, #16]
 8007e08:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f8c9 3004 	str.w	r3, [r9, #4]
 8007e14:	f340 8082 	ble.w	8007f1c <_scanf_float+0x27c>
 8007e18:	f8d9 3000 	ldr.w	r3, [r9]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	f8c9 3000 	str.w	r3, [r9]
 8007e22:	e762      	b.n	8007cea <_scanf_float+0x4a>
 8007e24:	eb1a 0105 	adds.w	r1, sl, r5
 8007e28:	f47f af6d 	bne.w	8007d06 <_scanf_float+0x66>
 8007e2c:	6822      	ldr	r2, [r4, #0]
 8007e2e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007e32:	6022      	str	r2, [r4, #0]
 8007e34:	460d      	mov	r5, r1
 8007e36:	468a      	mov	sl, r1
 8007e38:	f806 3b01 	strb.w	r3, [r6], #1
 8007e3c:	e7de      	b.n	8007dfc <_scanf_float+0x15c>
 8007e3e:	6822      	ldr	r2, [r4, #0]
 8007e40:	0610      	lsls	r0, r2, #24
 8007e42:	f57f af60 	bpl.w	8007d06 <_scanf_float+0x66>
 8007e46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007e4a:	6022      	str	r2, [r4, #0]
 8007e4c:	e7f4      	b.n	8007e38 <_scanf_float+0x198>
 8007e4e:	f1ba 0f00 	cmp.w	sl, #0
 8007e52:	d10c      	bne.n	8007e6e <_scanf_float+0x1ce>
 8007e54:	b977      	cbnz	r7, 8007e74 <_scanf_float+0x1d4>
 8007e56:	6822      	ldr	r2, [r4, #0]
 8007e58:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007e5c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007e60:	d108      	bne.n	8007e74 <_scanf_float+0x1d4>
 8007e62:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007e66:	6022      	str	r2, [r4, #0]
 8007e68:	f04f 0a01 	mov.w	sl, #1
 8007e6c:	e7e4      	b.n	8007e38 <_scanf_float+0x198>
 8007e6e:	f1ba 0f02 	cmp.w	sl, #2
 8007e72:	d050      	beq.n	8007f16 <_scanf_float+0x276>
 8007e74:	2d01      	cmp	r5, #1
 8007e76:	d002      	beq.n	8007e7e <_scanf_float+0x1de>
 8007e78:	2d04      	cmp	r5, #4
 8007e7a:	f47f af44 	bne.w	8007d06 <_scanf_float+0x66>
 8007e7e:	3501      	adds	r5, #1
 8007e80:	b2ed      	uxtb	r5, r5
 8007e82:	e7d9      	b.n	8007e38 <_scanf_float+0x198>
 8007e84:	f1ba 0f01 	cmp.w	sl, #1
 8007e88:	f47f af3d 	bne.w	8007d06 <_scanf_float+0x66>
 8007e8c:	f04f 0a02 	mov.w	sl, #2
 8007e90:	e7d2      	b.n	8007e38 <_scanf_float+0x198>
 8007e92:	b975      	cbnz	r5, 8007eb2 <_scanf_float+0x212>
 8007e94:	2f00      	cmp	r7, #0
 8007e96:	f47f af37 	bne.w	8007d08 <_scanf_float+0x68>
 8007e9a:	6822      	ldr	r2, [r4, #0]
 8007e9c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007ea0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007ea4:	f040 8103 	bne.w	80080ae <_scanf_float+0x40e>
 8007ea8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007eac:	6022      	str	r2, [r4, #0]
 8007eae:	2501      	movs	r5, #1
 8007eb0:	e7c2      	b.n	8007e38 <_scanf_float+0x198>
 8007eb2:	2d03      	cmp	r5, #3
 8007eb4:	d0e3      	beq.n	8007e7e <_scanf_float+0x1de>
 8007eb6:	2d05      	cmp	r5, #5
 8007eb8:	e7df      	b.n	8007e7a <_scanf_float+0x1da>
 8007eba:	2d02      	cmp	r5, #2
 8007ebc:	f47f af23 	bne.w	8007d06 <_scanf_float+0x66>
 8007ec0:	2503      	movs	r5, #3
 8007ec2:	e7b9      	b.n	8007e38 <_scanf_float+0x198>
 8007ec4:	2d06      	cmp	r5, #6
 8007ec6:	f47f af1e 	bne.w	8007d06 <_scanf_float+0x66>
 8007eca:	2507      	movs	r5, #7
 8007ecc:	e7b4      	b.n	8007e38 <_scanf_float+0x198>
 8007ece:	6822      	ldr	r2, [r4, #0]
 8007ed0:	0591      	lsls	r1, r2, #22
 8007ed2:	f57f af18 	bpl.w	8007d06 <_scanf_float+0x66>
 8007ed6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007eda:	6022      	str	r2, [r4, #0]
 8007edc:	9702      	str	r7, [sp, #8]
 8007ede:	e7ab      	b.n	8007e38 <_scanf_float+0x198>
 8007ee0:	6822      	ldr	r2, [r4, #0]
 8007ee2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007ee6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007eea:	d005      	beq.n	8007ef8 <_scanf_float+0x258>
 8007eec:	0550      	lsls	r0, r2, #21
 8007eee:	f57f af0a 	bpl.w	8007d06 <_scanf_float+0x66>
 8007ef2:	2f00      	cmp	r7, #0
 8007ef4:	f000 80db 	beq.w	80080ae <_scanf_float+0x40e>
 8007ef8:	0591      	lsls	r1, r2, #22
 8007efa:	bf58      	it	pl
 8007efc:	9902      	ldrpl	r1, [sp, #8]
 8007efe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007f02:	bf58      	it	pl
 8007f04:	1a79      	subpl	r1, r7, r1
 8007f06:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007f0a:	bf58      	it	pl
 8007f0c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007f10:	6022      	str	r2, [r4, #0]
 8007f12:	2700      	movs	r7, #0
 8007f14:	e790      	b.n	8007e38 <_scanf_float+0x198>
 8007f16:	f04f 0a03 	mov.w	sl, #3
 8007f1a:	e78d      	b.n	8007e38 <_scanf_float+0x198>
 8007f1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007f20:	4649      	mov	r1, r9
 8007f22:	4640      	mov	r0, r8
 8007f24:	4798      	blx	r3
 8007f26:	2800      	cmp	r0, #0
 8007f28:	f43f aedf 	beq.w	8007cea <_scanf_float+0x4a>
 8007f2c:	e6eb      	b.n	8007d06 <_scanf_float+0x66>
 8007f2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f36:	464a      	mov	r2, r9
 8007f38:	4640      	mov	r0, r8
 8007f3a:	4798      	blx	r3
 8007f3c:	6923      	ldr	r3, [r4, #16]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	6123      	str	r3, [r4, #16]
 8007f42:	e6eb      	b.n	8007d1c <_scanf_float+0x7c>
 8007f44:	1e6b      	subs	r3, r5, #1
 8007f46:	2b06      	cmp	r3, #6
 8007f48:	d824      	bhi.n	8007f94 <_scanf_float+0x2f4>
 8007f4a:	2d02      	cmp	r5, #2
 8007f4c:	d836      	bhi.n	8007fbc <_scanf_float+0x31c>
 8007f4e:	9b01      	ldr	r3, [sp, #4]
 8007f50:	429e      	cmp	r6, r3
 8007f52:	f67f aee7 	bls.w	8007d24 <_scanf_float+0x84>
 8007f56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f5e:	464a      	mov	r2, r9
 8007f60:	4640      	mov	r0, r8
 8007f62:	4798      	blx	r3
 8007f64:	6923      	ldr	r3, [r4, #16]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	6123      	str	r3, [r4, #16]
 8007f6a:	e7f0      	b.n	8007f4e <_scanf_float+0x2ae>
 8007f6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f70:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007f74:	464a      	mov	r2, r9
 8007f76:	4640      	mov	r0, r8
 8007f78:	4798      	blx	r3
 8007f7a:	6923      	ldr	r3, [r4, #16]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	6123      	str	r3, [r4, #16]
 8007f80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f84:	fa5f fa8a 	uxtb.w	sl, sl
 8007f88:	f1ba 0f02 	cmp.w	sl, #2
 8007f8c:	d1ee      	bne.n	8007f6c <_scanf_float+0x2cc>
 8007f8e:	3d03      	subs	r5, #3
 8007f90:	b2ed      	uxtb	r5, r5
 8007f92:	1b76      	subs	r6, r6, r5
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	05da      	lsls	r2, r3, #23
 8007f98:	d530      	bpl.n	8007ffc <_scanf_float+0x35c>
 8007f9a:	055b      	lsls	r3, r3, #21
 8007f9c:	d511      	bpl.n	8007fc2 <_scanf_float+0x322>
 8007f9e:	9b01      	ldr	r3, [sp, #4]
 8007fa0:	429e      	cmp	r6, r3
 8007fa2:	f67f aebf 	bls.w	8007d24 <_scanf_float+0x84>
 8007fa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007faa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007fae:	464a      	mov	r2, r9
 8007fb0:	4640      	mov	r0, r8
 8007fb2:	4798      	blx	r3
 8007fb4:	6923      	ldr	r3, [r4, #16]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	6123      	str	r3, [r4, #16]
 8007fba:	e7f0      	b.n	8007f9e <_scanf_float+0x2fe>
 8007fbc:	46aa      	mov	sl, r5
 8007fbe:	46b3      	mov	fp, r6
 8007fc0:	e7de      	b.n	8007f80 <_scanf_float+0x2e0>
 8007fc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007fc6:	6923      	ldr	r3, [r4, #16]
 8007fc8:	2965      	cmp	r1, #101	@ 0x65
 8007fca:	f103 33ff 	add.w	r3, r3, #4294967295
 8007fce:	f106 35ff 	add.w	r5, r6, #4294967295
 8007fd2:	6123      	str	r3, [r4, #16]
 8007fd4:	d00c      	beq.n	8007ff0 <_scanf_float+0x350>
 8007fd6:	2945      	cmp	r1, #69	@ 0x45
 8007fd8:	d00a      	beq.n	8007ff0 <_scanf_float+0x350>
 8007fda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007fde:	464a      	mov	r2, r9
 8007fe0:	4640      	mov	r0, r8
 8007fe2:	4798      	blx	r3
 8007fe4:	6923      	ldr	r3, [r4, #16]
 8007fe6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	1eb5      	subs	r5, r6, #2
 8007fee:	6123      	str	r3, [r4, #16]
 8007ff0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ff4:	464a      	mov	r2, r9
 8007ff6:	4640      	mov	r0, r8
 8007ff8:	4798      	blx	r3
 8007ffa:	462e      	mov	r6, r5
 8007ffc:	6822      	ldr	r2, [r4, #0]
 8007ffe:	f012 0210 	ands.w	r2, r2, #16
 8008002:	d001      	beq.n	8008008 <_scanf_float+0x368>
 8008004:	2000      	movs	r0, #0
 8008006:	e68e      	b.n	8007d26 <_scanf_float+0x86>
 8008008:	7032      	strb	r2, [r6, #0]
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008014:	d125      	bne.n	8008062 <_scanf_float+0x3c2>
 8008016:	9b02      	ldr	r3, [sp, #8]
 8008018:	429f      	cmp	r7, r3
 800801a:	d00a      	beq.n	8008032 <_scanf_float+0x392>
 800801c:	1bda      	subs	r2, r3, r7
 800801e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008022:	429e      	cmp	r6, r3
 8008024:	bf28      	it	cs
 8008026:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800802a:	4922      	ldr	r1, [pc, #136]	@ (80080b4 <_scanf_float+0x414>)
 800802c:	4630      	mov	r0, r6
 800802e:	f000 f907 	bl	8008240 <siprintf>
 8008032:	9901      	ldr	r1, [sp, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	4640      	mov	r0, r8
 8008038:	f002 fc2e 	bl	800a898 <_strtod_r>
 800803c:	9b03      	ldr	r3, [sp, #12]
 800803e:	6821      	ldr	r1, [r4, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f011 0f02 	tst.w	r1, #2
 8008046:	ec57 6b10 	vmov	r6, r7, d0
 800804a:	f103 0204 	add.w	r2, r3, #4
 800804e:	d015      	beq.n	800807c <_scanf_float+0x3dc>
 8008050:	9903      	ldr	r1, [sp, #12]
 8008052:	600a      	str	r2, [r1, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	e9c3 6700 	strd	r6, r7, [r3]
 800805a:	68e3      	ldr	r3, [r4, #12]
 800805c:	3301      	adds	r3, #1
 800805e:	60e3      	str	r3, [r4, #12]
 8008060:	e7d0      	b.n	8008004 <_scanf_float+0x364>
 8008062:	9b04      	ldr	r3, [sp, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d0e4      	beq.n	8008032 <_scanf_float+0x392>
 8008068:	9905      	ldr	r1, [sp, #20]
 800806a:	230a      	movs	r3, #10
 800806c:	3101      	adds	r1, #1
 800806e:	4640      	mov	r0, r8
 8008070:	f002 fc92 	bl	800a998 <_strtol_r>
 8008074:	9b04      	ldr	r3, [sp, #16]
 8008076:	9e05      	ldr	r6, [sp, #20]
 8008078:	1ac2      	subs	r2, r0, r3
 800807a:	e7d0      	b.n	800801e <_scanf_float+0x37e>
 800807c:	f011 0f04 	tst.w	r1, #4
 8008080:	9903      	ldr	r1, [sp, #12]
 8008082:	600a      	str	r2, [r1, #0]
 8008084:	d1e6      	bne.n	8008054 <_scanf_float+0x3b4>
 8008086:	681d      	ldr	r5, [r3, #0]
 8008088:	4632      	mov	r2, r6
 800808a:	463b      	mov	r3, r7
 800808c:	4630      	mov	r0, r6
 800808e:	4639      	mov	r1, r7
 8008090:	f7f8 fd54 	bl	8000b3c <__aeabi_dcmpun>
 8008094:	b128      	cbz	r0, 80080a2 <_scanf_float+0x402>
 8008096:	4808      	ldr	r0, [pc, #32]	@ (80080b8 <_scanf_float+0x418>)
 8008098:	f000 f9f4 	bl	8008484 <nanf>
 800809c:	ed85 0a00 	vstr	s0, [r5]
 80080a0:	e7db      	b.n	800805a <_scanf_float+0x3ba>
 80080a2:	4630      	mov	r0, r6
 80080a4:	4639      	mov	r1, r7
 80080a6:	f7f8 fda7 	bl	8000bf8 <__aeabi_d2f>
 80080aa:	6028      	str	r0, [r5, #0]
 80080ac:	e7d5      	b.n	800805a <_scanf_float+0x3ba>
 80080ae:	2700      	movs	r7, #0
 80080b0:	e62e      	b.n	8007d10 <_scanf_float+0x70>
 80080b2:	bf00      	nop
 80080b4:	0800c1e8 	.word	0x0800c1e8
 80080b8:	0800c329 	.word	0x0800c329

080080bc <std>:
 80080bc:	2300      	movs	r3, #0
 80080be:	b510      	push	{r4, lr}
 80080c0:	4604      	mov	r4, r0
 80080c2:	e9c0 3300 	strd	r3, r3, [r0]
 80080c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080ca:	6083      	str	r3, [r0, #8]
 80080cc:	8181      	strh	r1, [r0, #12]
 80080ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80080d0:	81c2      	strh	r2, [r0, #14]
 80080d2:	6183      	str	r3, [r0, #24]
 80080d4:	4619      	mov	r1, r3
 80080d6:	2208      	movs	r2, #8
 80080d8:	305c      	adds	r0, #92	@ 0x5c
 80080da:	f000 f953 	bl	8008384 <memset>
 80080de:	4b0d      	ldr	r3, [pc, #52]	@ (8008114 <std+0x58>)
 80080e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80080e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008118 <std+0x5c>)
 80080e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080e6:	4b0d      	ldr	r3, [pc, #52]	@ (800811c <std+0x60>)
 80080e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008120 <std+0x64>)
 80080ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80080ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008124 <std+0x68>)
 80080f0:	6224      	str	r4, [r4, #32]
 80080f2:	429c      	cmp	r4, r3
 80080f4:	d006      	beq.n	8008104 <std+0x48>
 80080f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080fa:	4294      	cmp	r4, r2
 80080fc:	d002      	beq.n	8008104 <std+0x48>
 80080fe:	33d0      	adds	r3, #208	@ 0xd0
 8008100:	429c      	cmp	r4, r3
 8008102:	d105      	bne.n	8008110 <std+0x54>
 8008104:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800810c:	f000 b9b6 	b.w	800847c <__retarget_lock_init_recursive>
 8008110:	bd10      	pop	{r4, pc}
 8008112:	bf00      	nop
 8008114:	08008285 	.word	0x08008285
 8008118:	080082a7 	.word	0x080082a7
 800811c:	080082df 	.word	0x080082df
 8008120:	08008303 	.word	0x08008303
 8008124:	200005f8 	.word	0x200005f8

08008128 <stdio_exit_handler>:
 8008128:	4a02      	ldr	r2, [pc, #8]	@ (8008134 <stdio_exit_handler+0xc>)
 800812a:	4903      	ldr	r1, [pc, #12]	@ (8008138 <stdio_exit_handler+0x10>)
 800812c:	4803      	ldr	r0, [pc, #12]	@ (800813c <stdio_exit_handler+0x14>)
 800812e:	f000 b869 	b.w	8008204 <_fwalk_sglue>
 8008132:	bf00      	nop
 8008134:	20000024 	.word	0x20000024
 8008138:	0800ad55 	.word	0x0800ad55
 800813c:	20000034 	.word	0x20000034

08008140 <cleanup_stdio>:
 8008140:	6841      	ldr	r1, [r0, #4]
 8008142:	4b0c      	ldr	r3, [pc, #48]	@ (8008174 <cleanup_stdio+0x34>)
 8008144:	4299      	cmp	r1, r3
 8008146:	b510      	push	{r4, lr}
 8008148:	4604      	mov	r4, r0
 800814a:	d001      	beq.n	8008150 <cleanup_stdio+0x10>
 800814c:	f002 fe02 	bl	800ad54 <_fflush_r>
 8008150:	68a1      	ldr	r1, [r4, #8]
 8008152:	4b09      	ldr	r3, [pc, #36]	@ (8008178 <cleanup_stdio+0x38>)
 8008154:	4299      	cmp	r1, r3
 8008156:	d002      	beq.n	800815e <cleanup_stdio+0x1e>
 8008158:	4620      	mov	r0, r4
 800815a:	f002 fdfb 	bl	800ad54 <_fflush_r>
 800815e:	68e1      	ldr	r1, [r4, #12]
 8008160:	4b06      	ldr	r3, [pc, #24]	@ (800817c <cleanup_stdio+0x3c>)
 8008162:	4299      	cmp	r1, r3
 8008164:	d004      	beq.n	8008170 <cleanup_stdio+0x30>
 8008166:	4620      	mov	r0, r4
 8008168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800816c:	f002 bdf2 	b.w	800ad54 <_fflush_r>
 8008170:	bd10      	pop	{r4, pc}
 8008172:	bf00      	nop
 8008174:	200005f8 	.word	0x200005f8
 8008178:	20000660 	.word	0x20000660
 800817c:	200006c8 	.word	0x200006c8

08008180 <global_stdio_init.part.0>:
 8008180:	b510      	push	{r4, lr}
 8008182:	4b0b      	ldr	r3, [pc, #44]	@ (80081b0 <global_stdio_init.part.0+0x30>)
 8008184:	4c0b      	ldr	r4, [pc, #44]	@ (80081b4 <global_stdio_init.part.0+0x34>)
 8008186:	4a0c      	ldr	r2, [pc, #48]	@ (80081b8 <global_stdio_init.part.0+0x38>)
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	4620      	mov	r0, r4
 800818c:	2200      	movs	r2, #0
 800818e:	2104      	movs	r1, #4
 8008190:	f7ff ff94 	bl	80080bc <std>
 8008194:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008198:	2201      	movs	r2, #1
 800819a:	2109      	movs	r1, #9
 800819c:	f7ff ff8e 	bl	80080bc <std>
 80081a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80081a4:	2202      	movs	r2, #2
 80081a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081aa:	2112      	movs	r1, #18
 80081ac:	f7ff bf86 	b.w	80080bc <std>
 80081b0:	20000730 	.word	0x20000730
 80081b4:	200005f8 	.word	0x200005f8
 80081b8:	08008129 	.word	0x08008129

080081bc <__sfp_lock_acquire>:
 80081bc:	4801      	ldr	r0, [pc, #4]	@ (80081c4 <__sfp_lock_acquire+0x8>)
 80081be:	f000 b95e 	b.w	800847e <__retarget_lock_acquire_recursive>
 80081c2:	bf00      	nop
 80081c4:	20000739 	.word	0x20000739

080081c8 <__sfp_lock_release>:
 80081c8:	4801      	ldr	r0, [pc, #4]	@ (80081d0 <__sfp_lock_release+0x8>)
 80081ca:	f000 b959 	b.w	8008480 <__retarget_lock_release_recursive>
 80081ce:	bf00      	nop
 80081d0:	20000739 	.word	0x20000739

080081d4 <__sinit>:
 80081d4:	b510      	push	{r4, lr}
 80081d6:	4604      	mov	r4, r0
 80081d8:	f7ff fff0 	bl	80081bc <__sfp_lock_acquire>
 80081dc:	6a23      	ldr	r3, [r4, #32]
 80081de:	b11b      	cbz	r3, 80081e8 <__sinit+0x14>
 80081e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e4:	f7ff bff0 	b.w	80081c8 <__sfp_lock_release>
 80081e8:	4b04      	ldr	r3, [pc, #16]	@ (80081fc <__sinit+0x28>)
 80081ea:	6223      	str	r3, [r4, #32]
 80081ec:	4b04      	ldr	r3, [pc, #16]	@ (8008200 <__sinit+0x2c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1f5      	bne.n	80081e0 <__sinit+0xc>
 80081f4:	f7ff ffc4 	bl	8008180 <global_stdio_init.part.0>
 80081f8:	e7f2      	b.n	80081e0 <__sinit+0xc>
 80081fa:	bf00      	nop
 80081fc:	08008141 	.word	0x08008141
 8008200:	20000730 	.word	0x20000730

08008204 <_fwalk_sglue>:
 8008204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008208:	4607      	mov	r7, r0
 800820a:	4688      	mov	r8, r1
 800820c:	4614      	mov	r4, r2
 800820e:	2600      	movs	r6, #0
 8008210:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008214:	f1b9 0901 	subs.w	r9, r9, #1
 8008218:	d505      	bpl.n	8008226 <_fwalk_sglue+0x22>
 800821a:	6824      	ldr	r4, [r4, #0]
 800821c:	2c00      	cmp	r4, #0
 800821e:	d1f7      	bne.n	8008210 <_fwalk_sglue+0xc>
 8008220:	4630      	mov	r0, r6
 8008222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008226:	89ab      	ldrh	r3, [r5, #12]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d907      	bls.n	800823c <_fwalk_sglue+0x38>
 800822c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008230:	3301      	adds	r3, #1
 8008232:	d003      	beq.n	800823c <_fwalk_sglue+0x38>
 8008234:	4629      	mov	r1, r5
 8008236:	4638      	mov	r0, r7
 8008238:	47c0      	blx	r8
 800823a:	4306      	orrs	r6, r0
 800823c:	3568      	adds	r5, #104	@ 0x68
 800823e:	e7e9      	b.n	8008214 <_fwalk_sglue+0x10>

08008240 <siprintf>:
 8008240:	b40e      	push	{r1, r2, r3}
 8008242:	b510      	push	{r4, lr}
 8008244:	b09d      	sub	sp, #116	@ 0x74
 8008246:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008248:	9002      	str	r0, [sp, #8]
 800824a:	9006      	str	r0, [sp, #24]
 800824c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008250:	480a      	ldr	r0, [pc, #40]	@ (800827c <siprintf+0x3c>)
 8008252:	9107      	str	r1, [sp, #28]
 8008254:	9104      	str	r1, [sp, #16]
 8008256:	490a      	ldr	r1, [pc, #40]	@ (8008280 <siprintf+0x40>)
 8008258:	f853 2b04 	ldr.w	r2, [r3], #4
 800825c:	9105      	str	r1, [sp, #20]
 800825e:	2400      	movs	r4, #0
 8008260:	a902      	add	r1, sp, #8
 8008262:	6800      	ldr	r0, [r0, #0]
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008268:	f002 fbf4 	bl	800aa54 <_svfiprintf_r>
 800826c:	9b02      	ldr	r3, [sp, #8]
 800826e:	701c      	strb	r4, [r3, #0]
 8008270:	b01d      	add	sp, #116	@ 0x74
 8008272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008276:	b003      	add	sp, #12
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	20000030 	.word	0x20000030
 8008280:	ffff0208 	.word	0xffff0208

08008284 <__sread>:
 8008284:	b510      	push	{r4, lr}
 8008286:	460c      	mov	r4, r1
 8008288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828c:	f000 f8a8 	bl	80083e0 <_read_r>
 8008290:	2800      	cmp	r0, #0
 8008292:	bfab      	itete	ge
 8008294:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008296:	89a3      	ldrhlt	r3, [r4, #12]
 8008298:	181b      	addge	r3, r3, r0
 800829a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800829e:	bfac      	ite	ge
 80082a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80082a2:	81a3      	strhlt	r3, [r4, #12]
 80082a4:	bd10      	pop	{r4, pc}

080082a6 <__swrite>:
 80082a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082aa:	461f      	mov	r7, r3
 80082ac:	898b      	ldrh	r3, [r1, #12]
 80082ae:	05db      	lsls	r3, r3, #23
 80082b0:	4605      	mov	r5, r0
 80082b2:	460c      	mov	r4, r1
 80082b4:	4616      	mov	r6, r2
 80082b6:	d505      	bpl.n	80082c4 <__swrite+0x1e>
 80082b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082bc:	2302      	movs	r3, #2
 80082be:	2200      	movs	r2, #0
 80082c0:	f000 f87c 	bl	80083bc <_lseek_r>
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082ce:	81a3      	strh	r3, [r4, #12]
 80082d0:	4632      	mov	r2, r6
 80082d2:	463b      	mov	r3, r7
 80082d4:	4628      	mov	r0, r5
 80082d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082da:	f000 b893 	b.w	8008404 <_write_r>

080082de <__sseek>:
 80082de:	b510      	push	{r4, lr}
 80082e0:	460c      	mov	r4, r1
 80082e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e6:	f000 f869 	bl	80083bc <_lseek_r>
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	89a3      	ldrh	r3, [r4, #12]
 80082ee:	bf15      	itete	ne
 80082f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082fa:	81a3      	strheq	r3, [r4, #12]
 80082fc:	bf18      	it	ne
 80082fe:	81a3      	strhne	r3, [r4, #12]
 8008300:	bd10      	pop	{r4, pc}

08008302 <__sclose>:
 8008302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008306:	f000 b849 	b.w	800839c <_close_r>

0800830a <_vsniprintf_r>:
 800830a:	b530      	push	{r4, r5, lr}
 800830c:	4614      	mov	r4, r2
 800830e:	2c00      	cmp	r4, #0
 8008310:	b09b      	sub	sp, #108	@ 0x6c
 8008312:	4605      	mov	r5, r0
 8008314:	461a      	mov	r2, r3
 8008316:	da05      	bge.n	8008324 <_vsniprintf_r+0x1a>
 8008318:	238b      	movs	r3, #139	@ 0x8b
 800831a:	6003      	str	r3, [r0, #0]
 800831c:	f04f 30ff 	mov.w	r0, #4294967295
 8008320:	b01b      	add	sp, #108	@ 0x6c
 8008322:	bd30      	pop	{r4, r5, pc}
 8008324:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008328:	f8ad 300c 	strh.w	r3, [sp, #12]
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	9319      	str	r3, [sp, #100]	@ 0x64
 8008332:	bf14      	ite	ne
 8008334:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008338:	4623      	moveq	r3, r4
 800833a:	9302      	str	r3, [sp, #8]
 800833c:	9305      	str	r3, [sp, #20]
 800833e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008342:	9100      	str	r1, [sp, #0]
 8008344:	9104      	str	r1, [sp, #16]
 8008346:	f8ad 300e 	strh.w	r3, [sp, #14]
 800834a:	4669      	mov	r1, sp
 800834c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800834e:	f002 fb81 	bl	800aa54 <_svfiprintf_r>
 8008352:	1c43      	adds	r3, r0, #1
 8008354:	bfbc      	itt	lt
 8008356:	238b      	movlt	r3, #139	@ 0x8b
 8008358:	602b      	strlt	r3, [r5, #0]
 800835a:	2c00      	cmp	r4, #0
 800835c:	d0e0      	beq.n	8008320 <_vsniprintf_r+0x16>
 800835e:	9b00      	ldr	r3, [sp, #0]
 8008360:	2200      	movs	r2, #0
 8008362:	701a      	strb	r2, [r3, #0]
 8008364:	e7dc      	b.n	8008320 <_vsniprintf_r+0x16>
	...

08008368 <vsniprintf>:
 8008368:	b507      	push	{r0, r1, r2, lr}
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	4613      	mov	r3, r2
 800836e:	460a      	mov	r2, r1
 8008370:	4601      	mov	r1, r0
 8008372:	4803      	ldr	r0, [pc, #12]	@ (8008380 <vsniprintf+0x18>)
 8008374:	6800      	ldr	r0, [r0, #0]
 8008376:	f7ff ffc8 	bl	800830a <_vsniprintf_r>
 800837a:	b003      	add	sp, #12
 800837c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008380:	20000030 	.word	0x20000030

08008384 <memset>:
 8008384:	4402      	add	r2, r0
 8008386:	4603      	mov	r3, r0
 8008388:	4293      	cmp	r3, r2
 800838a:	d100      	bne.n	800838e <memset+0xa>
 800838c:	4770      	bx	lr
 800838e:	f803 1b01 	strb.w	r1, [r3], #1
 8008392:	e7f9      	b.n	8008388 <memset+0x4>

08008394 <_localeconv_r>:
 8008394:	4800      	ldr	r0, [pc, #0]	@ (8008398 <_localeconv_r+0x4>)
 8008396:	4770      	bx	lr
 8008398:	20000170 	.word	0x20000170

0800839c <_close_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	4d06      	ldr	r5, [pc, #24]	@ (80083b8 <_close_r+0x1c>)
 80083a0:	2300      	movs	r3, #0
 80083a2:	4604      	mov	r4, r0
 80083a4:	4608      	mov	r0, r1
 80083a6:	602b      	str	r3, [r5, #0]
 80083a8:	f7f9 f9d1 	bl	800174e <_close>
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d102      	bne.n	80083b6 <_close_r+0x1a>
 80083b0:	682b      	ldr	r3, [r5, #0]
 80083b2:	b103      	cbz	r3, 80083b6 <_close_r+0x1a>
 80083b4:	6023      	str	r3, [r4, #0]
 80083b6:	bd38      	pop	{r3, r4, r5, pc}
 80083b8:	20000734 	.word	0x20000734

080083bc <_lseek_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4d07      	ldr	r5, [pc, #28]	@ (80083dc <_lseek_r+0x20>)
 80083c0:	4604      	mov	r4, r0
 80083c2:	4608      	mov	r0, r1
 80083c4:	4611      	mov	r1, r2
 80083c6:	2200      	movs	r2, #0
 80083c8:	602a      	str	r2, [r5, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	f7f9 f9e6 	bl	800179c <_lseek>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_lseek_r+0x1e>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	b103      	cbz	r3, 80083da <_lseek_r+0x1e>
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	20000734 	.word	0x20000734

080083e0 <_read_r>:
 80083e0:	b538      	push	{r3, r4, r5, lr}
 80083e2:	4d07      	ldr	r5, [pc, #28]	@ (8008400 <_read_r+0x20>)
 80083e4:	4604      	mov	r4, r0
 80083e6:	4608      	mov	r0, r1
 80083e8:	4611      	mov	r1, r2
 80083ea:	2200      	movs	r2, #0
 80083ec:	602a      	str	r2, [r5, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	f7f9 f974 	bl	80016dc <_read>
 80083f4:	1c43      	adds	r3, r0, #1
 80083f6:	d102      	bne.n	80083fe <_read_r+0x1e>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	b103      	cbz	r3, 80083fe <_read_r+0x1e>
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	bd38      	pop	{r3, r4, r5, pc}
 8008400:	20000734 	.word	0x20000734

08008404 <_write_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4d07      	ldr	r5, [pc, #28]	@ (8008424 <_write_r+0x20>)
 8008408:	4604      	mov	r4, r0
 800840a:	4608      	mov	r0, r1
 800840c:	4611      	mov	r1, r2
 800840e:	2200      	movs	r2, #0
 8008410:	602a      	str	r2, [r5, #0]
 8008412:	461a      	mov	r2, r3
 8008414:	f7f9 f97f 	bl	8001716 <_write>
 8008418:	1c43      	adds	r3, r0, #1
 800841a:	d102      	bne.n	8008422 <_write_r+0x1e>
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	b103      	cbz	r3, 8008422 <_write_r+0x1e>
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	bd38      	pop	{r3, r4, r5, pc}
 8008424:	20000734 	.word	0x20000734

08008428 <__errno>:
 8008428:	4b01      	ldr	r3, [pc, #4]	@ (8008430 <__errno+0x8>)
 800842a:	6818      	ldr	r0, [r3, #0]
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	20000030 	.word	0x20000030

08008434 <__libc_init_array>:
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	4d0d      	ldr	r5, [pc, #52]	@ (800846c <__libc_init_array+0x38>)
 8008438:	4c0d      	ldr	r4, [pc, #52]	@ (8008470 <__libc_init_array+0x3c>)
 800843a:	1b64      	subs	r4, r4, r5
 800843c:	10a4      	asrs	r4, r4, #2
 800843e:	2600      	movs	r6, #0
 8008440:	42a6      	cmp	r6, r4
 8008442:	d109      	bne.n	8008458 <__libc_init_array+0x24>
 8008444:	4d0b      	ldr	r5, [pc, #44]	@ (8008474 <__libc_init_array+0x40>)
 8008446:	4c0c      	ldr	r4, [pc, #48]	@ (8008478 <__libc_init_array+0x44>)
 8008448:	f003 fb74 	bl	800bb34 <_init>
 800844c:	1b64      	subs	r4, r4, r5
 800844e:	10a4      	asrs	r4, r4, #2
 8008450:	2600      	movs	r6, #0
 8008452:	42a6      	cmp	r6, r4
 8008454:	d105      	bne.n	8008462 <__libc_init_array+0x2e>
 8008456:	bd70      	pop	{r4, r5, r6, pc}
 8008458:	f855 3b04 	ldr.w	r3, [r5], #4
 800845c:	4798      	blx	r3
 800845e:	3601      	adds	r6, #1
 8008460:	e7ee      	b.n	8008440 <__libc_init_array+0xc>
 8008462:	f855 3b04 	ldr.w	r3, [r5], #4
 8008466:	4798      	blx	r3
 8008468:	3601      	adds	r6, #1
 800846a:	e7f2      	b.n	8008452 <__libc_init_array+0x1e>
 800846c:	0800c5e4 	.word	0x0800c5e4
 8008470:	0800c5e4 	.word	0x0800c5e4
 8008474:	0800c5e4 	.word	0x0800c5e4
 8008478:	0800c5e8 	.word	0x0800c5e8

0800847c <__retarget_lock_init_recursive>:
 800847c:	4770      	bx	lr

0800847e <__retarget_lock_acquire_recursive>:
 800847e:	4770      	bx	lr

08008480 <__retarget_lock_release_recursive>:
 8008480:	4770      	bx	lr
	...

08008484 <nanf>:
 8008484:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800848c <nanf+0x8>
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	7fc00000 	.word	0x7fc00000

08008490 <quorem>:
 8008490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008494:	6903      	ldr	r3, [r0, #16]
 8008496:	690c      	ldr	r4, [r1, #16]
 8008498:	42a3      	cmp	r3, r4
 800849a:	4607      	mov	r7, r0
 800849c:	db7e      	blt.n	800859c <quorem+0x10c>
 800849e:	3c01      	subs	r4, #1
 80084a0:	f101 0814 	add.w	r8, r1, #20
 80084a4:	00a3      	lsls	r3, r4, #2
 80084a6:	f100 0514 	add.w	r5, r0, #20
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084ba:	3301      	adds	r3, #1
 80084bc:	429a      	cmp	r2, r3
 80084be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80084c6:	d32e      	bcc.n	8008526 <quorem+0x96>
 80084c8:	f04f 0a00 	mov.w	sl, #0
 80084cc:	46c4      	mov	ip, r8
 80084ce:	46ae      	mov	lr, r5
 80084d0:	46d3      	mov	fp, sl
 80084d2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80084d6:	b298      	uxth	r0, r3
 80084d8:	fb06 a000 	mla	r0, r6, r0, sl
 80084dc:	0c02      	lsrs	r2, r0, #16
 80084de:	0c1b      	lsrs	r3, r3, #16
 80084e0:	fb06 2303 	mla	r3, r6, r3, r2
 80084e4:	f8de 2000 	ldr.w	r2, [lr]
 80084e8:	b280      	uxth	r0, r0
 80084ea:	b292      	uxth	r2, r2
 80084ec:	1a12      	subs	r2, r2, r0
 80084ee:	445a      	add	r2, fp
 80084f0:	f8de 0000 	ldr.w	r0, [lr]
 80084f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80084fe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008502:	b292      	uxth	r2, r2
 8008504:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008508:	45e1      	cmp	r9, ip
 800850a:	f84e 2b04 	str.w	r2, [lr], #4
 800850e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008512:	d2de      	bcs.n	80084d2 <quorem+0x42>
 8008514:	9b00      	ldr	r3, [sp, #0]
 8008516:	58eb      	ldr	r3, [r5, r3]
 8008518:	b92b      	cbnz	r3, 8008526 <quorem+0x96>
 800851a:	9b01      	ldr	r3, [sp, #4]
 800851c:	3b04      	subs	r3, #4
 800851e:	429d      	cmp	r5, r3
 8008520:	461a      	mov	r2, r3
 8008522:	d32f      	bcc.n	8008584 <quorem+0xf4>
 8008524:	613c      	str	r4, [r7, #16]
 8008526:	4638      	mov	r0, r7
 8008528:	f001 f9c6 	bl	80098b8 <__mcmp>
 800852c:	2800      	cmp	r0, #0
 800852e:	db25      	blt.n	800857c <quorem+0xec>
 8008530:	4629      	mov	r1, r5
 8008532:	2000      	movs	r0, #0
 8008534:	f858 2b04 	ldr.w	r2, [r8], #4
 8008538:	f8d1 c000 	ldr.w	ip, [r1]
 800853c:	fa1f fe82 	uxth.w	lr, r2
 8008540:	fa1f f38c 	uxth.w	r3, ip
 8008544:	eba3 030e 	sub.w	r3, r3, lr
 8008548:	4403      	add	r3, r0
 800854a:	0c12      	lsrs	r2, r2, #16
 800854c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008550:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008554:	b29b      	uxth	r3, r3
 8008556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800855a:	45c1      	cmp	r9, r8
 800855c:	f841 3b04 	str.w	r3, [r1], #4
 8008560:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008564:	d2e6      	bcs.n	8008534 <quorem+0xa4>
 8008566:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800856a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800856e:	b922      	cbnz	r2, 800857a <quorem+0xea>
 8008570:	3b04      	subs	r3, #4
 8008572:	429d      	cmp	r5, r3
 8008574:	461a      	mov	r2, r3
 8008576:	d30b      	bcc.n	8008590 <quorem+0x100>
 8008578:	613c      	str	r4, [r7, #16]
 800857a:	3601      	adds	r6, #1
 800857c:	4630      	mov	r0, r6
 800857e:	b003      	add	sp, #12
 8008580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008584:	6812      	ldr	r2, [r2, #0]
 8008586:	3b04      	subs	r3, #4
 8008588:	2a00      	cmp	r2, #0
 800858a:	d1cb      	bne.n	8008524 <quorem+0x94>
 800858c:	3c01      	subs	r4, #1
 800858e:	e7c6      	b.n	800851e <quorem+0x8e>
 8008590:	6812      	ldr	r2, [r2, #0]
 8008592:	3b04      	subs	r3, #4
 8008594:	2a00      	cmp	r2, #0
 8008596:	d1ef      	bne.n	8008578 <quorem+0xe8>
 8008598:	3c01      	subs	r4, #1
 800859a:	e7ea      	b.n	8008572 <quorem+0xe2>
 800859c:	2000      	movs	r0, #0
 800859e:	e7ee      	b.n	800857e <quorem+0xee>

080085a0 <_dtoa_r>:
 80085a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a4:	69c7      	ldr	r7, [r0, #28]
 80085a6:	b097      	sub	sp, #92	@ 0x5c
 80085a8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80085ac:	ec55 4b10 	vmov	r4, r5, d0
 80085b0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80085b2:	9107      	str	r1, [sp, #28]
 80085b4:	4681      	mov	r9, r0
 80085b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80085b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80085ba:	b97f      	cbnz	r7, 80085dc <_dtoa_r+0x3c>
 80085bc:	2010      	movs	r0, #16
 80085be:	f000 fe09 	bl	80091d4 <malloc>
 80085c2:	4602      	mov	r2, r0
 80085c4:	f8c9 001c 	str.w	r0, [r9, #28]
 80085c8:	b920      	cbnz	r0, 80085d4 <_dtoa_r+0x34>
 80085ca:	4ba9      	ldr	r3, [pc, #676]	@ (8008870 <_dtoa_r+0x2d0>)
 80085cc:	21ef      	movs	r1, #239	@ 0xef
 80085ce:	48a9      	ldr	r0, [pc, #676]	@ (8008874 <_dtoa_r+0x2d4>)
 80085d0:	f002 fc3a 	bl	800ae48 <__assert_func>
 80085d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80085d8:	6007      	str	r7, [r0, #0]
 80085da:	60c7      	str	r7, [r0, #12]
 80085dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80085e0:	6819      	ldr	r1, [r3, #0]
 80085e2:	b159      	cbz	r1, 80085fc <_dtoa_r+0x5c>
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	604a      	str	r2, [r1, #4]
 80085e8:	2301      	movs	r3, #1
 80085ea:	4093      	lsls	r3, r2
 80085ec:	608b      	str	r3, [r1, #8]
 80085ee:	4648      	mov	r0, r9
 80085f0:	f000 fee6 	bl	80093c0 <_Bfree>
 80085f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80085f8:	2200      	movs	r2, #0
 80085fa:	601a      	str	r2, [r3, #0]
 80085fc:	1e2b      	subs	r3, r5, #0
 80085fe:	bfb9      	ittee	lt
 8008600:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008604:	9305      	strlt	r3, [sp, #20]
 8008606:	2300      	movge	r3, #0
 8008608:	6033      	strge	r3, [r6, #0]
 800860a:	9f05      	ldr	r7, [sp, #20]
 800860c:	4b9a      	ldr	r3, [pc, #616]	@ (8008878 <_dtoa_r+0x2d8>)
 800860e:	bfbc      	itt	lt
 8008610:	2201      	movlt	r2, #1
 8008612:	6032      	strlt	r2, [r6, #0]
 8008614:	43bb      	bics	r3, r7
 8008616:	d112      	bne.n	800863e <_dtoa_r+0x9e>
 8008618:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800861a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008624:	4323      	orrs	r3, r4
 8008626:	f000 855a 	beq.w	80090de <_dtoa_r+0xb3e>
 800862a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800862c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800888c <_dtoa_r+0x2ec>
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 855c 	beq.w	80090ee <_dtoa_r+0xb4e>
 8008636:	f10a 0303 	add.w	r3, sl, #3
 800863a:	f000 bd56 	b.w	80090ea <_dtoa_r+0xb4a>
 800863e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008642:	2200      	movs	r2, #0
 8008644:	ec51 0b17 	vmov	r0, r1, d7
 8008648:	2300      	movs	r3, #0
 800864a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800864e:	f7f8 fa43 	bl	8000ad8 <__aeabi_dcmpeq>
 8008652:	4680      	mov	r8, r0
 8008654:	b158      	cbz	r0, 800866e <_dtoa_r+0xce>
 8008656:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008658:	2301      	movs	r3, #1
 800865a:	6013      	str	r3, [r2, #0]
 800865c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800865e:	b113      	cbz	r3, 8008666 <_dtoa_r+0xc6>
 8008660:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008662:	4b86      	ldr	r3, [pc, #536]	@ (800887c <_dtoa_r+0x2dc>)
 8008664:	6013      	str	r3, [r2, #0]
 8008666:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008890 <_dtoa_r+0x2f0>
 800866a:	f000 bd40 	b.w	80090ee <_dtoa_r+0xb4e>
 800866e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008672:	aa14      	add	r2, sp, #80	@ 0x50
 8008674:	a915      	add	r1, sp, #84	@ 0x54
 8008676:	4648      	mov	r0, r9
 8008678:	f001 fa3e 	bl	8009af8 <__d2b>
 800867c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008680:	9002      	str	r0, [sp, #8]
 8008682:	2e00      	cmp	r6, #0
 8008684:	d078      	beq.n	8008778 <_dtoa_r+0x1d8>
 8008686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008688:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800868c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008690:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008694:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008698:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800869c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80086a0:	4619      	mov	r1, r3
 80086a2:	2200      	movs	r2, #0
 80086a4:	4b76      	ldr	r3, [pc, #472]	@ (8008880 <_dtoa_r+0x2e0>)
 80086a6:	f7f7 fdf7 	bl	8000298 <__aeabi_dsub>
 80086aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8008858 <_dtoa_r+0x2b8>)
 80086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b0:	f7f7 ffaa 	bl	8000608 <__aeabi_dmul>
 80086b4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008860 <_dtoa_r+0x2c0>)
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	f7f7 fdef 	bl	800029c <__adddf3>
 80086be:	4604      	mov	r4, r0
 80086c0:	4630      	mov	r0, r6
 80086c2:	460d      	mov	r5, r1
 80086c4:	f7f7 ff36 	bl	8000534 <__aeabi_i2d>
 80086c8:	a367      	add	r3, pc, #412	@ (adr r3, 8008868 <_dtoa_r+0x2c8>)
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	f7f7 ff9b 	bl	8000608 <__aeabi_dmul>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4620      	mov	r0, r4
 80086d8:	4629      	mov	r1, r5
 80086da:	f7f7 fddf 	bl	800029c <__adddf3>
 80086de:	4604      	mov	r4, r0
 80086e0:	460d      	mov	r5, r1
 80086e2:	f7f8 fa41 	bl	8000b68 <__aeabi_d2iz>
 80086e6:	2200      	movs	r2, #0
 80086e8:	4607      	mov	r7, r0
 80086ea:	2300      	movs	r3, #0
 80086ec:	4620      	mov	r0, r4
 80086ee:	4629      	mov	r1, r5
 80086f0:	f7f8 f9fc 	bl	8000aec <__aeabi_dcmplt>
 80086f4:	b140      	cbz	r0, 8008708 <_dtoa_r+0x168>
 80086f6:	4638      	mov	r0, r7
 80086f8:	f7f7 ff1c 	bl	8000534 <__aeabi_i2d>
 80086fc:	4622      	mov	r2, r4
 80086fe:	462b      	mov	r3, r5
 8008700:	f7f8 f9ea 	bl	8000ad8 <__aeabi_dcmpeq>
 8008704:	b900      	cbnz	r0, 8008708 <_dtoa_r+0x168>
 8008706:	3f01      	subs	r7, #1
 8008708:	2f16      	cmp	r7, #22
 800870a:	d852      	bhi.n	80087b2 <_dtoa_r+0x212>
 800870c:	4b5d      	ldr	r3, [pc, #372]	@ (8008884 <_dtoa_r+0x2e4>)
 800870e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008716:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800871a:	f7f8 f9e7 	bl	8000aec <__aeabi_dcmplt>
 800871e:	2800      	cmp	r0, #0
 8008720:	d049      	beq.n	80087b6 <_dtoa_r+0x216>
 8008722:	3f01      	subs	r7, #1
 8008724:	2300      	movs	r3, #0
 8008726:	9310      	str	r3, [sp, #64]	@ 0x40
 8008728:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800872a:	1b9b      	subs	r3, r3, r6
 800872c:	1e5a      	subs	r2, r3, #1
 800872e:	bf45      	ittet	mi
 8008730:	f1c3 0301 	rsbmi	r3, r3, #1
 8008734:	9300      	strmi	r3, [sp, #0]
 8008736:	2300      	movpl	r3, #0
 8008738:	2300      	movmi	r3, #0
 800873a:	9206      	str	r2, [sp, #24]
 800873c:	bf54      	ite	pl
 800873e:	9300      	strpl	r3, [sp, #0]
 8008740:	9306      	strmi	r3, [sp, #24]
 8008742:	2f00      	cmp	r7, #0
 8008744:	db39      	blt.n	80087ba <_dtoa_r+0x21a>
 8008746:	9b06      	ldr	r3, [sp, #24]
 8008748:	970d      	str	r7, [sp, #52]	@ 0x34
 800874a:	443b      	add	r3, r7
 800874c:	9306      	str	r3, [sp, #24]
 800874e:	2300      	movs	r3, #0
 8008750:	9308      	str	r3, [sp, #32]
 8008752:	9b07      	ldr	r3, [sp, #28]
 8008754:	2b09      	cmp	r3, #9
 8008756:	d863      	bhi.n	8008820 <_dtoa_r+0x280>
 8008758:	2b05      	cmp	r3, #5
 800875a:	bfc4      	itt	gt
 800875c:	3b04      	subgt	r3, #4
 800875e:	9307      	strgt	r3, [sp, #28]
 8008760:	9b07      	ldr	r3, [sp, #28]
 8008762:	f1a3 0302 	sub.w	r3, r3, #2
 8008766:	bfcc      	ite	gt
 8008768:	2400      	movgt	r4, #0
 800876a:	2401      	movle	r4, #1
 800876c:	2b03      	cmp	r3, #3
 800876e:	d863      	bhi.n	8008838 <_dtoa_r+0x298>
 8008770:	e8df f003 	tbb	[pc, r3]
 8008774:	2b375452 	.word	0x2b375452
 8008778:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800877c:	441e      	add	r6, r3
 800877e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008782:	2b20      	cmp	r3, #32
 8008784:	bfc1      	itttt	gt
 8008786:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800878a:	409f      	lslgt	r7, r3
 800878c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008790:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008794:	bfd6      	itet	le
 8008796:	f1c3 0320 	rsble	r3, r3, #32
 800879a:	ea47 0003 	orrgt.w	r0, r7, r3
 800879e:	fa04 f003 	lslle.w	r0, r4, r3
 80087a2:	f7f7 feb7 	bl	8000514 <__aeabi_ui2d>
 80087a6:	2201      	movs	r2, #1
 80087a8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80087ac:	3e01      	subs	r6, #1
 80087ae:	9212      	str	r2, [sp, #72]	@ 0x48
 80087b0:	e776      	b.n	80086a0 <_dtoa_r+0x100>
 80087b2:	2301      	movs	r3, #1
 80087b4:	e7b7      	b.n	8008726 <_dtoa_r+0x186>
 80087b6:	9010      	str	r0, [sp, #64]	@ 0x40
 80087b8:	e7b6      	b.n	8008728 <_dtoa_r+0x188>
 80087ba:	9b00      	ldr	r3, [sp, #0]
 80087bc:	1bdb      	subs	r3, r3, r7
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	427b      	negs	r3, r7
 80087c2:	9308      	str	r3, [sp, #32]
 80087c4:	2300      	movs	r3, #0
 80087c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80087c8:	e7c3      	b.n	8008752 <_dtoa_r+0x1b2>
 80087ca:	2301      	movs	r3, #1
 80087cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80087ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087d0:	eb07 0b03 	add.w	fp, r7, r3
 80087d4:	f10b 0301 	add.w	r3, fp, #1
 80087d8:	2b01      	cmp	r3, #1
 80087da:	9303      	str	r3, [sp, #12]
 80087dc:	bfb8      	it	lt
 80087de:	2301      	movlt	r3, #1
 80087e0:	e006      	b.n	80087f0 <_dtoa_r+0x250>
 80087e2:	2301      	movs	r3, #1
 80087e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	dd28      	ble.n	800883e <_dtoa_r+0x29e>
 80087ec:	469b      	mov	fp, r3
 80087ee:	9303      	str	r3, [sp, #12]
 80087f0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80087f4:	2100      	movs	r1, #0
 80087f6:	2204      	movs	r2, #4
 80087f8:	f102 0514 	add.w	r5, r2, #20
 80087fc:	429d      	cmp	r5, r3
 80087fe:	d926      	bls.n	800884e <_dtoa_r+0x2ae>
 8008800:	6041      	str	r1, [r0, #4]
 8008802:	4648      	mov	r0, r9
 8008804:	f000 fd9c 	bl	8009340 <_Balloc>
 8008808:	4682      	mov	sl, r0
 800880a:	2800      	cmp	r0, #0
 800880c:	d142      	bne.n	8008894 <_dtoa_r+0x2f4>
 800880e:	4b1e      	ldr	r3, [pc, #120]	@ (8008888 <_dtoa_r+0x2e8>)
 8008810:	4602      	mov	r2, r0
 8008812:	f240 11af 	movw	r1, #431	@ 0x1af
 8008816:	e6da      	b.n	80085ce <_dtoa_r+0x2e>
 8008818:	2300      	movs	r3, #0
 800881a:	e7e3      	b.n	80087e4 <_dtoa_r+0x244>
 800881c:	2300      	movs	r3, #0
 800881e:	e7d5      	b.n	80087cc <_dtoa_r+0x22c>
 8008820:	2401      	movs	r4, #1
 8008822:	2300      	movs	r3, #0
 8008824:	9307      	str	r3, [sp, #28]
 8008826:	9409      	str	r4, [sp, #36]	@ 0x24
 8008828:	f04f 3bff 	mov.w	fp, #4294967295
 800882c:	2200      	movs	r2, #0
 800882e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008832:	2312      	movs	r3, #18
 8008834:	920c      	str	r2, [sp, #48]	@ 0x30
 8008836:	e7db      	b.n	80087f0 <_dtoa_r+0x250>
 8008838:	2301      	movs	r3, #1
 800883a:	9309      	str	r3, [sp, #36]	@ 0x24
 800883c:	e7f4      	b.n	8008828 <_dtoa_r+0x288>
 800883e:	f04f 0b01 	mov.w	fp, #1
 8008842:	f8cd b00c 	str.w	fp, [sp, #12]
 8008846:	465b      	mov	r3, fp
 8008848:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800884c:	e7d0      	b.n	80087f0 <_dtoa_r+0x250>
 800884e:	3101      	adds	r1, #1
 8008850:	0052      	lsls	r2, r2, #1
 8008852:	e7d1      	b.n	80087f8 <_dtoa_r+0x258>
 8008854:	f3af 8000 	nop.w
 8008858:	636f4361 	.word	0x636f4361
 800885c:	3fd287a7 	.word	0x3fd287a7
 8008860:	8b60c8b3 	.word	0x8b60c8b3
 8008864:	3fc68a28 	.word	0x3fc68a28
 8008868:	509f79fb 	.word	0x509f79fb
 800886c:	3fd34413 	.word	0x3fd34413
 8008870:	0800c1fa 	.word	0x0800c1fa
 8008874:	0800c211 	.word	0x0800c211
 8008878:	7ff00000 	.word	0x7ff00000
 800887c:	0800c1c5 	.word	0x0800c1c5
 8008880:	3ff80000 	.word	0x3ff80000
 8008884:	0800c3c0 	.word	0x0800c3c0
 8008888:	0800c269 	.word	0x0800c269
 800888c:	0800c1f6 	.word	0x0800c1f6
 8008890:	0800c1c4 	.word	0x0800c1c4
 8008894:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008898:	6018      	str	r0, [r3, #0]
 800889a:	9b03      	ldr	r3, [sp, #12]
 800889c:	2b0e      	cmp	r3, #14
 800889e:	f200 80a1 	bhi.w	80089e4 <_dtoa_r+0x444>
 80088a2:	2c00      	cmp	r4, #0
 80088a4:	f000 809e 	beq.w	80089e4 <_dtoa_r+0x444>
 80088a8:	2f00      	cmp	r7, #0
 80088aa:	dd33      	ble.n	8008914 <_dtoa_r+0x374>
 80088ac:	4b9c      	ldr	r3, [pc, #624]	@ (8008b20 <_dtoa_r+0x580>)
 80088ae:	f007 020f 	and.w	r2, r7, #15
 80088b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088b6:	ed93 7b00 	vldr	d7, [r3]
 80088ba:	05f8      	lsls	r0, r7, #23
 80088bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80088c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80088c4:	d516      	bpl.n	80088f4 <_dtoa_r+0x354>
 80088c6:	4b97      	ldr	r3, [pc, #604]	@ (8008b24 <_dtoa_r+0x584>)
 80088c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80088cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088d0:	f7f7 ffc4 	bl	800085c <__aeabi_ddiv>
 80088d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088d8:	f004 040f 	and.w	r4, r4, #15
 80088dc:	2603      	movs	r6, #3
 80088de:	4d91      	ldr	r5, [pc, #580]	@ (8008b24 <_dtoa_r+0x584>)
 80088e0:	b954      	cbnz	r4, 80088f8 <_dtoa_r+0x358>
 80088e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80088e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088ea:	f7f7 ffb7 	bl	800085c <__aeabi_ddiv>
 80088ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088f2:	e028      	b.n	8008946 <_dtoa_r+0x3a6>
 80088f4:	2602      	movs	r6, #2
 80088f6:	e7f2      	b.n	80088de <_dtoa_r+0x33e>
 80088f8:	07e1      	lsls	r1, r4, #31
 80088fa:	d508      	bpl.n	800890e <_dtoa_r+0x36e>
 80088fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008900:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008904:	f7f7 fe80 	bl	8000608 <__aeabi_dmul>
 8008908:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800890c:	3601      	adds	r6, #1
 800890e:	1064      	asrs	r4, r4, #1
 8008910:	3508      	adds	r5, #8
 8008912:	e7e5      	b.n	80088e0 <_dtoa_r+0x340>
 8008914:	f000 80af 	beq.w	8008a76 <_dtoa_r+0x4d6>
 8008918:	427c      	negs	r4, r7
 800891a:	4b81      	ldr	r3, [pc, #516]	@ (8008b20 <_dtoa_r+0x580>)
 800891c:	4d81      	ldr	r5, [pc, #516]	@ (8008b24 <_dtoa_r+0x584>)
 800891e:	f004 020f 	and.w	r2, r4, #15
 8008922:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800892e:	f7f7 fe6b 	bl	8000608 <__aeabi_dmul>
 8008932:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008936:	1124      	asrs	r4, r4, #4
 8008938:	2300      	movs	r3, #0
 800893a:	2602      	movs	r6, #2
 800893c:	2c00      	cmp	r4, #0
 800893e:	f040 808f 	bne.w	8008a60 <_dtoa_r+0x4c0>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1d3      	bne.n	80088ee <_dtoa_r+0x34e>
 8008946:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008948:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 8094 	beq.w	8008a7a <_dtoa_r+0x4da>
 8008952:	4b75      	ldr	r3, [pc, #468]	@ (8008b28 <_dtoa_r+0x588>)
 8008954:	2200      	movs	r2, #0
 8008956:	4620      	mov	r0, r4
 8008958:	4629      	mov	r1, r5
 800895a:	f7f8 f8c7 	bl	8000aec <__aeabi_dcmplt>
 800895e:	2800      	cmp	r0, #0
 8008960:	f000 808b 	beq.w	8008a7a <_dtoa_r+0x4da>
 8008964:	9b03      	ldr	r3, [sp, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 8087 	beq.w	8008a7a <_dtoa_r+0x4da>
 800896c:	f1bb 0f00 	cmp.w	fp, #0
 8008970:	dd34      	ble.n	80089dc <_dtoa_r+0x43c>
 8008972:	4620      	mov	r0, r4
 8008974:	4b6d      	ldr	r3, [pc, #436]	@ (8008b2c <_dtoa_r+0x58c>)
 8008976:	2200      	movs	r2, #0
 8008978:	4629      	mov	r1, r5
 800897a:	f7f7 fe45 	bl	8000608 <__aeabi_dmul>
 800897e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008982:	f107 38ff 	add.w	r8, r7, #4294967295
 8008986:	3601      	adds	r6, #1
 8008988:	465c      	mov	r4, fp
 800898a:	4630      	mov	r0, r6
 800898c:	f7f7 fdd2 	bl	8000534 <__aeabi_i2d>
 8008990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008994:	f7f7 fe38 	bl	8000608 <__aeabi_dmul>
 8008998:	4b65      	ldr	r3, [pc, #404]	@ (8008b30 <_dtoa_r+0x590>)
 800899a:	2200      	movs	r2, #0
 800899c:	f7f7 fc7e 	bl	800029c <__adddf3>
 80089a0:	4605      	mov	r5, r0
 80089a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80089a6:	2c00      	cmp	r4, #0
 80089a8:	d16a      	bne.n	8008a80 <_dtoa_r+0x4e0>
 80089aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089ae:	4b61      	ldr	r3, [pc, #388]	@ (8008b34 <_dtoa_r+0x594>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	f7f7 fc71 	bl	8000298 <__aeabi_dsub>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089be:	462a      	mov	r2, r5
 80089c0:	4633      	mov	r3, r6
 80089c2:	f7f8 f8b1 	bl	8000b28 <__aeabi_dcmpgt>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f040 8298 	bne.w	8008efc <_dtoa_r+0x95c>
 80089cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089d0:	462a      	mov	r2, r5
 80089d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80089d6:	f7f8 f889 	bl	8000aec <__aeabi_dcmplt>
 80089da:	bb38      	cbnz	r0, 8008a2c <_dtoa_r+0x48c>
 80089dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80089e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80089e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f2c0 8157 	blt.w	8008c9a <_dtoa_r+0x6fa>
 80089ec:	2f0e      	cmp	r7, #14
 80089ee:	f300 8154 	bgt.w	8008c9a <_dtoa_r+0x6fa>
 80089f2:	4b4b      	ldr	r3, [pc, #300]	@ (8008b20 <_dtoa_r+0x580>)
 80089f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089f8:	ed93 7b00 	vldr	d7, [r3]
 80089fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	ed8d 7b00 	vstr	d7, [sp]
 8008a04:	f280 80e5 	bge.w	8008bd2 <_dtoa_r+0x632>
 8008a08:	9b03      	ldr	r3, [sp, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f300 80e1 	bgt.w	8008bd2 <_dtoa_r+0x632>
 8008a10:	d10c      	bne.n	8008a2c <_dtoa_r+0x48c>
 8008a12:	4b48      	ldr	r3, [pc, #288]	@ (8008b34 <_dtoa_r+0x594>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	ec51 0b17 	vmov	r0, r1, d7
 8008a1a:	f7f7 fdf5 	bl	8000608 <__aeabi_dmul>
 8008a1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a22:	f7f8 f877 	bl	8000b14 <__aeabi_dcmpge>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	f000 8266 	beq.w	8008ef8 <_dtoa_r+0x958>
 8008a2c:	2400      	movs	r4, #0
 8008a2e:	4625      	mov	r5, r4
 8008a30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a32:	4656      	mov	r6, sl
 8008a34:	ea6f 0803 	mvn.w	r8, r3
 8008a38:	2700      	movs	r7, #0
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	4648      	mov	r0, r9
 8008a3e:	f000 fcbf 	bl	80093c0 <_Bfree>
 8008a42:	2d00      	cmp	r5, #0
 8008a44:	f000 80bd 	beq.w	8008bc2 <_dtoa_r+0x622>
 8008a48:	b12f      	cbz	r7, 8008a56 <_dtoa_r+0x4b6>
 8008a4a:	42af      	cmp	r7, r5
 8008a4c:	d003      	beq.n	8008a56 <_dtoa_r+0x4b6>
 8008a4e:	4639      	mov	r1, r7
 8008a50:	4648      	mov	r0, r9
 8008a52:	f000 fcb5 	bl	80093c0 <_Bfree>
 8008a56:	4629      	mov	r1, r5
 8008a58:	4648      	mov	r0, r9
 8008a5a:	f000 fcb1 	bl	80093c0 <_Bfree>
 8008a5e:	e0b0      	b.n	8008bc2 <_dtoa_r+0x622>
 8008a60:	07e2      	lsls	r2, r4, #31
 8008a62:	d505      	bpl.n	8008a70 <_dtoa_r+0x4d0>
 8008a64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a68:	f7f7 fdce 	bl	8000608 <__aeabi_dmul>
 8008a6c:	3601      	adds	r6, #1
 8008a6e:	2301      	movs	r3, #1
 8008a70:	1064      	asrs	r4, r4, #1
 8008a72:	3508      	adds	r5, #8
 8008a74:	e762      	b.n	800893c <_dtoa_r+0x39c>
 8008a76:	2602      	movs	r6, #2
 8008a78:	e765      	b.n	8008946 <_dtoa_r+0x3a6>
 8008a7a:	9c03      	ldr	r4, [sp, #12]
 8008a7c:	46b8      	mov	r8, r7
 8008a7e:	e784      	b.n	800898a <_dtoa_r+0x3ea>
 8008a80:	4b27      	ldr	r3, [pc, #156]	@ (8008b20 <_dtoa_r+0x580>)
 8008a82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a8c:	4454      	add	r4, sl
 8008a8e:	2900      	cmp	r1, #0
 8008a90:	d054      	beq.n	8008b3c <_dtoa_r+0x59c>
 8008a92:	4929      	ldr	r1, [pc, #164]	@ (8008b38 <_dtoa_r+0x598>)
 8008a94:	2000      	movs	r0, #0
 8008a96:	f7f7 fee1 	bl	800085c <__aeabi_ddiv>
 8008a9a:	4633      	mov	r3, r6
 8008a9c:	462a      	mov	r2, r5
 8008a9e:	f7f7 fbfb 	bl	8000298 <__aeabi_dsub>
 8008aa2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008aa6:	4656      	mov	r6, sl
 8008aa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008aac:	f7f8 f85c 	bl	8000b68 <__aeabi_d2iz>
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	f7f7 fd3f 	bl	8000534 <__aeabi_i2d>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008abe:	f7f7 fbeb 	bl	8000298 <__aeabi_dsub>
 8008ac2:	3530      	adds	r5, #48	@ 0x30
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008acc:	f806 5b01 	strb.w	r5, [r6], #1
 8008ad0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008ad4:	f7f8 f80a 	bl	8000aec <__aeabi_dcmplt>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d172      	bne.n	8008bc2 <_dtoa_r+0x622>
 8008adc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ae0:	4911      	ldr	r1, [pc, #68]	@ (8008b28 <_dtoa_r+0x588>)
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	f7f7 fbd8 	bl	8000298 <__aeabi_dsub>
 8008ae8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008aec:	f7f7 fffe 	bl	8000aec <__aeabi_dcmplt>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	f040 80b4 	bne.w	8008c5e <_dtoa_r+0x6be>
 8008af6:	42a6      	cmp	r6, r4
 8008af8:	f43f af70 	beq.w	80089dc <_dtoa_r+0x43c>
 8008afc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008b00:	4b0a      	ldr	r3, [pc, #40]	@ (8008b2c <_dtoa_r+0x58c>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	f7f7 fd80 	bl	8000608 <__aeabi_dmul>
 8008b08:	4b08      	ldr	r3, [pc, #32]	@ (8008b2c <_dtoa_r+0x58c>)
 8008b0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b0e:	2200      	movs	r2, #0
 8008b10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b14:	f7f7 fd78 	bl	8000608 <__aeabi_dmul>
 8008b18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b1c:	e7c4      	b.n	8008aa8 <_dtoa_r+0x508>
 8008b1e:	bf00      	nop
 8008b20:	0800c3c0 	.word	0x0800c3c0
 8008b24:	0800c398 	.word	0x0800c398
 8008b28:	3ff00000 	.word	0x3ff00000
 8008b2c:	40240000 	.word	0x40240000
 8008b30:	401c0000 	.word	0x401c0000
 8008b34:	40140000 	.word	0x40140000
 8008b38:	3fe00000 	.word	0x3fe00000
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	4628      	mov	r0, r5
 8008b40:	f7f7 fd62 	bl	8000608 <__aeabi_dmul>
 8008b44:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b48:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008b4a:	4656      	mov	r6, sl
 8008b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b50:	f7f8 f80a 	bl	8000b68 <__aeabi_d2iz>
 8008b54:	4605      	mov	r5, r0
 8008b56:	f7f7 fced 	bl	8000534 <__aeabi_i2d>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b62:	f7f7 fb99 	bl	8000298 <__aeabi_dsub>
 8008b66:	3530      	adds	r5, #48	@ 0x30
 8008b68:	f806 5b01 	strb.w	r5, [r6], #1
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	42a6      	cmp	r6, r4
 8008b72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b76:	f04f 0200 	mov.w	r2, #0
 8008b7a:	d124      	bne.n	8008bc6 <_dtoa_r+0x626>
 8008b7c:	4baf      	ldr	r3, [pc, #700]	@ (8008e3c <_dtoa_r+0x89c>)
 8008b7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008b82:	f7f7 fb8b 	bl	800029c <__adddf3>
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b8e:	f7f7 ffcb 	bl	8000b28 <__aeabi_dcmpgt>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d163      	bne.n	8008c5e <_dtoa_r+0x6be>
 8008b96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b9a:	49a8      	ldr	r1, [pc, #672]	@ (8008e3c <_dtoa_r+0x89c>)
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	f7f7 fb7b 	bl	8000298 <__aeabi_dsub>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008baa:	f7f7 ff9f 	bl	8000aec <__aeabi_dcmplt>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	f43f af14 	beq.w	80089dc <_dtoa_r+0x43c>
 8008bb4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008bb6:	1e73      	subs	r3, r6, #1
 8008bb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008bba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bbe:	2b30      	cmp	r3, #48	@ 0x30
 8008bc0:	d0f8      	beq.n	8008bb4 <_dtoa_r+0x614>
 8008bc2:	4647      	mov	r7, r8
 8008bc4:	e03b      	b.n	8008c3e <_dtoa_r+0x69e>
 8008bc6:	4b9e      	ldr	r3, [pc, #632]	@ (8008e40 <_dtoa_r+0x8a0>)
 8008bc8:	f7f7 fd1e 	bl	8000608 <__aeabi_dmul>
 8008bcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bd0:	e7bc      	b.n	8008b4c <_dtoa_r+0x5ac>
 8008bd2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008bd6:	4656      	mov	r6, sl
 8008bd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bdc:	4620      	mov	r0, r4
 8008bde:	4629      	mov	r1, r5
 8008be0:	f7f7 fe3c 	bl	800085c <__aeabi_ddiv>
 8008be4:	f7f7 ffc0 	bl	8000b68 <__aeabi_d2iz>
 8008be8:	4680      	mov	r8, r0
 8008bea:	f7f7 fca3 	bl	8000534 <__aeabi_i2d>
 8008bee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bf2:	f7f7 fd09 	bl	8000608 <__aeabi_dmul>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008c02:	f7f7 fb49 	bl	8000298 <__aeabi_dsub>
 8008c06:	f806 4b01 	strb.w	r4, [r6], #1
 8008c0a:	9d03      	ldr	r5, [sp, #12]
 8008c0c:	eba6 040a 	sub.w	r4, r6, sl
 8008c10:	42a5      	cmp	r5, r4
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	d133      	bne.n	8008c80 <_dtoa_r+0x6e0>
 8008c18:	f7f7 fb40 	bl	800029c <__adddf3>
 8008c1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c20:	4604      	mov	r4, r0
 8008c22:	460d      	mov	r5, r1
 8008c24:	f7f7 ff80 	bl	8000b28 <__aeabi_dcmpgt>
 8008c28:	b9c0      	cbnz	r0, 8008c5c <_dtoa_r+0x6bc>
 8008c2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c2e:	4620      	mov	r0, r4
 8008c30:	4629      	mov	r1, r5
 8008c32:	f7f7 ff51 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c36:	b110      	cbz	r0, 8008c3e <_dtoa_r+0x69e>
 8008c38:	f018 0f01 	tst.w	r8, #1
 8008c3c:	d10e      	bne.n	8008c5c <_dtoa_r+0x6bc>
 8008c3e:	9902      	ldr	r1, [sp, #8]
 8008c40:	4648      	mov	r0, r9
 8008c42:	f000 fbbd 	bl	80093c0 <_Bfree>
 8008c46:	2300      	movs	r3, #0
 8008c48:	7033      	strb	r3, [r6, #0]
 8008c4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c4c:	3701      	adds	r7, #1
 8008c4e:	601f      	str	r7, [r3, #0]
 8008c50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 824b 	beq.w	80090ee <_dtoa_r+0xb4e>
 8008c58:	601e      	str	r6, [r3, #0]
 8008c5a:	e248      	b.n	80090ee <_dtoa_r+0xb4e>
 8008c5c:	46b8      	mov	r8, r7
 8008c5e:	4633      	mov	r3, r6
 8008c60:	461e      	mov	r6, r3
 8008c62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c66:	2a39      	cmp	r2, #57	@ 0x39
 8008c68:	d106      	bne.n	8008c78 <_dtoa_r+0x6d8>
 8008c6a:	459a      	cmp	sl, r3
 8008c6c:	d1f8      	bne.n	8008c60 <_dtoa_r+0x6c0>
 8008c6e:	2230      	movs	r2, #48	@ 0x30
 8008c70:	f108 0801 	add.w	r8, r8, #1
 8008c74:	f88a 2000 	strb.w	r2, [sl]
 8008c78:	781a      	ldrb	r2, [r3, #0]
 8008c7a:	3201      	adds	r2, #1
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	e7a0      	b.n	8008bc2 <_dtoa_r+0x622>
 8008c80:	4b6f      	ldr	r3, [pc, #444]	@ (8008e40 <_dtoa_r+0x8a0>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	f7f7 fcc0 	bl	8000608 <__aeabi_dmul>
 8008c88:	2200      	movs	r2, #0
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	460d      	mov	r5, r1
 8008c90:	f7f7 ff22 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d09f      	beq.n	8008bd8 <_dtoa_r+0x638>
 8008c98:	e7d1      	b.n	8008c3e <_dtoa_r+0x69e>
 8008c9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c9c:	2a00      	cmp	r2, #0
 8008c9e:	f000 80ea 	beq.w	8008e76 <_dtoa_r+0x8d6>
 8008ca2:	9a07      	ldr	r2, [sp, #28]
 8008ca4:	2a01      	cmp	r2, #1
 8008ca6:	f300 80cd 	bgt.w	8008e44 <_dtoa_r+0x8a4>
 8008caa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008cac:	2a00      	cmp	r2, #0
 8008cae:	f000 80c1 	beq.w	8008e34 <_dtoa_r+0x894>
 8008cb2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008cb6:	9c08      	ldr	r4, [sp, #32]
 8008cb8:	9e00      	ldr	r6, [sp, #0]
 8008cba:	9a00      	ldr	r2, [sp, #0]
 8008cbc:	441a      	add	r2, r3
 8008cbe:	9200      	str	r2, [sp, #0]
 8008cc0:	9a06      	ldr	r2, [sp, #24]
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	441a      	add	r2, r3
 8008cc6:	4648      	mov	r0, r9
 8008cc8:	9206      	str	r2, [sp, #24]
 8008cca:	f000 fc77 	bl	80095bc <__i2b>
 8008cce:	4605      	mov	r5, r0
 8008cd0:	b166      	cbz	r6, 8008cec <_dtoa_r+0x74c>
 8008cd2:	9b06      	ldr	r3, [sp, #24]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	dd09      	ble.n	8008cec <_dtoa_r+0x74c>
 8008cd8:	42b3      	cmp	r3, r6
 8008cda:	9a00      	ldr	r2, [sp, #0]
 8008cdc:	bfa8      	it	ge
 8008cde:	4633      	movge	r3, r6
 8008ce0:	1ad2      	subs	r2, r2, r3
 8008ce2:	9200      	str	r2, [sp, #0]
 8008ce4:	9a06      	ldr	r2, [sp, #24]
 8008ce6:	1af6      	subs	r6, r6, r3
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	9306      	str	r3, [sp, #24]
 8008cec:	9b08      	ldr	r3, [sp, #32]
 8008cee:	b30b      	cbz	r3, 8008d34 <_dtoa_r+0x794>
 8008cf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 80c6 	beq.w	8008e84 <_dtoa_r+0x8e4>
 8008cf8:	2c00      	cmp	r4, #0
 8008cfa:	f000 80c0 	beq.w	8008e7e <_dtoa_r+0x8de>
 8008cfe:	4629      	mov	r1, r5
 8008d00:	4622      	mov	r2, r4
 8008d02:	4648      	mov	r0, r9
 8008d04:	f000 fd12 	bl	800972c <__pow5mult>
 8008d08:	9a02      	ldr	r2, [sp, #8]
 8008d0a:	4601      	mov	r1, r0
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	4648      	mov	r0, r9
 8008d10:	f000 fc6a 	bl	80095e8 <__multiply>
 8008d14:	9902      	ldr	r1, [sp, #8]
 8008d16:	4680      	mov	r8, r0
 8008d18:	4648      	mov	r0, r9
 8008d1a:	f000 fb51 	bl	80093c0 <_Bfree>
 8008d1e:	9b08      	ldr	r3, [sp, #32]
 8008d20:	1b1b      	subs	r3, r3, r4
 8008d22:	9308      	str	r3, [sp, #32]
 8008d24:	f000 80b1 	beq.w	8008e8a <_dtoa_r+0x8ea>
 8008d28:	9a08      	ldr	r2, [sp, #32]
 8008d2a:	4641      	mov	r1, r8
 8008d2c:	4648      	mov	r0, r9
 8008d2e:	f000 fcfd 	bl	800972c <__pow5mult>
 8008d32:	9002      	str	r0, [sp, #8]
 8008d34:	2101      	movs	r1, #1
 8008d36:	4648      	mov	r0, r9
 8008d38:	f000 fc40 	bl	80095bc <__i2b>
 8008d3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d3e:	4604      	mov	r4, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 81d8 	beq.w	80090f6 <_dtoa_r+0xb56>
 8008d46:	461a      	mov	r2, r3
 8008d48:	4601      	mov	r1, r0
 8008d4a:	4648      	mov	r0, r9
 8008d4c:	f000 fcee 	bl	800972c <__pow5mult>
 8008d50:	9b07      	ldr	r3, [sp, #28]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	4604      	mov	r4, r0
 8008d56:	f300 809f 	bgt.w	8008e98 <_dtoa_r+0x8f8>
 8008d5a:	9b04      	ldr	r3, [sp, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f040 8097 	bne.w	8008e90 <_dtoa_r+0x8f0>
 8008d62:	9b05      	ldr	r3, [sp, #20]
 8008d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f040 8093 	bne.w	8008e94 <_dtoa_r+0x8f4>
 8008d6e:	9b05      	ldr	r3, [sp, #20]
 8008d70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d74:	0d1b      	lsrs	r3, r3, #20
 8008d76:	051b      	lsls	r3, r3, #20
 8008d78:	b133      	cbz	r3, 8008d88 <_dtoa_r+0x7e8>
 8008d7a:	9b00      	ldr	r3, [sp, #0]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	9b06      	ldr	r3, [sp, #24]
 8008d82:	3301      	adds	r3, #1
 8008d84:	9306      	str	r3, [sp, #24]
 8008d86:	2301      	movs	r3, #1
 8008d88:	9308      	str	r3, [sp, #32]
 8008d8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 81b8 	beq.w	8009102 <_dtoa_r+0xb62>
 8008d92:	6923      	ldr	r3, [r4, #16]
 8008d94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d98:	6918      	ldr	r0, [r3, #16]
 8008d9a:	f000 fbc3 	bl	8009524 <__hi0bits>
 8008d9e:	f1c0 0020 	rsb	r0, r0, #32
 8008da2:	9b06      	ldr	r3, [sp, #24]
 8008da4:	4418      	add	r0, r3
 8008da6:	f010 001f 	ands.w	r0, r0, #31
 8008daa:	f000 8082 	beq.w	8008eb2 <_dtoa_r+0x912>
 8008dae:	f1c0 0320 	rsb	r3, r0, #32
 8008db2:	2b04      	cmp	r3, #4
 8008db4:	dd73      	ble.n	8008e9e <_dtoa_r+0x8fe>
 8008db6:	9b00      	ldr	r3, [sp, #0]
 8008db8:	f1c0 001c 	rsb	r0, r0, #28
 8008dbc:	4403      	add	r3, r0
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	9b06      	ldr	r3, [sp, #24]
 8008dc2:	4403      	add	r3, r0
 8008dc4:	4406      	add	r6, r0
 8008dc6:	9306      	str	r3, [sp, #24]
 8008dc8:	9b00      	ldr	r3, [sp, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	dd05      	ble.n	8008dda <_dtoa_r+0x83a>
 8008dce:	9902      	ldr	r1, [sp, #8]
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4648      	mov	r0, r9
 8008dd4:	f000 fd04 	bl	80097e0 <__lshift>
 8008dd8:	9002      	str	r0, [sp, #8]
 8008dda:	9b06      	ldr	r3, [sp, #24]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	dd05      	ble.n	8008dec <_dtoa_r+0x84c>
 8008de0:	4621      	mov	r1, r4
 8008de2:	461a      	mov	r2, r3
 8008de4:	4648      	mov	r0, r9
 8008de6:	f000 fcfb 	bl	80097e0 <__lshift>
 8008dea:	4604      	mov	r4, r0
 8008dec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d061      	beq.n	8008eb6 <_dtoa_r+0x916>
 8008df2:	9802      	ldr	r0, [sp, #8]
 8008df4:	4621      	mov	r1, r4
 8008df6:	f000 fd5f 	bl	80098b8 <__mcmp>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	da5b      	bge.n	8008eb6 <_dtoa_r+0x916>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	9902      	ldr	r1, [sp, #8]
 8008e02:	220a      	movs	r2, #10
 8008e04:	4648      	mov	r0, r9
 8008e06:	f000 fafd 	bl	8009404 <__multadd>
 8008e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e0c:	9002      	str	r0, [sp, #8]
 8008e0e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 8177 	beq.w	8009106 <_dtoa_r+0xb66>
 8008e18:	4629      	mov	r1, r5
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	220a      	movs	r2, #10
 8008e1e:	4648      	mov	r0, r9
 8008e20:	f000 faf0 	bl	8009404 <__multadd>
 8008e24:	f1bb 0f00 	cmp.w	fp, #0
 8008e28:	4605      	mov	r5, r0
 8008e2a:	dc6f      	bgt.n	8008f0c <_dtoa_r+0x96c>
 8008e2c:	9b07      	ldr	r3, [sp, #28]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	dc49      	bgt.n	8008ec6 <_dtoa_r+0x926>
 8008e32:	e06b      	b.n	8008f0c <_dtoa_r+0x96c>
 8008e34:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008e36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008e3a:	e73c      	b.n	8008cb6 <_dtoa_r+0x716>
 8008e3c:	3fe00000 	.word	0x3fe00000
 8008e40:	40240000 	.word	0x40240000
 8008e44:	9b03      	ldr	r3, [sp, #12]
 8008e46:	1e5c      	subs	r4, r3, #1
 8008e48:	9b08      	ldr	r3, [sp, #32]
 8008e4a:	42a3      	cmp	r3, r4
 8008e4c:	db09      	blt.n	8008e62 <_dtoa_r+0x8c2>
 8008e4e:	1b1c      	subs	r4, r3, r4
 8008e50:	9b03      	ldr	r3, [sp, #12]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f6bf af30 	bge.w	8008cb8 <_dtoa_r+0x718>
 8008e58:	9b00      	ldr	r3, [sp, #0]
 8008e5a:	9a03      	ldr	r2, [sp, #12]
 8008e5c:	1a9e      	subs	r6, r3, r2
 8008e5e:	2300      	movs	r3, #0
 8008e60:	e72b      	b.n	8008cba <_dtoa_r+0x71a>
 8008e62:	9b08      	ldr	r3, [sp, #32]
 8008e64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e66:	9408      	str	r4, [sp, #32]
 8008e68:	1ae3      	subs	r3, r4, r3
 8008e6a:	441a      	add	r2, r3
 8008e6c:	9e00      	ldr	r6, [sp, #0]
 8008e6e:	9b03      	ldr	r3, [sp, #12]
 8008e70:	920d      	str	r2, [sp, #52]	@ 0x34
 8008e72:	2400      	movs	r4, #0
 8008e74:	e721      	b.n	8008cba <_dtoa_r+0x71a>
 8008e76:	9c08      	ldr	r4, [sp, #32]
 8008e78:	9e00      	ldr	r6, [sp, #0]
 8008e7a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008e7c:	e728      	b.n	8008cd0 <_dtoa_r+0x730>
 8008e7e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008e82:	e751      	b.n	8008d28 <_dtoa_r+0x788>
 8008e84:	9a08      	ldr	r2, [sp, #32]
 8008e86:	9902      	ldr	r1, [sp, #8]
 8008e88:	e750      	b.n	8008d2c <_dtoa_r+0x78c>
 8008e8a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008e8e:	e751      	b.n	8008d34 <_dtoa_r+0x794>
 8008e90:	2300      	movs	r3, #0
 8008e92:	e779      	b.n	8008d88 <_dtoa_r+0x7e8>
 8008e94:	9b04      	ldr	r3, [sp, #16]
 8008e96:	e777      	b.n	8008d88 <_dtoa_r+0x7e8>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	9308      	str	r3, [sp, #32]
 8008e9c:	e779      	b.n	8008d92 <_dtoa_r+0x7f2>
 8008e9e:	d093      	beq.n	8008dc8 <_dtoa_r+0x828>
 8008ea0:	9a00      	ldr	r2, [sp, #0]
 8008ea2:	331c      	adds	r3, #28
 8008ea4:	441a      	add	r2, r3
 8008ea6:	9200      	str	r2, [sp, #0]
 8008ea8:	9a06      	ldr	r2, [sp, #24]
 8008eaa:	441a      	add	r2, r3
 8008eac:	441e      	add	r6, r3
 8008eae:	9206      	str	r2, [sp, #24]
 8008eb0:	e78a      	b.n	8008dc8 <_dtoa_r+0x828>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	e7f4      	b.n	8008ea0 <_dtoa_r+0x900>
 8008eb6:	9b03      	ldr	r3, [sp, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	46b8      	mov	r8, r7
 8008ebc:	dc20      	bgt.n	8008f00 <_dtoa_r+0x960>
 8008ebe:	469b      	mov	fp, r3
 8008ec0:	9b07      	ldr	r3, [sp, #28]
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	dd1e      	ble.n	8008f04 <_dtoa_r+0x964>
 8008ec6:	f1bb 0f00 	cmp.w	fp, #0
 8008eca:	f47f adb1 	bne.w	8008a30 <_dtoa_r+0x490>
 8008ece:	4621      	mov	r1, r4
 8008ed0:	465b      	mov	r3, fp
 8008ed2:	2205      	movs	r2, #5
 8008ed4:	4648      	mov	r0, r9
 8008ed6:	f000 fa95 	bl	8009404 <__multadd>
 8008eda:	4601      	mov	r1, r0
 8008edc:	4604      	mov	r4, r0
 8008ede:	9802      	ldr	r0, [sp, #8]
 8008ee0:	f000 fcea 	bl	80098b8 <__mcmp>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	f77f ada3 	ble.w	8008a30 <_dtoa_r+0x490>
 8008eea:	4656      	mov	r6, sl
 8008eec:	2331      	movs	r3, #49	@ 0x31
 8008eee:	f806 3b01 	strb.w	r3, [r6], #1
 8008ef2:	f108 0801 	add.w	r8, r8, #1
 8008ef6:	e59f      	b.n	8008a38 <_dtoa_r+0x498>
 8008ef8:	9c03      	ldr	r4, [sp, #12]
 8008efa:	46b8      	mov	r8, r7
 8008efc:	4625      	mov	r5, r4
 8008efe:	e7f4      	b.n	8008eea <_dtoa_r+0x94a>
 8008f00:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f000 8101 	beq.w	800910e <_dtoa_r+0xb6e>
 8008f0c:	2e00      	cmp	r6, #0
 8008f0e:	dd05      	ble.n	8008f1c <_dtoa_r+0x97c>
 8008f10:	4629      	mov	r1, r5
 8008f12:	4632      	mov	r2, r6
 8008f14:	4648      	mov	r0, r9
 8008f16:	f000 fc63 	bl	80097e0 <__lshift>
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	9b08      	ldr	r3, [sp, #32]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d05c      	beq.n	8008fdc <_dtoa_r+0xa3c>
 8008f22:	6869      	ldr	r1, [r5, #4]
 8008f24:	4648      	mov	r0, r9
 8008f26:	f000 fa0b 	bl	8009340 <_Balloc>
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	b928      	cbnz	r0, 8008f3a <_dtoa_r+0x99a>
 8008f2e:	4b82      	ldr	r3, [pc, #520]	@ (8009138 <_dtoa_r+0xb98>)
 8008f30:	4602      	mov	r2, r0
 8008f32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008f36:	f7ff bb4a 	b.w	80085ce <_dtoa_r+0x2e>
 8008f3a:	692a      	ldr	r2, [r5, #16]
 8008f3c:	3202      	adds	r2, #2
 8008f3e:	0092      	lsls	r2, r2, #2
 8008f40:	f105 010c 	add.w	r1, r5, #12
 8008f44:	300c      	adds	r0, #12
 8008f46:	f001 ff69 	bl	800ae1c <memcpy>
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	4631      	mov	r1, r6
 8008f4e:	4648      	mov	r0, r9
 8008f50:	f000 fc46 	bl	80097e0 <__lshift>
 8008f54:	f10a 0301 	add.w	r3, sl, #1
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	eb0a 030b 	add.w	r3, sl, fp
 8008f5e:	9308      	str	r3, [sp, #32]
 8008f60:	9b04      	ldr	r3, [sp, #16]
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	462f      	mov	r7, r5
 8008f68:	9306      	str	r3, [sp, #24]
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	9b00      	ldr	r3, [sp, #0]
 8008f6e:	9802      	ldr	r0, [sp, #8]
 8008f70:	4621      	mov	r1, r4
 8008f72:	f103 3bff 	add.w	fp, r3, #4294967295
 8008f76:	f7ff fa8b 	bl	8008490 <quorem>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	3330      	adds	r3, #48	@ 0x30
 8008f7e:	9003      	str	r0, [sp, #12]
 8008f80:	4639      	mov	r1, r7
 8008f82:	9802      	ldr	r0, [sp, #8]
 8008f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f86:	f000 fc97 	bl	80098b8 <__mcmp>
 8008f8a:	462a      	mov	r2, r5
 8008f8c:	9004      	str	r0, [sp, #16]
 8008f8e:	4621      	mov	r1, r4
 8008f90:	4648      	mov	r0, r9
 8008f92:	f000 fcad 	bl	80098f0 <__mdiff>
 8008f96:	68c2      	ldr	r2, [r0, #12]
 8008f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	bb02      	cbnz	r2, 8008fe0 <_dtoa_r+0xa40>
 8008f9e:	4601      	mov	r1, r0
 8008fa0:	9802      	ldr	r0, [sp, #8]
 8008fa2:	f000 fc89 	bl	80098b8 <__mcmp>
 8008fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fa8:	4602      	mov	r2, r0
 8008faa:	4631      	mov	r1, r6
 8008fac:	4648      	mov	r0, r9
 8008fae:	920c      	str	r2, [sp, #48]	@ 0x30
 8008fb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fb2:	f000 fa05 	bl	80093c0 <_Bfree>
 8008fb6:	9b07      	ldr	r3, [sp, #28]
 8008fb8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008fba:	9e00      	ldr	r6, [sp, #0]
 8008fbc:	ea42 0103 	orr.w	r1, r2, r3
 8008fc0:	9b06      	ldr	r3, [sp, #24]
 8008fc2:	4319      	orrs	r1, r3
 8008fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc6:	d10d      	bne.n	8008fe4 <_dtoa_r+0xa44>
 8008fc8:	2b39      	cmp	r3, #57	@ 0x39
 8008fca:	d027      	beq.n	800901c <_dtoa_r+0xa7c>
 8008fcc:	9a04      	ldr	r2, [sp, #16]
 8008fce:	2a00      	cmp	r2, #0
 8008fd0:	dd01      	ble.n	8008fd6 <_dtoa_r+0xa36>
 8008fd2:	9b03      	ldr	r3, [sp, #12]
 8008fd4:	3331      	adds	r3, #49	@ 0x31
 8008fd6:	f88b 3000 	strb.w	r3, [fp]
 8008fda:	e52e      	b.n	8008a3a <_dtoa_r+0x49a>
 8008fdc:	4628      	mov	r0, r5
 8008fde:	e7b9      	b.n	8008f54 <_dtoa_r+0x9b4>
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	e7e2      	b.n	8008faa <_dtoa_r+0xa0a>
 8008fe4:	9904      	ldr	r1, [sp, #16]
 8008fe6:	2900      	cmp	r1, #0
 8008fe8:	db04      	blt.n	8008ff4 <_dtoa_r+0xa54>
 8008fea:	9807      	ldr	r0, [sp, #28]
 8008fec:	4301      	orrs	r1, r0
 8008fee:	9806      	ldr	r0, [sp, #24]
 8008ff0:	4301      	orrs	r1, r0
 8008ff2:	d120      	bne.n	8009036 <_dtoa_r+0xa96>
 8008ff4:	2a00      	cmp	r2, #0
 8008ff6:	ddee      	ble.n	8008fd6 <_dtoa_r+0xa36>
 8008ff8:	9902      	ldr	r1, [sp, #8]
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	4648      	mov	r0, r9
 8009000:	f000 fbee 	bl	80097e0 <__lshift>
 8009004:	4621      	mov	r1, r4
 8009006:	9002      	str	r0, [sp, #8]
 8009008:	f000 fc56 	bl	80098b8 <__mcmp>
 800900c:	2800      	cmp	r0, #0
 800900e:	9b00      	ldr	r3, [sp, #0]
 8009010:	dc02      	bgt.n	8009018 <_dtoa_r+0xa78>
 8009012:	d1e0      	bne.n	8008fd6 <_dtoa_r+0xa36>
 8009014:	07da      	lsls	r2, r3, #31
 8009016:	d5de      	bpl.n	8008fd6 <_dtoa_r+0xa36>
 8009018:	2b39      	cmp	r3, #57	@ 0x39
 800901a:	d1da      	bne.n	8008fd2 <_dtoa_r+0xa32>
 800901c:	2339      	movs	r3, #57	@ 0x39
 800901e:	f88b 3000 	strb.w	r3, [fp]
 8009022:	4633      	mov	r3, r6
 8009024:	461e      	mov	r6, r3
 8009026:	3b01      	subs	r3, #1
 8009028:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800902c:	2a39      	cmp	r2, #57	@ 0x39
 800902e:	d04e      	beq.n	80090ce <_dtoa_r+0xb2e>
 8009030:	3201      	adds	r2, #1
 8009032:	701a      	strb	r2, [r3, #0]
 8009034:	e501      	b.n	8008a3a <_dtoa_r+0x49a>
 8009036:	2a00      	cmp	r2, #0
 8009038:	dd03      	ble.n	8009042 <_dtoa_r+0xaa2>
 800903a:	2b39      	cmp	r3, #57	@ 0x39
 800903c:	d0ee      	beq.n	800901c <_dtoa_r+0xa7c>
 800903e:	3301      	adds	r3, #1
 8009040:	e7c9      	b.n	8008fd6 <_dtoa_r+0xa36>
 8009042:	9a00      	ldr	r2, [sp, #0]
 8009044:	9908      	ldr	r1, [sp, #32]
 8009046:	f802 3c01 	strb.w	r3, [r2, #-1]
 800904a:	428a      	cmp	r2, r1
 800904c:	d028      	beq.n	80090a0 <_dtoa_r+0xb00>
 800904e:	9902      	ldr	r1, [sp, #8]
 8009050:	2300      	movs	r3, #0
 8009052:	220a      	movs	r2, #10
 8009054:	4648      	mov	r0, r9
 8009056:	f000 f9d5 	bl	8009404 <__multadd>
 800905a:	42af      	cmp	r7, r5
 800905c:	9002      	str	r0, [sp, #8]
 800905e:	f04f 0300 	mov.w	r3, #0
 8009062:	f04f 020a 	mov.w	r2, #10
 8009066:	4639      	mov	r1, r7
 8009068:	4648      	mov	r0, r9
 800906a:	d107      	bne.n	800907c <_dtoa_r+0xadc>
 800906c:	f000 f9ca 	bl	8009404 <__multadd>
 8009070:	4607      	mov	r7, r0
 8009072:	4605      	mov	r5, r0
 8009074:	9b00      	ldr	r3, [sp, #0]
 8009076:	3301      	adds	r3, #1
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	e777      	b.n	8008f6c <_dtoa_r+0x9cc>
 800907c:	f000 f9c2 	bl	8009404 <__multadd>
 8009080:	4629      	mov	r1, r5
 8009082:	4607      	mov	r7, r0
 8009084:	2300      	movs	r3, #0
 8009086:	220a      	movs	r2, #10
 8009088:	4648      	mov	r0, r9
 800908a:	f000 f9bb 	bl	8009404 <__multadd>
 800908e:	4605      	mov	r5, r0
 8009090:	e7f0      	b.n	8009074 <_dtoa_r+0xad4>
 8009092:	f1bb 0f00 	cmp.w	fp, #0
 8009096:	bfcc      	ite	gt
 8009098:	465e      	movgt	r6, fp
 800909a:	2601      	movle	r6, #1
 800909c:	4456      	add	r6, sl
 800909e:	2700      	movs	r7, #0
 80090a0:	9902      	ldr	r1, [sp, #8]
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	2201      	movs	r2, #1
 80090a6:	4648      	mov	r0, r9
 80090a8:	f000 fb9a 	bl	80097e0 <__lshift>
 80090ac:	4621      	mov	r1, r4
 80090ae:	9002      	str	r0, [sp, #8]
 80090b0:	f000 fc02 	bl	80098b8 <__mcmp>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	dcb4      	bgt.n	8009022 <_dtoa_r+0xa82>
 80090b8:	d102      	bne.n	80090c0 <_dtoa_r+0xb20>
 80090ba:	9b00      	ldr	r3, [sp, #0]
 80090bc:	07db      	lsls	r3, r3, #31
 80090be:	d4b0      	bmi.n	8009022 <_dtoa_r+0xa82>
 80090c0:	4633      	mov	r3, r6
 80090c2:	461e      	mov	r6, r3
 80090c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090c8:	2a30      	cmp	r2, #48	@ 0x30
 80090ca:	d0fa      	beq.n	80090c2 <_dtoa_r+0xb22>
 80090cc:	e4b5      	b.n	8008a3a <_dtoa_r+0x49a>
 80090ce:	459a      	cmp	sl, r3
 80090d0:	d1a8      	bne.n	8009024 <_dtoa_r+0xa84>
 80090d2:	2331      	movs	r3, #49	@ 0x31
 80090d4:	f108 0801 	add.w	r8, r8, #1
 80090d8:	f88a 3000 	strb.w	r3, [sl]
 80090dc:	e4ad      	b.n	8008a3a <_dtoa_r+0x49a>
 80090de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80090e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800913c <_dtoa_r+0xb9c>
 80090e4:	b11b      	cbz	r3, 80090ee <_dtoa_r+0xb4e>
 80090e6:	f10a 0308 	add.w	r3, sl, #8
 80090ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80090ec:	6013      	str	r3, [r2, #0]
 80090ee:	4650      	mov	r0, sl
 80090f0:	b017      	add	sp, #92	@ 0x5c
 80090f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f6:	9b07      	ldr	r3, [sp, #28]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	f77f ae2e 	ble.w	8008d5a <_dtoa_r+0x7ba>
 80090fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009100:	9308      	str	r3, [sp, #32]
 8009102:	2001      	movs	r0, #1
 8009104:	e64d      	b.n	8008da2 <_dtoa_r+0x802>
 8009106:	f1bb 0f00 	cmp.w	fp, #0
 800910a:	f77f aed9 	ble.w	8008ec0 <_dtoa_r+0x920>
 800910e:	4656      	mov	r6, sl
 8009110:	9802      	ldr	r0, [sp, #8]
 8009112:	4621      	mov	r1, r4
 8009114:	f7ff f9bc 	bl	8008490 <quorem>
 8009118:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800911c:	f806 3b01 	strb.w	r3, [r6], #1
 8009120:	eba6 020a 	sub.w	r2, r6, sl
 8009124:	4593      	cmp	fp, r2
 8009126:	ddb4      	ble.n	8009092 <_dtoa_r+0xaf2>
 8009128:	9902      	ldr	r1, [sp, #8]
 800912a:	2300      	movs	r3, #0
 800912c:	220a      	movs	r2, #10
 800912e:	4648      	mov	r0, r9
 8009130:	f000 f968 	bl	8009404 <__multadd>
 8009134:	9002      	str	r0, [sp, #8]
 8009136:	e7eb      	b.n	8009110 <_dtoa_r+0xb70>
 8009138:	0800c269 	.word	0x0800c269
 800913c:	0800c1ed 	.word	0x0800c1ed

08009140 <_free_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	4605      	mov	r5, r0
 8009144:	2900      	cmp	r1, #0
 8009146:	d041      	beq.n	80091cc <_free_r+0x8c>
 8009148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800914c:	1f0c      	subs	r4, r1, #4
 800914e:	2b00      	cmp	r3, #0
 8009150:	bfb8      	it	lt
 8009152:	18e4      	addlt	r4, r4, r3
 8009154:	f000 f8e8 	bl	8009328 <__malloc_lock>
 8009158:	4a1d      	ldr	r2, [pc, #116]	@ (80091d0 <_free_r+0x90>)
 800915a:	6813      	ldr	r3, [r2, #0]
 800915c:	b933      	cbnz	r3, 800916c <_free_r+0x2c>
 800915e:	6063      	str	r3, [r4, #4]
 8009160:	6014      	str	r4, [r2, #0]
 8009162:	4628      	mov	r0, r5
 8009164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009168:	f000 b8e4 	b.w	8009334 <__malloc_unlock>
 800916c:	42a3      	cmp	r3, r4
 800916e:	d908      	bls.n	8009182 <_free_r+0x42>
 8009170:	6820      	ldr	r0, [r4, #0]
 8009172:	1821      	adds	r1, r4, r0
 8009174:	428b      	cmp	r3, r1
 8009176:	bf01      	itttt	eq
 8009178:	6819      	ldreq	r1, [r3, #0]
 800917a:	685b      	ldreq	r3, [r3, #4]
 800917c:	1809      	addeq	r1, r1, r0
 800917e:	6021      	streq	r1, [r4, #0]
 8009180:	e7ed      	b.n	800915e <_free_r+0x1e>
 8009182:	461a      	mov	r2, r3
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	b10b      	cbz	r3, 800918c <_free_r+0x4c>
 8009188:	42a3      	cmp	r3, r4
 800918a:	d9fa      	bls.n	8009182 <_free_r+0x42>
 800918c:	6811      	ldr	r1, [r2, #0]
 800918e:	1850      	adds	r0, r2, r1
 8009190:	42a0      	cmp	r0, r4
 8009192:	d10b      	bne.n	80091ac <_free_r+0x6c>
 8009194:	6820      	ldr	r0, [r4, #0]
 8009196:	4401      	add	r1, r0
 8009198:	1850      	adds	r0, r2, r1
 800919a:	4283      	cmp	r3, r0
 800919c:	6011      	str	r1, [r2, #0]
 800919e:	d1e0      	bne.n	8009162 <_free_r+0x22>
 80091a0:	6818      	ldr	r0, [r3, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	6053      	str	r3, [r2, #4]
 80091a6:	4408      	add	r0, r1
 80091a8:	6010      	str	r0, [r2, #0]
 80091aa:	e7da      	b.n	8009162 <_free_r+0x22>
 80091ac:	d902      	bls.n	80091b4 <_free_r+0x74>
 80091ae:	230c      	movs	r3, #12
 80091b0:	602b      	str	r3, [r5, #0]
 80091b2:	e7d6      	b.n	8009162 <_free_r+0x22>
 80091b4:	6820      	ldr	r0, [r4, #0]
 80091b6:	1821      	adds	r1, r4, r0
 80091b8:	428b      	cmp	r3, r1
 80091ba:	bf04      	itt	eq
 80091bc:	6819      	ldreq	r1, [r3, #0]
 80091be:	685b      	ldreq	r3, [r3, #4]
 80091c0:	6063      	str	r3, [r4, #4]
 80091c2:	bf04      	itt	eq
 80091c4:	1809      	addeq	r1, r1, r0
 80091c6:	6021      	streq	r1, [r4, #0]
 80091c8:	6054      	str	r4, [r2, #4]
 80091ca:	e7ca      	b.n	8009162 <_free_r+0x22>
 80091cc:	bd38      	pop	{r3, r4, r5, pc}
 80091ce:	bf00      	nop
 80091d0:	20000740 	.word	0x20000740

080091d4 <malloc>:
 80091d4:	4b02      	ldr	r3, [pc, #8]	@ (80091e0 <malloc+0xc>)
 80091d6:	4601      	mov	r1, r0
 80091d8:	6818      	ldr	r0, [r3, #0]
 80091da:	f000 b825 	b.w	8009228 <_malloc_r>
 80091de:	bf00      	nop
 80091e0:	20000030 	.word	0x20000030

080091e4 <sbrk_aligned>:
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	4e0f      	ldr	r6, [pc, #60]	@ (8009224 <sbrk_aligned+0x40>)
 80091e8:	460c      	mov	r4, r1
 80091ea:	6831      	ldr	r1, [r6, #0]
 80091ec:	4605      	mov	r5, r0
 80091ee:	b911      	cbnz	r1, 80091f6 <sbrk_aligned+0x12>
 80091f0:	f001 fe04 	bl	800adfc <_sbrk_r>
 80091f4:	6030      	str	r0, [r6, #0]
 80091f6:	4621      	mov	r1, r4
 80091f8:	4628      	mov	r0, r5
 80091fa:	f001 fdff 	bl	800adfc <_sbrk_r>
 80091fe:	1c43      	adds	r3, r0, #1
 8009200:	d103      	bne.n	800920a <sbrk_aligned+0x26>
 8009202:	f04f 34ff 	mov.w	r4, #4294967295
 8009206:	4620      	mov	r0, r4
 8009208:	bd70      	pop	{r4, r5, r6, pc}
 800920a:	1cc4      	adds	r4, r0, #3
 800920c:	f024 0403 	bic.w	r4, r4, #3
 8009210:	42a0      	cmp	r0, r4
 8009212:	d0f8      	beq.n	8009206 <sbrk_aligned+0x22>
 8009214:	1a21      	subs	r1, r4, r0
 8009216:	4628      	mov	r0, r5
 8009218:	f001 fdf0 	bl	800adfc <_sbrk_r>
 800921c:	3001      	adds	r0, #1
 800921e:	d1f2      	bne.n	8009206 <sbrk_aligned+0x22>
 8009220:	e7ef      	b.n	8009202 <sbrk_aligned+0x1e>
 8009222:	bf00      	nop
 8009224:	2000073c 	.word	0x2000073c

08009228 <_malloc_r>:
 8009228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800922c:	1ccd      	adds	r5, r1, #3
 800922e:	f025 0503 	bic.w	r5, r5, #3
 8009232:	3508      	adds	r5, #8
 8009234:	2d0c      	cmp	r5, #12
 8009236:	bf38      	it	cc
 8009238:	250c      	movcc	r5, #12
 800923a:	2d00      	cmp	r5, #0
 800923c:	4606      	mov	r6, r0
 800923e:	db01      	blt.n	8009244 <_malloc_r+0x1c>
 8009240:	42a9      	cmp	r1, r5
 8009242:	d904      	bls.n	800924e <_malloc_r+0x26>
 8009244:	230c      	movs	r3, #12
 8009246:	6033      	str	r3, [r6, #0]
 8009248:	2000      	movs	r0, #0
 800924a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800924e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009324 <_malloc_r+0xfc>
 8009252:	f000 f869 	bl	8009328 <__malloc_lock>
 8009256:	f8d8 3000 	ldr.w	r3, [r8]
 800925a:	461c      	mov	r4, r3
 800925c:	bb44      	cbnz	r4, 80092b0 <_malloc_r+0x88>
 800925e:	4629      	mov	r1, r5
 8009260:	4630      	mov	r0, r6
 8009262:	f7ff ffbf 	bl	80091e4 <sbrk_aligned>
 8009266:	1c43      	adds	r3, r0, #1
 8009268:	4604      	mov	r4, r0
 800926a:	d158      	bne.n	800931e <_malloc_r+0xf6>
 800926c:	f8d8 4000 	ldr.w	r4, [r8]
 8009270:	4627      	mov	r7, r4
 8009272:	2f00      	cmp	r7, #0
 8009274:	d143      	bne.n	80092fe <_malloc_r+0xd6>
 8009276:	2c00      	cmp	r4, #0
 8009278:	d04b      	beq.n	8009312 <_malloc_r+0xea>
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	4639      	mov	r1, r7
 800927e:	4630      	mov	r0, r6
 8009280:	eb04 0903 	add.w	r9, r4, r3
 8009284:	f001 fdba 	bl	800adfc <_sbrk_r>
 8009288:	4581      	cmp	r9, r0
 800928a:	d142      	bne.n	8009312 <_malloc_r+0xea>
 800928c:	6821      	ldr	r1, [r4, #0]
 800928e:	1a6d      	subs	r5, r5, r1
 8009290:	4629      	mov	r1, r5
 8009292:	4630      	mov	r0, r6
 8009294:	f7ff ffa6 	bl	80091e4 <sbrk_aligned>
 8009298:	3001      	adds	r0, #1
 800929a:	d03a      	beq.n	8009312 <_malloc_r+0xea>
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	442b      	add	r3, r5
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	f8d8 3000 	ldr.w	r3, [r8]
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	bb62      	cbnz	r2, 8009304 <_malloc_r+0xdc>
 80092aa:	f8c8 7000 	str.w	r7, [r8]
 80092ae:	e00f      	b.n	80092d0 <_malloc_r+0xa8>
 80092b0:	6822      	ldr	r2, [r4, #0]
 80092b2:	1b52      	subs	r2, r2, r5
 80092b4:	d420      	bmi.n	80092f8 <_malloc_r+0xd0>
 80092b6:	2a0b      	cmp	r2, #11
 80092b8:	d917      	bls.n	80092ea <_malloc_r+0xc2>
 80092ba:	1961      	adds	r1, r4, r5
 80092bc:	42a3      	cmp	r3, r4
 80092be:	6025      	str	r5, [r4, #0]
 80092c0:	bf18      	it	ne
 80092c2:	6059      	strne	r1, [r3, #4]
 80092c4:	6863      	ldr	r3, [r4, #4]
 80092c6:	bf08      	it	eq
 80092c8:	f8c8 1000 	streq.w	r1, [r8]
 80092cc:	5162      	str	r2, [r4, r5]
 80092ce:	604b      	str	r3, [r1, #4]
 80092d0:	4630      	mov	r0, r6
 80092d2:	f000 f82f 	bl	8009334 <__malloc_unlock>
 80092d6:	f104 000b 	add.w	r0, r4, #11
 80092da:	1d23      	adds	r3, r4, #4
 80092dc:	f020 0007 	bic.w	r0, r0, #7
 80092e0:	1ac2      	subs	r2, r0, r3
 80092e2:	bf1c      	itt	ne
 80092e4:	1a1b      	subne	r3, r3, r0
 80092e6:	50a3      	strne	r3, [r4, r2]
 80092e8:	e7af      	b.n	800924a <_malloc_r+0x22>
 80092ea:	6862      	ldr	r2, [r4, #4]
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	bf0c      	ite	eq
 80092f0:	f8c8 2000 	streq.w	r2, [r8]
 80092f4:	605a      	strne	r2, [r3, #4]
 80092f6:	e7eb      	b.n	80092d0 <_malloc_r+0xa8>
 80092f8:	4623      	mov	r3, r4
 80092fa:	6864      	ldr	r4, [r4, #4]
 80092fc:	e7ae      	b.n	800925c <_malloc_r+0x34>
 80092fe:	463c      	mov	r4, r7
 8009300:	687f      	ldr	r7, [r7, #4]
 8009302:	e7b6      	b.n	8009272 <_malloc_r+0x4a>
 8009304:	461a      	mov	r2, r3
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	42a3      	cmp	r3, r4
 800930a:	d1fb      	bne.n	8009304 <_malloc_r+0xdc>
 800930c:	2300      	movs	r3, #0
 800930e:	6053      	str	r3, [r2, #4]
 8009310:	e7de      	b.n	80092d0 <_malloc_r+0xa8>
 8009312:	230c      	movs	r3, #12
 8009314:	6033      	str	r3, [r6, #0]
 8009316:	4630      	mov	r0, r6
 8009318:	f000 f80c 	bl	8009334 <__malloc_unlock>
 800931c:	e794      	b.n	8009248 <_malloc_r+0x20>
 800931e:	6005      	str	r5, [r0, #0]
 8009320:	e7d6      	b.n	80092d0 <_malloc_r+0xa8>
 8009322:	bf00      	nop
 8009324:	20000740 	.word	0x20000740

08009328 <__malloc_lock>:
 8009328:	4801      	ldr	r0, [pc, #4]	@ (8009330 <__malloc_lock+0x8>)
 800932a:	f7ff b8a8 	b.w	800847e <__retarget_lock_acquire_recursive>
 800932e:	bf00      	nop
 8009330:	20000738 	.word	0x20000738

08009334 <__malloc_unlock>:
 8009334:	4801      	ldr	r0, [pc, #4]	@ (800933c <__malloc_unlock+0x8>)
 8009336:	f7ff b8a3 	b.w	8008480 <__retarget_lock_release_recursive>
 800933a:	bf00      	nop
 800933c:	20000738 	.word	0x20000738

08009340 <_Balloc>:
 8009340:	b570      	push	{r4, r5, r6, lr}
 8009342:	69c6      	ldr	r6, [r0, #28]
 8009344:	4604      	mov	r4, r0
 8009346:	460d      	mov	r5, r1
 8009348:	b976      	cbnz	r6, 8009368 <_Balloc+0x28>
 800934a:	2010      	movs	r0, #16
 800934c:	f7ff ff42 	bl	80091d4 <malloc>
 8009350:	4602      	mov	r2, r0
 8009352:	61e0      	str	r0, [r4, #28]
 8009354:	b920      	cbnz	r0, 8009360 <_Balloc+0x20>
 8009356:	4b18      	ldr	r3, [pc, #96]	@ (80093b8 <_Balloc+0x78>)
 8009358:	4818      	ldr	r0, [pc, #96]	@ (80093bc <_Balloc+0x7c>)
 800935a:	216b      	movs	r1, #107	@ 0x6b
 800935c:	f001 fd74 	bl	800ae48 <__assert_func>
 8009360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009364:	6006      	str	r6, [r0, #0]
 8009366:	60c6      	str	r6, [r0, #12]
 8009368:	69e6      	ldr	r6, [r4, #28]
 800936a:	68f3      	ldr	r3, [r6, #12]
 800936c:	b183      	cbz	r3, 8009390 <_Balloc+0x50>
 800936e:	69e3      	ldr	r3, [r4, #28]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009376:	b9b8      	cbnz	r0, 80093a8 <_Balloc+0x68>
 8009378:	2101      	movs	r1, #1
 800937a:	fa01 f605 	lsl.w	r6, r1, r5
 800937e:	1d72      	adds	r2, r6, #5
 8009380:	0092      	lsls	r2, r2, #2
 8009382:	4620      	mov	r0, r4
 8009384:	f001 fd7e 	bl	800ae84 <_calloc_r>
 8009388:	b160      	cbz	r0, 80093a4 <_Balloc+0x64>
 800938a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800938e:	e00e      	b.n	80093ae <_Balloc+0x6e>
 8009390:	2221      	movs	r2, #33	@ 0x21
 8009392:	2104      	movs	r1, #4
 8009394:	4620      	mov	r0, r4
 8009396:	f001 fd75 	bl	800ae84 <_calloc_r>
 800939a:	69e3      	ldr	r3, [r4, #28]
 800939c:	60f0      	str	r0, [r6, #12]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e4      	bne.n	800936e <_Balloc+0x2e>
 80093a4:	2000      	movs	r0, #0
 80093a6:	bd70      	pop	{r4, r5, r6, pc}
 80093a8:	6802      	ldr	r2, [r0, #0]
 80093aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093ae:	2300      	movs	r3, #0
 80093b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093b4:	e7f7      	b.n	80093a6 <_Balloc+0x66>
 80093b6:	bf00      	nop
 80093b8:	0800c1fa 	.word	0x0800c1fa
 80093bc:	0800c27a 	.word	0x0800c27a

080093c0 <_Bfree>:
 80093c0:	b570      	push	{r4, r5, r6, lr}
 80093c2:	69c6      	ldr	r6, [r0, #28]
 80093c4:	4605      	mov	r5, r0
 80093c6:	460c      	mov	r4, r1
 80093c8:	b976      	cbnz	r6, 80093e8 <_Bfree+0x28>
 80093ca:	2010      	movs	r0, #16
 80093cc:	f7ff ff02 	bl	80091d4 <malloc>
 80093d0:	4602      	mov	r2, r0
 80093d2:	61e8      	str	r0, [r5, #28]
 80093d4:	b920      	cbnz	r0, 80093e0 <_Bfree+0x20>
 80093d6:	4b09      	ldr	r3, [pc, #36]	@ (80093fc <_Bfree+0x3c>)
 80093d8:	4809      	ldr	r0, [pc, #36]	@ (8009400 <_Bfree+0x40>)
 80093da:	218f      	movs	r1, #143	@ 0x8f
 80093dc:	f001 fd34 	bl	800ae48 <__assert_func>
 80093e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093e4:	6006      	str	r6, [r0, #0]
 80093e6:	60c6      	str	r6, [r0, #12]
 80093e8:	b13c      	cbz	r4, 80093fa <_Bfree+0x3a>
 80093ea:	69eb      	ldr	r3, [r5, #28]
 80093ec:	6862      	ldr	r2, [r4, #4]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093f4:	6021      	str	r1, [r4, #0]
 80093f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093fa:	bd70      	pop	{r4, r5, r6, pc}
 80093fc:	0800c1fa 	.word	0x0800c1fa
 8009400:	0800c27a 	.word	0x0800c27a

08009404 <__multadd>:
 8009404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009408:	690d      	ldr	r5, [r1, #16]
 800940a:	4607      	mov	r7, r0
 800940c:	460c      	mov	r4, r1
 800940e:	461e      	mov	r6, r3
 8009410:	f101 0c14 	add.w	ip, r1, #20
 8009414:	2000      	movs	r0, #0
 8009416:	f8dc 3000 	ldr.w	r3, [ip]
 800941a:	b299      	uxth	r1, r3
 800941c:	fb02 6101 	mla	r1, r2, r1, r6
 8009420:	0c1e      	lsrs	r6, r3, #16
 8009422:	0c0b      	lsrs	r3, r1, #16
 8009424:	fb02 3306 	mla	r3, r2, r6, r3
 8009428:	b289      	uxth	r1, r1
 800942a:	3001      	adds	r0, #1
 800942c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009430:	4285      	cmp	r5, r0
 8009432:	f84c 1b04 	str.w	r1, [ip], #4
 8009436:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800943a:	dcec      	bgt.n	8009416 <__multadd+0x12>
 800943c:	b30e      	cbz	r6, 8009482 <__multadd+0x7e>
 800943e:	68a3      	ldr	r3, [r4, #8]
 8009440:	42ab      	cmp	r3, r5
 8009442:	dc19      	bgt.n	8009478 <__multadd+0x74>
 8009444:	6861      	ldr	r1, [r4, #4]
 8009446:	4638      	mov	r0, r7
 8009448:	3101      	adds	r1, #1
 800944a:	f7ff ff79 	bl	8009340 <_Balloc>
 800944e:	4680      	mov	r8, r0
 8009450:	b928      	cbnz	r0, 800945e <__multadd+0x5a>
 8009452:	4602      	mov	r2, r0
 8009454:	4b0c      	ldr	r3, [pc, #48]	@ (8009488 <__multadd+0x84>)
 8009456:	480d      	ldr	r0, [pc, #52]	@ (800948c <__multadd+0x88>)
 8009458:	21ba      	movs	r1, #186	@ 0xba
 800945a:	f001 fcf5 	bl	800ae48 <__assert_func>
 800945e:	6922      	ldr	r2, [r4, #16]
 8009460:	3202      	adds	r2, #2
 8009462:	f104 010c 	add.w	r1, r4, #12
 8009466:	0092      	lsls	r2, r2, #2
 8009468:	300c      	adds	r0, #12
 800946a:	f001 fcd7 	bl	800ae1c <memcpy>
 800946e:	4621      	mov	r1, r4
 8009470:	4638      	mov	r0, r7
 8009472:	f7ff ffa5 	bl	80093c0 <_Bfree>
 8009476:	4644      	mov	r4, r8
 8009478:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800947c:	3501      	adds	r5, #1
 800947e:	615e      	str	r6, [r3, #20]
 8009480:	6125      	str	r5, [r4, #16]
 8009482:	4620      	mov	r0, r4
 8009484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009488:	0800c269 	.word	0x0800c269
 800948c:	0800c27a 	.word	0x0800c27a

08009490 <__s2b>:
 8009490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009494:	460c      	mov	r4, r1
 8009496:	4615      	mov	r5, r2
 8009498:	461f      	mov	r7, r3
 800949a:	2209      	movs	r2, #9
 800949c:	3308      	adds	r3, #8
 800949e:	4606      	mov	r6, r0
 80094a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80094a4:	2100      	movs	r1, #0
 80094a6:	2201      	movs	r2, #1
 80094a8:	429a      	cmp	r2, r3
 80094aa:	db09      	blt.n	80094c0 <__s2b+0x30>
 80094ac:	4630      	mov	r0, r6
 80094ae:	f7ff ff47 	bl	8009340 <_Balloc>
 80094b2:	b940      	cbnz	r0, 80094c6 <__s2b+0x36>
 80094b4:	4602      	mov	r2, r0
 80094b6:	4b19      	ldr	r3, [pc, #100]	@ (800951c <__s2b+0x8c>)
 80094b8:	4819      	ldr	r0, [pc, #100]	@ (8009520 <__s2b+0x90>)
 80094ba:	21d3      	movs	r1, #211	@ 0xd3
 80094bc:	f001 fcc4 	bl	800ae48 <__assert_func>
 80094c0:	0052      	lsls	r2, r2, #1
 80094c2:	3101      	adds	r1, #1
 80094c4:	e7f0      	b.n	80094a8 <__s2b+0x18>
 80094c6:	9b08      	ldr	r3, [sp, #32]
 80094c8:	6143      	str	r3, [r0, #20]
 80094ca:	2d09      	cmp	r5, #9
 80094cc:	f04f 0301 	mov.w	r3, #1
 80094d0:	6103      	str	r3, [r0, #16]
 80094d2:	dd16      	ble.n	8009502 <__s2b+0x72>
 80094d4:	f104 0909 	add.w	r9, r4, #9
 80094d8:	46c8      	mov	r8, r9
 80094da:	442c      	add	r4, r5
 80094dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80094e0:	4601      	mov	r1, r0
 80094e2:	3b30      	subs	r3, #48	@ 0x30
 80094e4:	220a      	movs	r2, #10
 80094e6:	4630      	mov	r0, r6
 80094e8:	f7ff ff8c 	bl	8009404 <__multadd>
 80094ec:	45a0      	cmp	r8, r4
 80094ee:	d1f5      	bne.n	80094dc <__s2b+0x4c>
 80094f0:	f1a5 0408 	sub.w	r4, r5, #8
 80094f4:	444c      	add	r4, r9
 80094f6:	1b2d      	subs	r5, r5, r4
 80094f8:	1963      	adds	r3, r4, r5
 80094fa:	42bb      	cmp	r3, r7
 80094fc:	db04      	blt.n	8009508 <__s2b+0x78>
 80094fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009502:	340a      	adds	r4, #10
 8009504:	2509      	movs	r5, #9
 8009506:	e7f6      	b.n	80094f6 <__s2b+0x66>
 8009508:	f814 3b01 	ldrb.w	r3, [r4], #1
 800950c:	4601      	mov	r1, r0
 800950e:	3b30      	subs	r3, #48	@ 0x30
 8009510:	220a      	movs	r2, #10
 8009512:	4630      	mov	r0, r6
 8009514:	f7ff ff76 	bl	8009404 <__multadd>
 8009518:	e7ee      	b.n	80094f8 <__s2b+0x68>
 800951a:	bf00      	nop
 800951c:	0800c269 	.word	0x0800c269
 8009520:	0800c27a 	.word	0x0800c27a

08009524 <__hi0bits>:
 8009524:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009528:	4603      	mov	r3, r0
 800952a:	bf36      	itet	cc
 800952c:	0403      	lslcc	r3, r0, #16
 800952e:	2000      	movcs	r0, #0
 8009530:	2010      	movcc	r0, #16
 8009532:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009536:	bf3c      	itt	cc
 8009538:	021b      	lslcc	r3, r3, #8
 800953a:	3008      	addcc	r0, #8
 800953c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009540:	bf3c      	itt	cc
 8009542:	011b      	lslcc	r3, r3, #4
 8009544:	3004      	addcc	r0, #4
 8009546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800954a:	bf3c      	itt	cc
 800954c:	009b      	lslcc	r3, r3, #2
 800954e:	3002      	addcc	r0, #2
 8009550:	2b00      	cmp	r3, #0
 8009552:	db05      	blt.n	8009560 <__hi0bits+0x3c>
 8009554:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009558:	f100 0001 	add.w	r0, r0, #1
 800955c:	bf08      	it	eq
 800955e:	2020      	moveq	r0, #32
 8009560:	4770      	bx	lr

08009562 <__lo0bits>:
 8009562:	6803      	ldr	r3, [r0, #0]
 8009564:	4602      	mov	r2, r0
 8009566:	f013 0007 	ands.w	r0, r3, #7
 800956a:	d00b      	beq.n	8009584 <__lo0bits+0x22>
 800956c:	07d9      	lsls	r1, r3, #31
 800956e:	d421      	bmi.n	80095b4 <__lo0bits+0x52>
 8009570:	0798      	lsls	r0, r3, #30
 8009572:	bf49      	itett	mi
 8009574:	085b      	lsrmi	r3, r3, #1
 8009576:	089b      	lsrpl	r3, r3, #2
 8009578:	2001      	movmi	r0, #1
 800957a:	6013      	strmi	r3, [r2, #0]
 800957c:	bf5c      	itt	pl
 800957e:	6013      	strpl	r3, [r2, #0]
 8009580:	2002      	movpl	r0, #2
 8009582:	4770      	bx	lr
 8009584:	b299      	uxth	r1, r3
 8009586:	b909      	cbnz	r1, 800958c <__lo0bits+0x2a>
 8009588:	0c1b      	lsrs	r3, r3, #16
 800958a:	2010      	movs	r0, #16
 800958c:	b2d9      	uxtb	r1, r3
 800958e:	b909      	cbnz	r1, 8009594 <__lo0bits+0x32>
 8009590:	3008      	adds	r0, #8
 8009592:	0a1b      	lsrs	r3, r3, #8
 8009594:	0719      	lsls	r1, r3, #28
 8009596:	bf04      	itt	eq
 8009598:	091b      	lsreq	r3, r3, #4
 800959a:	3004      	addeq	r0, #4
 800959c:	0799      	lsls	r1, r3, #30
 800959e:	bf04      	itt	eq
 80095a0:	089b      	lsreq	r3, r3, #2
 80095a2:	3002      	addeq	r0, #2
 80095a4:	07d9      	lsls	r1, r3, #31
 80095a6:	d403      	bmi.n	80095b0 <__lo0bits+0x4e>
 80095a8:	085b      	lsrs	r3, r3, #1
 80095aa:	f100 0001 	add.w	r0, r0, #1
 80095ae:	d003      	beq.n	80095b8 <__lo0bits+0x56>
 80095b0:	6013      	str	r3, [r2, #0]
 80095b2:	4770      	bx	lr
 80095b4:	2000      	movs	r0, #0
 80095b6:	4770      	bx	lr
 80095b8:	2020      	movs	r0, #32
 80095ba:	4770      	bx	lr

080095bc <__i2b>:
 80095bc:	b510      	push	{r4, lr}
 80095be:	460c      	mov	r4, r1
 80095c0:	2101      	movs	r1, #1
 80095c2:	f7ff febd 	bl	8009340 <_Balloc>
 80095c6:	4602      	mov	r2, r0
 80095c8:	b928      	cbnz	r0, 80095d6 <__i2b+0x1a>
 80095ca:	4b05      	ldr	r3, [pc, #20]	@ (80095e0 <__i2b+0x24>)
 80095cc:	4805      	ldr	r0, [pc, #20]	@ (80095e4 <__i2b+0x28>)
 80095ce:	f240 1145 	movw	r1, #325	@ 0x145
 80095d2:	f001 fc39 	bl	800ae48 <__assert_func>
 80095d6:	2301      	movs	r3, #1
 80095d8:	6144      	str	r4, [r0, #20]
 80095da:	6103      	str	r3, [r0, #16]
 80095dc:	bd10      	pop	{r4, pc}
 80095de:	bf00      	nop
 80095e0:	0800c269 	.word	0x0800c269
 80095e4:	0800c27a 	.word	0x0800c27a

080095e8 <__multiply>:
 80095e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ec:	4617      	mov	r7, r2
 80095ee:	690a      	ldr	r2, [r1, #16]
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	bfa8      	it	ge
 80095f6:	463b      	movge	r3, r7
 80095f8:	4689      	mov	r9, r1
 80095fa:	bfa4      	itt	ge
 80095fc:	460f      	movge	r7, r1
 80095fe:	4699      	movge	r9, r3
 8009600:	693d      	ldr	r5, [r7, #16]
 8009602:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	6879      	ldr	r1, [r7, #4]
 800960a:	eb05 060a 	add.w	r6, r5, sl
 800960e:	42b3      	cmp	r3, r6
 8009610:	b085      	sub	sp, #20
 8009612:	bfb8      	it	lt
 8009614:	3101      	addlt	r1, #1
 8009616:	f7ff fe93 	bl	8009340 <_Balloc>
 800961a:	b930      	cbnz	r0, 800962a <__multiply+0x42>
 800961c:	4602      	mov	r2, r0
 800961e:	4b41      	ldr	r3, [pc, #260]	@ (8009724 <__multiply+0x13c>)
 8009620:	4841      	ldr	r0, [pc, #260]	@ (8009728 <__multiply+0x140>)
 8009622:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009626:	f001 fc0f 	bl	800ae48 <__assert_func>
 800962a:	f100 0414 	add.w	r4, r0, #20
 800962e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009632:	4623      	mov	r3, r4
 8009634:	2200      	movs	r2, #0
 8009636:	4573      	cmp	r3, lr
 8009638:	d320      	bcc.n	800967c <__multiply+0x94>
 800963a:	f107 0814 	add.w	r8, r7, #20
 800963e:	f109 0114 	add.w	r1, r9, #20
 8009642:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009646:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800964a:	9302      	str	r3, [sp, #8]
 800964c:	1beb      	subs	r3, r5, r7
 800964e:	3b15      	subs	r3, #21
 8009650:	f023 0303 	bic.w	r3, r3, #3
 8009654:	3304      	adds	r3, #4
 8009656:	3715      	adds	r7, #21
 8009658:	42bd      	cmp	r5, r7
 800965a:	bf38      	it	cc
 800965c:	2304      	movcc	r3, #4
 800965e:	9301      	str	r3, [sp, #4]
 8009660:	9b02      	ldr	r3, [sp, #8]
 8009662:	9103      	str	r1, [sp, #12]
 8009664:	428b      	cmp	r3, r1
 8009666:	d80c      	bhi.n	8009682 <__multiply+0x9a>
 8009668:	2e00      	cmp	r6, #0
 800966a:	dd03      	ble.n	8009674 <__multiply+0x8c>
 800966c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009670:	2b00      	cmp	r3, #0
 8009672:	d055      	beq.n	8009720 <__multiply+0x138>
 8009674:	6106      	str	r6, [r0, #16]
 8009676:	b005      	add	sp, #20
 8009678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967c:	f843 2b04 	str.w	r2, [r3], #4
 8009680:	e7d9      	b.n	8009636 <__multiply+0x4e>
 8009682:	f8b1 a000 	ldrh.w	sl, [r1]
 8009686:	f1ba 0f00 	cmp.w	sl, #0
 800968a:	d01f      	beq.n	80096cc <__multiply+0xe4>
 800968c:	46c4      	mov	ip, r8
 800968e:	46a1      	mov	r9, r4
 8009690:	2700      	movs	r7, #0
 8009692:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009696:	f8d9 3000 	ldr.w	r3, [r9]
 800969a:	fa1f fb82 	uxth.w	fp, r2
 800969e:	b29b      	uxth	r3, r3
 80096a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80096a4:	443b      	add	r3, r7
 80096a6:	f8d9 7000 	ldr.w	r7, [r9]
 80096aa:	0c12      	lsrs	r2, r2, #16
 80096ac:	0c3f      	lsrs	r7, r7, #16
 80096ae:	fb0a 7202 	mla	r2, sl, r2, r7
 80096b2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096bc:	4565      	cmp	r5, ip
 80096be:	f849 3b04 	str.w	r3, [r9], #4
 80096c2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80096c6:	d8e4      	bhi.n	8009692 <__multiply+0xaa>
 80096c8:	9b01      	ldr	r3, [sp, #4]
 80096ca:	50e7      	str	r7, [r4, r3]
 80096cc:	9b03      	ldr	r3, [sp, #12]
 80096ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80096d2:	3104      	adds	r1, #4
 80096d4:	f1b9 0f00 	cmp.w	r9, #0
 80096d8:	d020      	beq.n	800971c <__multiply+0x134>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	4647      	mov	r7, r8
 80096de:	46a4      	mov	ip, r4
 80096e0:	f04f 0a00 	mov.w	sl, #0
 80096e4:	f8b7 b000 	ldrh.w	fp, [r7]
 80096e8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80096ec:	fb09 220b 	mla	r2, r9, fp, r2
 80096f0:	4452      	add	r2, sl
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096f8:	f84c 3b04 	str.w	r3, [ip], #4
 80096fc:	f857 3b04 	ldr.w	r3, [r7], #4
 8009700:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009704:	f8bc 3000 	ldrh.w	r3, [ip]
 8009708:	fb09 330a 	mla	r3, r9, sl, r3
 800970c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009710:	42bd      	cmp	r5, r7
 8009712:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009716:	d8e5      	bhi.n	80096e4 <__multiply+0xfc>
 8009718:	9a01      	ldr	r2, [sp, #4]
 800971a:	50a3      	str	r3, [r4, r2]
 800971c:	3404      	adds	r4, #4
 800971e:	e79f      	b.n	8009660 <__multiply+0x78>
 8009720:	3e01      	subs	r6, #1
 8009722:	e7a1      	b.n	8009668 <__multiply+0x80>
 8009724:	0800c269 	.word	0x0800c269
 8009728:	0800c27a 	.word	0x0800c27a

0800972c <__pow5mult>:
 800972c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009730:	4615      	mov	r5, r2
 8009732:	f012 0203 	ands.w	r2, r2, #3
 8009736:	4607      	mov	r7, r0
 8009738:	460e      	mov	r6, r1
 800973a:	d007      	beq.n	800974c <__pow5mult+0x20>
 800973c:	4c25      	ldr	r4, [pc, #148]	@ (80097d4 <__pow5mult+0xa8>)
 800973e:	3a01      	subs	r2, #1
 8009740:	2300      	movs	r3, #0
 8009742:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009746:	f7ff fe5d 	bl	8009404 <__multadd>
 800974a:	4606      	mov	r6, r0
 800974c:	10ad      	asrs	r5, r5, #2
 800974e:	d03d      	beq.n	80097cc <__pow5mult+0xa0>
 8009750:	69fc      	ldr	r4, [r7, #28]
 8009752:	b97c      	cbnz	r4, 8009774 <__pow5mult+0x48>
 8009754:	2010      	movs	r0, #16
 8009756:	f7ff fd3d 	bl	80091d4 <malloc>
 800975a:	4602      	mov	r2, r0
 800975c:	61f8      	str	r0, [r7, #28]
 800975e:	b928      	cbnz	r0, 800976c <__pow5mult+0x40>
 8009760:	4b1d      	ldr	r3, [pc, #116]	@ (80097d8 <__pow5mult+0xac>)
 8009762:	481e      	ldr	r0, [pc, #120]	@ (80097dc <__pow5mult+0xb0>)
 8009764:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009768:	f001 fb6e 	bl	800ae48 <__assert_func>
 800976c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009770:	6004      	str	r4, [r0, #0]
 8009772:	60c4      	str	r4, [r0, #12]
 8009774:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009778:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800977c:	b94c      	cbnz	r4, 8009792 <__pow5mult+0x66>
 800977e:	f240 2171 	movw	r1, #625	@ 0x271
 8009782:	4638      	mov	r0, r7
 8009784:	f7ff ff1a 	bl	80095bc <__i2b>
 8009788:	2300      	movs	r3, #0
 800978a:	f8c8 0008 	str.w	r0, [r8, #8]
 800978e:	4604      	mov	r4, r0
 8009790:	6003      	str	r3, [r0, #0]
 8009792:	f04f 0900 	mov.w	r9, #0
 8009796:	07eb      	lsls	r3, r5, #31
 8009798:	d50a      	bpl.n	80097b0 <__pow5mult+0x84>
 800979a:	4631      	mov	r1, r6
 800979c:	4622      	mov	r2, r4
 800979e:	4638      	mov	r0, r7
 80097a0:	f7ff ff22 	bl	80095e8 <__multiply>
 80097a4:	4631      	mov	r1, r6
 80097a6:	4680      	mov	r8, r0
 80097a8:	4638      	mov	r0, r7
 80097aa:	f7ff fe09 	bl	80093c0 <_Bfree>
 80097ae:	4646      	mov	r6, r8
 80097b0:	106d      	asrs	r5, r5, #1
 80097b2:	d00b      	beq.n	80097cc <__pow5mult+0xa0>
 80097b4:	6820      	ldr	r0, [r4, #0]
 80097b6:	b938      	cbnz	r0, 80097c8 <__pow5mult+0x9c>
 80097b8:	4622      	mov	r2, r4
 80097ba:	4621      	mov	r1, r4
 80097bc:	4638      	mov	r0, r7
 80097be:	f7ff ff13 	bl	80095e8 <__multiply>
 80097c2:	6020      	str	r0, [r4, #0]
 80097c4:	f8c0 9000 	str.w	r9, [r0]
 80097c8:	4604      	mov	r4, r0
 80097ca:	e7e4      	b.n	8009796 <__pow5mult+0x6a>
 80097cc:	4630      	mov	r0, r6
 80097ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097d2:	bf00      	nop
 80097d4:	0800c38c 	.word	0x0800c38c
 80097d8:	0800c1fa 	.word	0x0800c1fa
 80097dc:	0800c27a 	.word	0x0800c27a

080097e0 <__lshift>:
 80097e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e4:	460c      	mov	r4, r1
 80097e6:	6849      	ldr	r1, [r1, #4]
 80097e8:	6923      	ldr	r3, [r4, #16]
 80097ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097ee:	68a3      	ldr	r3, [r4, #8]
 80097f0:	4607      	mov	r7, r0
 80097f2:	4691      	mov	r9, r2
 80097f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097f8:	f108 0601 	add.w	r6, r8, #1
 80097fc:	42b3      	cmp	r3, r6
 80097fe:	db0b      	blt.n	8009818 <__lshift+0x38>
 8009800:	4638      	mov	r0, r7
 8009802:	f7ff fd9d 	bl	8009340 <_Balloc>
 8009806:	4605      	mov	r5, r0
 8009808:	b948      	cbnz	r0, 800981e <__lshift+0x3e>
 800980a:	4602      	mov	r2, r0
 800980c:	4b28      	ldr	r3, [pc, #160]	@ (80098b0 <__lshift+0xd0>)
 800980e:	4829      	ldr	r0, [pc, #164]	@ (80098b4 <__lshift+0xd4>)
 8009810:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009814:	f001 fb18 	bl	800ae48 <__assert_func>
 8009818:	3101      	adds	r1, #1
 800981a:	005b      	lsls	r3, r3, #1
 800981c:	e7ee      	b.n	80097fc <__lshift+0x1c>
 800981e:	2300      	movs	r3, #0
 8009820:	f100 0114 	add.w	r1, r0, #20
 8009824:	f100 0210 	add.w	r2, r0, #16
 8009828:	4618      	mov	r0, r3
 800982a:	4553      	cmp	r3, sl
 800982c:	db33      	blt.n	8009896 <__lshift+0xb6>
 800982e:	6920      	ldr	r0, [r4, #16]
 8009830:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009834:	f104 0314 	add.w	r3, r4, #20
 8009838:	f019 091f 	ands.w	r9, r9, #31
 800983c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009840:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009844:	d02b      	beq.n	800989e <__lshift+0xbe>
 8009846:	f1c9 0e20 	rsb	lr, r9, #32
 800984a:	468a      	mov	sl, r1
 800984c:	2200      	movs	r2, #0
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	fa00 f009 	lsl.w	r0, r0, r9
 8009854:	4310      	orrs	r0, r2
 8009856:	f84a 0b04 	str.w	r0, [sl], #4
 800985a:	f853 2b04 	ldr.w	r2, [r3], #4
 800985e:	459c      	cmp	ip, r3
 8009860:	fa22 f20e 	lsr.w	r2, r2, lr
 8009864:	d8f3      	bhi.n	800984e <__lshift+0x6e>
 8009866:	ebac 0304 	sub.w	r3, ip, r4
 800986a:	3b15      	subs	r3, #21
 800986c:	f023 0303 	bic.w	r3, r3, #3
 8009870:	3304      	adds	r3, #4
 8009872:	f104 0015 	add.w	r0, r4, #21
 8009876:	4560      	cmp	r0, ip
 8009878:	bf88      	it	hi
 800987a:	2304      	movhi	r3, #4
 800987c:	50ca      	str	r2, [r1, r3]
 800987e:	b10a      	cbz	r2, 8009884 <__lshift+0xa4>
 8009880:	f108 0602 	add.w	r6, r8, #2
 8009884:	3e01      	subs	r6, #1
 8009886:	4638      	mov	r0, r7
 8009888:	612e      	str	r6, [r5, #16]
 800988a:	4621      	mov	r1, r4
 800988c:	f7ff fd98 	bl	80093c0 <_Bfree>
 8009890:	4628      	mov	r0, r5
 8009892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009896:	f842 0f04 	str.w	r0, [r2, #4]!
 800989a:	3301      	adds	r3, #1
 800989c:	e7c5      	b.n	800982a <__lshift+0x4a>
 800989e:	3904      	subs	r1, #4
 80098a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80098a8:	459c      	cmp	ip, r3
 80098aa:	d8f9      	bhi.n	80098a0 <__lshift+0xc0>
 80098ac:	e7ea      	b.n	8009884 <__lshift+0xa4>
 80098ae:	bf00      	nop
 80098b0:	0800c269 	.word	0x0800c269
 80098b4:	0800c27a 	.word	0x0800c27a

080098b8 <__mcmp>:
 80098b8:	690a      	ldr	r2, [r1, #16]
 80098ba:	4603      	mov	r3, r0
 80098bc:	6900      	ldr	r0, [r0, #16]
 80098be:	1a80      	subs	r0, r0, r2
 80098c0:	b530      	push	{r4, r5, lr}
 80098c2:	d10e      	bne.n	80098e2 <__mcmp+0x2a>
 80098c4:	3314      	adds	r3, #20
 80098c6:	3114      	adds	r1, #20
 80098c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80098cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80098d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80098d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80098d8:	4295      	cmp	r5, r2
 80098da:	d003      	beq.n	80098e4 <__mcmp+0x2c>
 80098dc:	d205      	bcs.n	80098ea <__mcmp+0x32>
 80098de:	f04f 30ff 	mov.w	r0, #4294967295
 80098e2:	bd30      	pop	{r4, r5, pc}
 80098e4:	42a3      	cmp	r3, r4
 80098e6:	d3f3      	bcc.n	80098d0 <__mcmp+0x18>
 80098e8:	e7fb      	b.n	80098e2 <__mcmp+0x2a>
 80098ea:	2001      	movs	r0, #1
 80098ec:	e7f9      	b.n	80098e2 <__mcmp+0x2a>
	...

080098f0 <__mdiff>:
 80098f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	4689      	mov	r9, r1
 80098f6:	4606      	mov	r6, r0
 80098f8:	4611      	mov	r1, r2
 80098fa:	4648      	mov	r0, r9
 80098fc:	4614      	mov	r4, r2
 80098fe:	f7ff ffdb 	bl	80098b8 <__mcmp>
 8009902:	1e05      	subs	r5, r0, #0
 8009904:	d112      	bne.n	800992c <__mdiff+0x3c>
 8009906:	4629      	mov	r1, r5
 8009908:	4630      	mov	r0, r6
 800990a:	f7ff fd19 	bl	8009340 <_Balloc>
 800990e:	4602      	mov	r2, r0
 8009910:	b928      	cbnz	r0, 800991e <__mdiff+0x2e>
 8009912:	4b3f      	ldr	r3, [pc, #252]	@ (8009a10 <__mdiff+0x120>)
 8009914:	f240 2137 	movw	r1, #567	@ 0x237
 8009918:	483e      	ldr	r0, [pc, #248]	@ (8009a14 <__mdiff+0x124>)
 800991a:	f001 fa95 	bl	800ae48 <__assert_func>
 800991e:	2301      	movs	r3, #1
 8009920:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009924:	4610      	mov	r0, r2
 8009926:	b003      	add	sp, #12
 8009928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800992c:	bfbc      	itt	lt
 800992e:	464b      	movlt	r3, r9
 8009930:	46a1      	movlt	r9, r4
 8009932:	4630      	mov	r0, r6
 8009934:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009938:	bfba      	itte	lt
 800993a:	461c      	movlt	r4, r3
 800993c:	2501      	movlt	r5, #1
 800993e:	2500      	movge	r5, #0
 8009940:	f7ff fcfe 	bl	8009340 <_Balloc>
 8009944:	4602      	mov	r2, r0
 8009946:	b918      	cbnz	r0, 8009950 <__mdiff+0x60>
 8009948:	4b31      	ldr	r3, [pc, #196]	@ (8009a10 <__mdiff+0x120>)
 800994a:	f240 2145 	movw	r1, #581	@ 0x245
 800994e:	e7e3      	b.n	8009918 <__mdiff+0x28>
 8009950:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009954:	6926      	ldr	r6, [r4, #16]
 8009956:	60c5      	str	r5, [r0, #12]
 8009958:	f109 0310 	add.w	r3, r9, #16
 800995c:	f109 0514 	add.w	r5, r9, #20
 8009960:	f104 0e14 	add.w	lr, r4, #20
 8009964:	f100 0b14 	add.w	fp, r0, #20
 8009968:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800996c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009970:	9301      	str	r3, [sp, #4]
 8009972:	46d9      	mov	r9, fp
 8009974:	f04f 0c00 	mov.w	ip, #0
 8009978:	9b01      	ldr	r3, [sp, #4]
 800997a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800997e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009982:	9301      	str	r3, [sp, #4]
 8009984:	fa1f f38a 	uxth.w	r3, sl
 8009988:	4619      	mov	r1, r3
 800998a:	b283      	uxth	r3, r0
 800998c:	1acb      	subs	r3, r1, r3
 800998e:	0c00      	lsrs	r0, r0, #16
 8009990:	4463      	add	r3, ip
 8009992:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009996:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800999a:	b29b      	uxth	r3, r3
 800999c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80099a0:	4576      	cmp	r6, lr
 80099a2:	f849 3b04 	str.w	r3, [r9], #4
 80099a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099aa:	d8e5      	bhi.n	8009978 <__mdiff+0x88>
 80099ac:	1b33      	subs	r3, r6, r4
 80099ae:	3b15      	subs	r3, #21
 80099b0:	f023 0303 	bic.w	r3, r3, #3
 80099b4:	3415      	adds	r4, #21
 80099b6:	3304      	adds	r3, #4
 80099b8:	42a6      	cmp	r6, r4
 80099ba:	bf38      	it	cc
 80099bc:	2304      	movcc	r3, #4
 80099be:	441d      	add	r5, r3
 80099c0:	445b      	add	r3, fp
 80099c2:	461e      	mov	r6, r3
 80099c4:	462c      	mov	r4, r5
 80099c6:	4544      	cmp	r4, r8
 80099c8:	d30e      	bcc.n	80099e8 <__mdiff+0xf8>
 80099ca:	f108 0103 	add.w	r1, r8, #3
 80099ce:	1b49      	subs	r1, r1, r5
 80099d0:	f021 0103 	bic.w	r1, r1, #3
 80099d4:	3d03      	subs	r5, #3
 80099d6:	45a8      	cmp	r8, r5
 80099d8:	bf38      	it	cc
 80099da:	2100      	movcc	r1, #0
 80099dc:	440b      	add	r3, r1
 80099de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099e2:	b191      	cbz	r1, 8009a0a <__mdiff+0x11a>
 80099e4:	6117      	str	r7, [r2, #16]
 80099e6:	e79d      	b.n	8009924 <__mdiff+0x34>
 80099e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80099ec:	46e6      	mov	lr, ip
 80099ee:	0c08      	lsrs	r0, r1, #16
 80099f0:	fa1c fc81 	uxtah	ip, ip, r1
 80099f4:	4471      	add	r1, lr
 80099f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80099fa:	b289      	uxth	r1, r1
 80099fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a00:	f846 1b04 	str.w	r1, [r6], #4
 8009a04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a08:	e7dd      	b.n	80099c6 <__mdiff+0xd6>
 8009a0a:	3f01      	subs	r7, #1
 8009a0c:	e7e7      	b.n	80099de <__mdiff+0xee>
 8009a0e:	bf00      	nop
 8009a10:	0800c269 	.word	0x0800c269
 8009a14:	0800c27a 	.word	0x0800c27a

08009a18 <__ulp>:
 8009a18:	b082      	sub	sp, #8
 8009a1a:	ed8d 0b00 	vstr	d0, [sp]
 8009a1e:	9a01      	ldr	r2, [sp, #4]
 8009a20:	4b0f      	ldr	r3, [pc, #60]	@ (8009a60 <__ulp+0x48>)
 8009a22:	4013      	ands	r3, r2
 8009a24:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	dc08      	bgt.n	8009a3e <__ulp+0x26>
 8009a2c:	425b      	negs	r3, r3
 8009a2e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009a32:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009a36:	da04      	bge.n	8009a42 <__ulp+0x2a>
 8009a38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009a3c:	4113      	asrs	r3, r2
 8009a3e:	2200      	movs	r2, #0
 8009a40:	e008      	b.n	8009a54 <__ulp+0x3c>
 8009a42:	f1a2 0314 	sub.w	r3, r2, #20
 8009a46:	2b1e      	cmp	r3, #30
 8009a48:	bfda      	itte	le
 8009a4a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009a4e:	40da      	lsrle	r2, r3
 8009a50:	2201      	movgt	r2, #1
 8009a52:	2300      	movs	r3, #0
 8009a54:	4619      	mov	r1, r3
 8009a56:	4610      	mov	r0, r2
 8009a58:	ec41 0b10 	vmov	d0, r0, r1
 8009a5c:	b002      	add	sp, #8
 8009a5e:	4770      	bx	lr
 8009a60:	7ff00000 	.word	0x7ff00000

08009a64 <__b2d>:
 8009a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a68:	6906      	ldr	r6, [r0, #16]
 8009a6a:	f100 0814 	add.w	r8, r0, #20
 8009a6e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009a72:	1f37      	subs	r7, r6, #4
 8009a74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a78:	4610      	mov	r0, r2
 8009a7a:	f7ff fd53 	bl	8009524 <__hi0bits>
 8009a7e:	f1c0 0320 	rsb	r3, r0, #32
 8009a82:	280a      	cmp	r0, #10
 8009a84:	600b      	str	r3, [r1, #0]
 8009a86:	491b      	ldr	r1, [pc, #108]	@ (8009af4 <__b2d+0x90>)
 8009a88:	dc15      	bgt.n	8009ab6 <__b2d+0x52>
 8009a8a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009a8e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009a92:	45b8      	cmp	r8, r7
 8009a94:	ea43 0501 	orr.w	r5, r3, r1
 8009a98:	bf34      	ite	cc
 8009a9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009a9e:	2300      	movcs	r3, #0
 8009aa0:	3015      	adds	r0, #21
 8009aa2:	fa02 f000 	lsl.w	r0, r2, r0
 8009aa6:	fa23 f30c 	lsr.w	r3, r3, ip
 8009aaa:	4303      	orrs	r3, r0
 8009aac:	461c      	mov	r4, r3
 8009aae:	ec45 4b10 	vmov	d0, r4, r5
 8009ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab6:	45b8      	cmp	r8, r7
 8009ab8:	bf3a      	itte	cc
 8009aba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009abe:	f1a6 0708 	subcc.w	r7, r6, #8
 8009ac2:	2300      	movcs	r3, #0
 8009ac4:	380b      	subs	r0, #11
 8009ac6:	d012      	beq.n	8009aee <__b2d+0x8a>
 8009ac8:	f1c0 0120 	rsb	r1, r0, #32
 8009acc:	fa23 f401 	lsr.w	r4, r3, r1
 8009ad0:	4082      	lsls	r2, r0
 8009ad2:	4322      	orrs	r2, r4
 8009ad4:	4547      	cmp	r7, r8
 8009ad6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009ada:	bf8c      	ite	hi
 8009adc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009ae0:	2200      	movls	r2, #0
 8009ae2:	4083      	lsls	r3, r0
 8009ae4:	40ca      	lsrs	r2, r1
 8009ae6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009aea:	4313      	orrs	r3, r2
 8009aec:	e7de      	b.n	8009aac <__b2d+0x48>
 8009aee:	ea42 0501 	orr.w	r5, r2, r1
 8009af2:	e7db      	b.n	8009aac <__b2d+0x48>
 8009af4:	3ff00000 	.word	0x3ff00000

08009af8 <__d2b>:
 8009af8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009afc:	460f      	mov	r7, r1
 8009afe:	2101      	movs	r1, #1
 8009b00:	ec59 8b10 	vmov	r8, r9, d0
 8009b04:	4616      	mov	r6, r2
 8009b06:	f7ff fc1b 	bl	8009340 <_Balloc>
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	b930      	cbnz	r0, 8009b1c <__d2b+0x24>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	4b23      	ldr	r3, [pc, #140]	@ (8009ba0 <__d2b+0xa8>)
 8009b12:	4824      	ldr	r0, [pc, #144]	@ (8009ba4 <__d2b+0xac>)
 8009b14:	f240 310f 	movw	r1, #783	@ 0x30f
 8009b18:	f001 f996 	bl	800ae48 <__assert_func>
 8009b1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009b20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b24:	b10d      	cbz	r5, 8009b2a <__d2b+0x32>
 8009b26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b2a:	9301      	str	r3, [sp, #4]
 8009b2c:	f1b8 0300 	subs.w	r3, r8, #0
 8009b30:	d023      	beq.n	8009b7a <__d2b+0x82>
 8009b32:	4668      	mov	r0, sp
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	f7ff fd14 	bl	8009562 <__lo0bits>
 8009b3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009b3e:	b1d0      	cbz	r0, 8009b76 <__d2b+0x7e>
 8009b40:	f1c0 0320 	rsb	r3, r0, #32
 8009b44:	fa02 f303 	lsl.w	r3, r2, r3
 8009b48:	430b      	orrs	r3, r1
 8009b4a:	40c2      	lsrs	r2, r0
 8009b4c:	6163      	str	r3, [r4, #20]
 8009b4e:	9201      	str	r2, [sp, #4]
 8009b50:	9b01      	ldr	r3, [sp, #4]
 8009b52:	61a3      	str	r3, [r4, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	bf0c      	ite	eq
 8009b58:	2201      	moveq	r2, #1
 8009b5a:	2202      	movne	r2, #2
 8009b5c:	6122      	str	r2, [r4, #16]
 8009b5e:	b1a5      	cbz	r5, 8009b8a <__d2b+0x92>
 8009b60:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009b64:	4405      	add	r5, r0
 8009b66:	603d      	str	r5, [r7, #0]
 8009b68:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009b6c:	6030      	str	r0, [r6, #0]
 8009b6e:	4620      	mov	r0, r4
 8009b70:	b003      	add	sp, #12
 8009b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b76:	6161      	str	r1, [r4, #20]
 8009b78:	e7ea      	b.n	8009b50 <__d2b+0x58>
 8009b7a:	a801      	add	r0, sp, #4
 8009b7c:	f7ff fcf1 	bl	8009562 <__lo0bits>
 8009b80:	9b01      	ldr	r3, [sp, #4]
 8009b82:	6163      	str	r3, [r4, #20]
 8009b84:	3020      	adds	r0, #32
 8009b86:	2201      	movs	r2, #1
 8009b88:	e7e8      	b.n	8009b5c <__d2b+0x64>
 8009b8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009b92:	6038      	str	r0, [r7, #0]
 8009b94:	6918      	ldr	r0, [r3, #16]
 8009b96:	f7ff fcc5 	bl	8009524 <__hi0bits>
 8009b9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b9e:	e7e5      	b.n	8009b6c <__d2b+0x74>
 8009ba0:	0800c269 	.word	0x0800c269
 8009ba4:	0800c27a 	.word	0x0800c27a

08009ba8 <__ratio>:
 8009ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bac:	b085      	sub	sp, #20
 8009bae:	e9cd 1000 	strd	r1, r0, [sp]
 8009bb2:	a902      	add	r1, sp, #8
 8009bb4:	f7ff ff56 	bl	8009a64 <__b2d>
 8009bb8:	9800      	ldr	r0, [sp, #0]
 8009bba:	a903      	add	r1, sp, #12
 8009bbc:	ec55 4b10 	vmov	r4, r5, d0
 8009bc0:	f7ff ff50 	bl	8009a64 <__b2d>
 8009bc4:	9b01      	ldr	r3, [sp, #4]
 8009bc6:	6919      	ldr	r1, [r3, #16]
 8009bc8:	9b00      	ldr	r3, [sp, #0]
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	1ac9      	subs	r1, r1, r3
 8009bce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009bd2:	1a9b      	subs	r3, r3, r2
 8009bd4:	ec5b ab10 	vmov	sl, fp, d0
 8009bd8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	bfce      	itee	gt
 8009be0:	462a      	movgt	r2, r5
 8009be2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009be6:	465a      	movle	r2, fp
 8009be8:	462f      	mov	r7, r5
 8009bea:	46d9      	mov	r9, fp
 8009bec:	bfcc      	ite	gt
 8009bee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009bf2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009bf6:	464b      	mov	r3, r9
 8009bf8:	4652      	mov	r2, sl
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	4639      	mov	r1, r7
 8009bfe:	f7f6 fe2d 	bl	800085c <__aeabi_ddiv>
 8009c02:	ec41 0b10 	vmov	d0, r0, r1
 8009c06:	b005      	add	sp, #20
 8009c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c0c <__copybits>:
 8009c0c:	3901      	subs	r1, #1
 8009c0e:	b570      	push	{r4, r5, r6, lr}
 8009c10:	1149      	asrs	r1, r1, #5
 8009c12:	6914      	ldr	r4, [r2, #16]
 8009c14:	3101      	adds	r1, #1
 8009c16:	f102 0314 	add.w	r3, r2, #20
 8009c1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009c1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009c22:	1f05      	subs	r5, r0, #4
 8009c24:	42a3      	cmp	r3, r4
 8009c26:	d30c      	bcc.n	8009c42 <__copybits+0x36>
 8009c28:	1aa3      	subs	r3, r4, r2
 8009c2a:	3b11      	subs	r3, #17
 8009c2c:	f023 0303 	bic.w	r3, r3, #3
 8009c30:	3211      	adds	r2, #17
 8009c32:	42a2      	cmp	r2, r4
 8009c34:	bf88      	it	hi
 8009c36:	2300      	movhi	r3, #0
 8009c38:	4418      	add	r0, r3
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	4288      	cmp	r0, r1
 8009c3e:	d305      	bcc.n	8009c4c <__copybits+0x40>
 8009c40:	bd70      	pop	{r4, r5, r6, pc}
 8009c42:	f853 6b04 	ldr.w	r6, [r3], #4
 8009c46:	f845 6f04 	str.w	r6, [r5, #4]!
 8009c4a:	e7eb      	b.n	8009c24 <__copybits+0x18>
 8009c4c:	f840 3b04 	str.w	r3, [r0], #4
 8009c50:	e7f4      	b.n	8009c3c <__copybits+0x30>

08009c52 <__any_on>:
 8009c52:	f100 0214 	add.w	r2, r0, #20
 8009c56:	6900      	ldr	r0, [r0, #16]
 8009c58:	114b      	asrs	r3, r1, #5
 8009c5a:	4298      	cmp	r0, r3
 8009c5c:	b510      	push	{r4, lr}
 8009c5e:	db11      	blt.n	8009c84 <__any_on+0x32>
 8009c60:	dd0a      	ble.n	8009c78 <__any_on+0x26>
 8009c62:	f011 011f 	ands.w	r1, r1, #31
 8009c66:	d007      	beq.n	8009c78 <__any_on+0x26>
 8009c68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c6c:	fa24 f001 	lsr.w	r0, r4, r1
 8009c70:	fa00 f101 	lsl.w	r1, r0, r1
 8009c74:	428c      	cmp	r4, r1
 8009c76:	d10b      	bne.n	8009c90 <__any_on+0x3e>
 8009c78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d803      	bhi.n	8009c88 <__any_on+0x36>
 8009c80:	2000      	movs	r0, #0
 8009c82:	bd10      	pop	{r4, pc}
 8009c84:	4603      	mov	r3, r0
 8009c86:	e7f7      	b.n	8009c78 <__any_on+0x26>
 8009c88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c8c:	2900      	cmp	r1, #0
 8009c8e:	d0f5      	beq.n	8009c7c <__any_on+0x2a>
 8009c90:	2001      	movs	r0, #1
 8009c92:	e7f6      	b.n	8009c82 <__any_on+0x30>

08009c94 <sulp>:
 8009c94:	b570      	push	{r4, r5, r6, lr}
 8009c96:	4604      	mov	r4, r0
 8009c98:	460d      	mov	r5, r1
 8009c9a:	ec45 4b10 	vmov	d0, r4, r5
 8009c9e:	4616      	mov	r6, r2
 8009ca0:	f7ff feba 	bl	8009a18 <__ulp>
 8009ca4:	ec51 0b10 	vmov	r0, r1, d0
 8009ca8:	b17e      	cbz	r6, 8009cca <sulp+0x36>
 8009caa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009cae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	dd09      	ble.n	8009cca <sulp+0x36>
 8009cb6:	051b      	lsls	r3, r3, #20
 8009cb8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009cbc:	2400      	movs	r4, #0
 8009cbe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009cc2:	4622      	mov	r2, r4
 8009cc4:	462b      	mov	r3, r5
 8009cc6:	f7f6 fc9f 	bl	8000608 <__aeabi_dmul>
 8009cca:	ec41 0b10 	vmov	d0, r0, r1
 8009cce:	bd70      	pop	{r4, r5, r6, pc}

08009cd0 <_strtod_l>:
 8009cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	b09f      	sub	sp, #124	@ 0x7c
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009cda:	2200      	movs	r2, #0
 8009cdc:	921a      	str	r2, [sp, #104]	@ 0x68
 8009cde:	9005      	str	r0, [sp, #20]
 8009ce0:	f04f 0a00 	mov.w	sl, #0
 8009ce4:	f04f 0b00 	mov.w	fp, #0
 8009ce8:	460a      	mov	r2, r1
 8009cea:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cec:	7811      	ldrb	r1, [r2, #0]
 8009cee:	292b      	cmp	r1, #43	@ 0x2b
 8009cf0:	d04a      	beq.n	8009d88 <_strtod_l+0xb8>
 8009cf2:	d838      	bhi.n	8009d66 <_strtod_l+0x96>
 8009cf4:	290d      	cmp	r1, #13
 8009cf6:	d832      	bhi.n	8009d5e <_strtod_l+0x8e>
 8009cf8:	2908      	cmp	r1, #8
 8009cfa:	d832      	bhi.n	8009d62 <_strtod_l+0x92>
 8009cfc:	2900      	cmp	r1, #0
 8009cfe:	d03b      	beq.n	8009d78 <_strtod_l+0xa8>
 8009d00:	2200      	movs	r2, #0
 8009d02:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d04:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009d06:	782a      	ldrb	r2, [r5, #0]
 8009d08:	2a30      	cmp	r2, #48	@ 0x30
 8009d0a:	f040 80b2 	bne.w	8009e72 <_strtod_l+0x1a2>
 8009d0e:	786a      	ldrb	r2, [r5, #1]
 8009d10:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d14:	2a58      	cmp	r2, #88	@ 0x58
 8009d16:	d16e      	bne.n	8009df6 <_strtod_l+0x126>
 8009d18:	9302      	str	r3, [sp, #8]
 8009d1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d1c:	9301      	str	r3, [sp, #4]
 8009d1e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	4a8f      	ldr	r2, [pc, #572]	@ (8009f60 <_strtod_l+0x290>)
 8009d24:	9805      	ldr	r0, [sp, #20]
 8009d26:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009d28:	a919      	add	r1, sp, #100	@ 0x64
 8009d2a:	f001 f927 	bl	800af7c <__gethex>
 8009d2e:	f010 060f 	ands.w	r6, r0, #15
 8009d32:	4604      	mov	r4, r0
 8009d34:	d005      	beq.n	8009d42 <_strtod_l+0x72>
 8009d36:	2e06      	cmp	r6, #6
 8009d38:	d128      	bne.n	8009d8c <_strtod_l+0xbc>
 8009d3a:	3501      	adds	r5, #1
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009d40:	930e      	str	r3, [sp, #56]	@ 0x38
 8009d42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f040 858e 	bne.w	800a866 <_strtod_l+0xb96>
 8009d4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d4c:	b1cb      	cbz	r3, 8009d82 <_strtod_l+0xb2>
 8009d4e:	4652      	mov	r2, sl
 8009d50:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009d54:	ec43 2b10 	vmov	d0, r2, r3
 8009d58:	b01f      	add	sp, #124	@ 0x7c
 8009d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5e:	2920      	cmp	r1, #32
 8009d60:	d1ce      	bne.n	8009d00 <_strtod_l+0x30>
 8009d62:	3201      	adds	r2, #1
 8009d64:	e7c1      	b.n	8009cea <_strtod_l+0x1a>
 8009d66:	292d      	cmp	r1, #45	@ 0x2d
 8009d68:	d1ca      	bne.n	8009d00 <_strtod_l+0x30>
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	910e      	str	r1, [sp, #56]	@ 0x38
 8009d6e:	1c51      	adds	r1, r2, #1
 8009d70:	9119      	str	r1, [sp, #100]	@ 0x64
 8009d72:	7852      	ldrb	r2, [r2, #1]
 8009d74:	2a00      	cmp	r2, #0
 8009d76:	d1c5      	bne.n	8009d04 <_strtod_l+0x34>
 8009d78:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d7a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f040 8570 	bne.w	800a862 <_strtod_l+0xb92>
 8009d82:	4652      	mov	r2, sl
 8009d84:	465b      	mov	r3, fp
 8009d86:	e7e5      	b.n	8009d54 <_strtod_l+0x84>
 8009d88:	2100      	movs	r1, #0
 8009d8a:	e7ef      	b.n	8009d6c <_strtod_l+0x9c>
 8009d8c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009d8e:	b13a      	cbz	r2, 8009da0 <_strtod_l+0xd0>
 8009d90:	2135      	movs	r1, #53	@ 0x35
 8009d92:	a81c      	add	r0, sp, #112	@ 0x70
 8009d94:	f7ff ff3a 	bl	8009c0c <__copybits>
 8009d98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d9a:	9805      	ldr	r0, [sp, #20]
 8009d9c:	f7ff fb10 	bl	80093c0 <_Bfree>
 8009da0:	3e01      	subs	r6, #1
 8009da2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009da4:	2e04      	cmp	r6, #4
 8009da6:	d806      	bhi.n	8009db6 <_strtod_l+0xe6>
 8009da8:	e8df f006 	tbb	[pc, r6]
 8009dac:	201d0314 	.word	0x201d0314
 8009db0:	14          	.byte	0x14
 8009db1:	00          	.byte	0x00
 8009db2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009db6:	05e1      	lsls	r1, r4, #23
 8009db8:	bf48      	it	mi
 8009dba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009dbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009dc2:	0d1b      	lsrs	r3, r3, #20
 8009dc4:	051b      	lsls	r3, r3, #20
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1bb      	bne.n	8009d42 <_strtod_l+0x72>
 8009dca:	f7fe fb2d 	bl	8008428 <__errno>
 8009dce:	2322      	movs	r3, #34	@ 0x22
 8009dd0:	6003      	str	r3, [r0, #0]
 8009dd2:	e7b6      	b.n	8009d42 <_strtod_l+0x72>
 8009dd4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009dd8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009ddc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009de0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009de4:	e7e7      	b.n	8009db6 <_strtod_l+0xe6>
 8009de6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009f68 <_strtod_l+0x298>
 8009dea:	e7e4      	b.n	8009db6 <_strtod_l+0xe6>
 8009dec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009df0:	f04f 3aff 	mov.w	sl, #4294967295
 8009df4:	e7df      	b.n	8009db6 <_strtod_l+0xe6>
 8009df6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009df8:	1c5a      	adds	r2, r3, #1
 8009dfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8009dfc:	785b      	ldrb	r3, [r3, #1]
 8009dfe:	2b30      	cmp	r3, #48	@ 0x30
 8009e00:	d0f9      	beq.n	8009df6 <_strtod_l+0x126>
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d09d      	beq.n	8009d42 <_strtod_l+0x72>
 8009e06:	2301      	movs	r3, #1
 8009e08:	2700      	movs	r7, #0
 8009e0a:	9308      	str	r3, [sp, #32]
 8009e0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e10:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009e12:	46b9      	mov	r9, r7
 8009e14:	220a      	movs	r2, #10
 8009e16:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009e18:	7805      	ldrb	r5, [r0, #0]
 8009e1a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009e1e:	b2d9      	uxtb	r1, r3
 8009e20:	2909      	cmp	r1, #9
 8009e22:	d928      	bls.n	8009e76 <_strtod_l+0x1a6>
 8009e24:	494f      	ldr	r1, [pc, #316]	@ (8009f64 <_strtod_l+0x294>)
 8009e26:	2201      	movs	r2, #1
 8009e28:	f000 ffd6 	bl	800add8 <strncmp>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	d032      	beq.n	8009e96 <_strtod_l+0x1c6>
 8009e30:	2000      	movs	r0, #0
 8009e32:	462a      	mov	r2, r5
 8009e34:	900a      	str	r0, [sp, #40]	@ 0x28
 8009e36:	464d      	mov	r5, r9
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2a65      	cmp	r2, #101	@ 0x65
 8009e3c:	d001      	beq.n	8009e42 <_strtod_l+0x172>
 8009e3e:	2a45      	cmp	r2, #69	@ 0x45
 8009e40:	d114      	bne.n	8009e6c <_strtod_l+0x19c>
 8009e42:	b91d      	cbnz	r5, 8009e4c <_strtod_l+0x17c>
 8009e44:	9a08      	ldr	r2, [sp, #32]
 8009e46:	4302      	orrs	r2, r0
 8009e48:	d096      	beq.n	8009d78 <_strtod_l+0xa8>
 8009e4a:	2500      	movs	r5, #0
 8009e4c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009e4e:	1c62      	adds	r2, r4, #1
 8009e50:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e52:	7862      	ldrb	r2, [r4, #1]
 8009e54:	2a2b      	cmp	r2, #43	@ 0x2b
 8009e56:	d07a      	beq.n	8009f4e <_strtod_l+0x27e>
 8009e58:	2a2d      	cmp	r2, #45	@ 0x2d
 8009e5a:	d07e      	beq.n	8009f5a <_strtod_l+0x28a>
 8009e5c:	f04f 0c00 	mov.w	ip, #0
 8009e60:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009e64:	2909      	cmp	r1, #9
 8009e66:	f240 8085 	bls.w	8009f74 <_strtod_l+0x2a4>
 8009e6a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009e6c:	f04f 0800 	mov.w	r8, #0
 8009e70:	e0a5      	b.n	8009fbe <_strtod_l+0x2ee>
 8009e72:	2300      	movs	r3, #0
 8009e74:	e7c8      	b.n	8009e08 <_strtod_l+0x138>
 8009e76:	f1b9 0f08 	cmp.w	r9, #8
 8009e7a:	bfd8      	it	le
 8009e7c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009e7e:	f100 0001 	add.w	r0, r0, #1
 8009e82:	bfda      	itte	le
 8009e84:	fb02 3301 	mlale	r3, r2, r1, r3
 8009e88:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009e8a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009e8e:	f109 0901 	add.w	r9, r9, #1
 8009e92:	9019      	str	r0, [sp, #100]	@ 0x64
 8009e94:	e7bf      	b.n	8009e16 <_strtod_l+0x146>
 8009e96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e98:	1c5a      	adds	r2, r3, #1
 8009e9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e9c:	785a      	ldrb	r2, [r3, #1]
 8009e9e:	f1b9 0f00 	cmp.w	r9, #0
 8009ea2:	d03b      	beq.n	8009f1c <_strtod_l+0x24c>
 8009ea4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009ea6:	464d      	mov	r5, r9
 8009ea8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009eac:	2b09      	cmp	r3, #9
 8009eae:	d912      	bls.n	8009ed6 <_strtod_l+0x206>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e7c2      	b.n	8009e3a <_strtod_l+0x16a>
 8009eb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009eb6:	1c5a      	adds	r2, r3, #1
 8009eb8:	9219      	str	r2, [sp, #100]	@ 0x64
 8009eba:	785a      	ldrb	r2, [r3, #1]
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	2a30      	cmp	r2, #48	@ 0x30
 8009ec0:	d0f8      	beq.n	8009eb4 <_strtod_l+0x1e4>
 8009ec2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009ec6:	2b08      	cmp	r3, #8
 8009ec8:	f200 84d2 	bhi.w	800a870 <_strtod_l+0xba0>
 8009ecc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ece:	900a      	str	r0, [sp, #40]	@ 0x28
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ed4:	4605      	mov	r5, r0
 8009ed6:	3a30      	subs	r2, #48	@ 0x30
 8009ed8:	f100 0301 	add.w	r3, r0, #1
 8009edc:	d018      	beq.n	8009f10 <_strtod_l+0x240>
 8009ede:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ee0:	4419      	add	r1, r3
 8009ee2:	910a      	str	r1, [sp, #40]	@ 0x28
 8009ee4:	462e      	mov	r6, r5
 8009ee6:	f04f 0e0a 	mov.w	lr, #10
 8009eea:	1c71      	adds	r1, r6, #1
 8009eec:	eba1 0c05 	sub.w	ip, r1, r5
 8009ef0:	4563      	cmp	r3, ip
 8009ef2:	dc15      	bgt.n	8009f20 <_strtod_l+0x250>
 8009ef4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009ef8:	182b      	adds	r3, r5, r0
 8009efa:	2b08      	cmp	r3, #8
 8009efc:	f105 0501 	add.w	r5, r5, #1
 8009f00:	4405      	add	r5, r0
 8009f02:	dc1a      	bgt.n	8009f3a <_strtod_l+0x26a>
 8009f04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f06:	230a      	movs	r3, #10
 8009f08:	fb03 2301 	mla	r3, r3, r1, r2
 8009f0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f0e:	2300      	movs	r3, #0
 8009f10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f12:	1c51      	adds	r1, r2, #1
 8009f14:	9119      	str	r1, [sp, #100]	@ 0x64
 8009f16:	7852      	ldrb	r2, [r2, #1]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	e7c5      	b.n	8009ea8 <_strtod_l+0x1d8>
 8009f1c:	4648      	mov	r0, r9
 8009f1e:	e7ce      	b.n	8009ebe <_strtod_l+0x1ee>
 8009f20:	2e08      	cmp	r6, #8
 8009f22:	dc05      	bgt.n	8009f30 <_strtod_l+0x260>
 8009f24:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009f26:	fb0e f606 	mul.w	r6, lr, r6
 8009f2a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009f2c:	460e      	mov	r6, r1
 8009f2e:	e7dc      	b.n	8009eea <_strtod_l+0x21a>
 8009f30:	2910      	cmp	r1, #16
 8009f32:	bfd8      	it	le
 8009f34:	fb0e f707 	mulle.w	r7, lr, r7
 8009f38:	e7f8      	b.n	8009f2c <_strtod_l+0x25c>
 8009f3a:	2b0f      	cmp	r3, #15
 8009f3c:	bfdc      	itt	le
 8009f3e:	230a      	movle	r3, #10
 8009f40:	fb03 2707 	mlale	r7, r3, r7, r2
 8009f44:	e7e3      	b.n	8009f0e <_strtod_l+0x23e>
 8009f46:	2300      	movs	r3, #0
 8009f48:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e77a      	b.n	8009e44 <_strtod_l+0x174>
 8009f4e:	f04f 0c00 	mov.w	ip, #0
 8009f52:	1ca2      	adds	r2, r4, #2
 8009f54:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f56:	78a2      	ldrb	r2, [r4, #2]
 8009f58:	e782      	b.n	8009e60 <_strtod_l+0x190>
 8009f5a:	f04f 0c01 	mov.w	ip, #1
 8009f5e:	e7f8      	b.n	8009f52 <_strtod_l+0x282>
 8009f60:	0800c49c 	.word	0x0800c49c
 8009f64:	0800c2d3 	.word	0x0800c2d3
 8009f68:	7ff00000 	.word	0x7ff00000
 8009f6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f6e:	1c51      	adds	r1, r2, #1
 8009f70:	9119      	str	r1, [sp, #100]	@ 0x64
 8009f72:	7852      	ldrb	r2, [r2, #1]
 8009f74:	2a30      	cmp	r2, #48	@ 0x30
 8009f76:	d0f9      	beq.n	8009f6c <_strtod_l+0x29c>
 8009f78:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009f7c:	2908      	cmp	r1, #8
 8009f7e:	f63f af75 	bhi.w	8009e6c <_strtod_l+0x19c>
 8009f82:	3a30      	subs	r2, #48	@ 0x30
 8009f84:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f88:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009f8a:	f04f 080a 	mov.w	r8, #10
 8009f8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f90:	1c56      	adds	r6, r2, #1
 8009f92:	9619      	str	r6, [sp, #100]	@ 0x64
 8009f94:	7852      	ldrb	r2, [r2, #1]
 8009f96:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009f9a:	f1be 0f09 	cmp.w	lr, #9
 8009f9e:	d939      	bls.n	800a014 <_strtod_l+0x344>
 8009fa0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009fa2:	1a76      	subs	r6, r6, r1
 8009fa4:	2e08      	cmp	r6, #8
 8009fa6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009faa:	dc03      	bgt.n	8009fb4 <_strtod_l+0x2e4>
 8009fac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009fae:	4588      	cmp	r8, r1
 8009fb0:	bfa8      	it	ge
 8009fb2:	4688      	movge	r8, r1
 8009fb4:	f1bc 0f00 	cmp.w	ip, #0
 8009fb8:	d001      	beq.n	8009fbe <_strtod_l+0x2ee>
 8009fba:	f1c8 0800 	rsb	r8, r8, #0
 8009fbe:	2d00      	cmp	r5, #0
 8009fc0:	d14e      	bne.n	800a060 <_strtod_l+0x390>
 8009fc2:	9908      	ldr	r1, [sp, #32]
 8009fc4:	4308      	orrs	r0, r1
 8009fc6:	f47f aebc 	bne.w	8009d42 <_strtod_l+0x72>
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f47f aed4 	bne.w	8009d78 <_strtod_l+0xa8>
 8009fd0:	2a69      	cmp	r2, #105	@ 0x69
 8009fd2:	d028      	beq.n	800a026 <_strtod_l+0x356>
 8009fd4:	dc25      	bgt.n	800a022 <_strtod_l+0x352>
 8009fd6:	2a49      	cmp	r2, #73	@ 0x49
 8009fd8:	d025      	beq.n	800a026 <_strtod_l+0x356>
 8009fda:	2a4e      	cmp	r2, #78	@ 0x4e
 8009fdc:	f47f aecc 	bne.w	8009d78 <_strtod_l+0xa8>
 8009fe0:	499a      	ldr	r1, [pc, #616]	@ (800a24c <_strtod_l+0x57c>)
 8009fe2:	a819      	add	r0, sp, #100	@ 0x64
 8009fe4:	f001 f9ec 	bl	800b3c0 <__match>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	f43f aec5 	beq.w	8009d78 <_strtod_l+0xa8>
 8009fee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	2b28      	cmp	r3, #40	@ 0x28
 8009ff4:	d12e      	bne.n	800a054 <_strtod_l+0x384>
 8009ff6:	4996      	ldr	r1, [pc, #600]	@ (800a250 <_strtod_l+0x580>)
 8009ff8:	aa1c      	add	r2, sp, #112	@ 0x70
 8009ffa:	a819      	add	r0, sp, #100	@ 0x64
 8009ffc:	f001 f9f4 	bl	800b3e8 <__hexnan>
 800a000:	2805      	cmp	r0, #5
 800a002:	d127      	bne.n	800a054 <_strtod_l+0x384>
 800a004:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a006:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a00a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a00e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a012:	e696      	b.n	8009d42 <_strtod_l+0x72>
 800a014:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a016:	fb08 2101 	mla	r1, r8, r1, r2
 800a01a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a01e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a020:	e7b5      	b.n	8009f8e <_strtod_l+0x2be>
 800a022:	2a6e      	cmp	r2, #110	@ 0x6e
 800a024:	e7da      	b.n	8009fdc <_strtod_l+0x30c>
 800a026:	498b      	ldr	r1, [pc, #556]	@ (800a254 <_strtod_l+0x584>)
 800a028:	a819      	add	r0, sp, #100	@ 0x64
 800a02a:	f001 f9c9 	bl	800b3c0 <__match>
 800a02e:	2800      	cmp	r0, #0
 800a030:	f43f aea2 	beq.w	8009d78 <_strtod_l+0xa8>
 800a034:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a036:	4988      	ldr	r1, [pc, #544]	@ (800a258 <_strtod_l+0x588>)
 800a038:	3b01      	subs	r3, #1
 800a03a:	a819      	add	r0, sp, #100	@ 0x64
 800a03c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a03e:	f001 f9bf 	bl	800b3c0 <__match>
 800a042:	b910      	cbnz	r0, 800a04a <_strtod_l+0x37a>
 800a044:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a046:	3301      	adds	r3, #1
 800a048:	9319      	str	r3, [sp, #100]	@ 0x64
 800a04a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a268 <_strtod_l+0x598>
 800a04e:	f04f 0a00 	mov.w	sl, #0
 800a052:	e676      	b.n	8009d42 <_strtod_l+0x72>
 800a054:	4881      	ldr	r0, [pc, #516]	@ (800a25c <_strtod_l+0x58c>)
 800a056:	f000 feef 	bl	800ae38 <nan>
 800a05a:	ec5b ab10 	vmov	sl, fp, d0
 800a05e:	e670      	b.n	8009d42 <_strtod_l+0x72>
 800a060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a062:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a064:	eba8 0303 	sub.w	r3, r8, r3
 800a068:	f1b9 0f00 	cmp.w	r9, #0
 800a06c:	bf08      	it	eq
 800a06e:	46a9      	moveq	r9, r5
 800a070:	2d10      	cmp	r5, #16
 800a072:	9309      	str	r3, [sp, #36]	@ 0x24
 800a074:	462c      	mov	r4, r5
 800a076:	bfa8      	it	ge
 800a078:	2410      	movge	r4, #16
 800a07a:	f7f6 fa4b 	bl	8000514 <__aeabi_ui2d>
 800a07e:	2d09      	cmp	r5, #9
 800a080:	4682      	mov	sl, r0
 800a082:	468b      	mov	fp, r1
 800a084:	dc13      	bgt.n	800a0ae <_strtod_l+0x3de>
 800a086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f43f ae5a 	beq.w	8009d42 <_strtod_l+0x72>
 800a08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a090:	dd78      	ble.n	800a184 <_strtod_l+0x4b4>
 800a092:	2b16      	cmp	r3, #22
 800a094:	dc5f      	bgt.n	800a156 <_strtod_l+0x486>
 800a096:	4972      	ldr	r1, [pc, #456]	@ (800a260 <_strtod_l+0x590>)
 800a098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a09c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0a0:	4652      	mov	r2, sl
 800a0a2:	465b      	mov	r3, fp
 800a0a4:	f7f6 fab0 	bl	8000608 <__aeabi_dmul>
 800a0a8:	4682      	mov	sl, r0
 800a0aa:	468b      	mov	fp, r1
 800a0ac:	e649      	b.n	8009d42 <_strtod_l+0x72>
 800a0ae:	4b6c      	ldr	r3, [pc, #432]	@ (800a260 <_strtod_l+0x590>)
 800a0b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a0b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a0b8:	f7f6 faa6 	bl	8000608 <__aeabi_dmul>
 800a0bc:	4682      	mov	sl, r0
 800a0be:	4638      	mov	r0, r7
 800a0c0:	468b      	mov	fp, r1
 800a0c2:	f7f6 fa27 	bl	8000514 <__aeabi_ui2d>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	4650      	mov	r0, sl
 800a0cc:	4659      	mov	r1, fp
 800a0ce:	f7f6 f8e5 	bl	800029c <__adddf3>
 800a0d2:	2d0f      	cmp	r5, #15
 800a0d4:	4682      	mov	sl, r0
 800a0d6:	468b      	mov	fp, r1
 800a0d8:	ddd5      	ble.n	800a086 <_strtod_l+0x3b6>
 800a0da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0dc:	1b2c      	subs	r4, r5, r4
 800a0de:	441c      	add	r4, r3
 800a0e0:	2c00      	cmp	r4, #0
 800a0e2:	f340 8093 	ble.w	800a20c <_strtod_l+0x53c>
 800a0e6:	f014 030f 	ands.w	r3, r4, #15
 800a0ea:	d00a      	beq.n	800a102 <_strtod_l+0x432>
 800a0ec:	495c      	ldr	r1, [pc, #368]	@ (800a260 <_strtod_l+0x590>)
 800a0ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0f2:	4652      	mov	r2, sl
 800a0f4:	465b      	mov	r3, fp
 800a0f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0fa:	f7f6 fa85 	bl	8000608 <__aeabi_dmul>
 800a0fe:	4682      	mov	sl, r0
 800a100:	468b      	mov	fp, r1
 800a102:	f034 040f 	bics.w	r4, r4, #15
 800a106:	d073      	beq.n	800a1f0 <_strtod_l+0x520>
 800a108:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a10c:	dd49      	ble.n	800a1a2 <_strtod_l+0x4d2>
 800a10e:	2400      	movs	r4, #0
 800a110:	46a0      	mov	r8, r4
 800a112:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a114:	46a1      	mov	r9, r4
 800a116:	9a05      	ldr	r2, [sp, #20]
 800a118:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a268 <_strtod_l+0x598>
 800a11c:	2322      	movs	r3, #34	@ 0x22
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	f04f 0a00 	mov.w	sl, #0
 800a124:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a126:	2b00      	cmp	r3, #0
 800a128:	f43f ae0b 	beq.w	8009d42 <_strtod_l+0x72>
 800a12c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a12e:	9805      	ldr	r0, [sp, #20]
 800a130:	f7ff f946 	bl	80093c0 <_Bfree>
 800a134:	9805      	ldr	r0, [sp, #20]
 800a136:	4649      	mov	r1, r9
 800a138:	f7ff f942 	bl	80093c0 <_Bfree>
 800a13c:	9805      	ldr	r0, [sp, #20]
 800a13e:	4641      	mov	r1, r8
 800a140:	f7ff f93e 	bl	80093c0 <_Bfree>
 800a144:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a146:	9805      	ldr	r0, [sp, #20]
 800a148:	f7ff f93a 	bl	80093c0 <_Bfree>
 800a14c:	9805      	ldr	r0, [sp, #20]
 800a14e:	4621      	mov	r1, r4
 800a150:	f7ff f936 	bl	80093c0 <_Bfree>
 800a154:	e5f5      	b.n	8009d42 <_strtod_l+0x72>
 800a156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a158:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a15c:	4293      	cmp	r3, r2
 800a15e:	dbbc      	blt.n	800a0da <_strtod_l+0x40a>
 800a160:	4c3f      	ldr	r4, [pc, #252]	@ (800a260 <_strtod_l+0x590>)
 800a162:	f1c5 050f 	rsb	r5, r5, #15
 800a166:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a16a:	4652      	mov	r2, sl
 800a16c:	465b      	mov	r3, fp
 800a16e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a172:	f7f6 fa49 	bl	8000608 <__aeabi_dmul>
 800a176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a178:	1b5d      	subs	r5, r3, r5
 800a17a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a17e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a182:	e78f      	b.n	800a0a4 <_strtod_l+0x3d4>
 800a184:	3316      	adds	r3, #22
 800a186:	dba8      	blt.n	800a0da <_strtod_l+0x40a>
 800a188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a18a:	eba3 0808 	sub.w	r8, r3, r8
 800a18e:	4b34      	ldr	r3, [pc, #208]	@ (800a260 <_strtod_l+0x590>)
 800a190:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a194:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a198:	4650      	mov	r0, sl
 800a19a:	4659      	mov	r1, fp
 800a19c:	f7f6 fb5e 	bl	800085c <__aeabi_ddiv>
 800a1a0:	e782      	b.n	800a0a8 <_strtod_l+0x3d8>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	4f2f      	ldr	r7, [pc, #188]	@ (800a264 <_strtod_l+0x594>)
 800a1a6:	1124      	asrs	r4, r4, #4
 800a1a8:	4650      	mov	r0, sl
 800a1aa:	4659      	mov	r1, fp
 800a1ac:	461e      	mov	r6, r3
 800a1ae:	2c01      	cmp	r4, #1
 800a1b0:	dc21      	bgt.n	800a1f6 <_strtod_l+0x526>
 800a1b2:	b10b      	cbz	r3, 800a1b8 <_strtod_l+0x4e8>
 800a1b4:	4682      	mov	sl, r0
 800a1b6:	468b      	mov	fp, r1
 800a1b8:	492a      	ldr	r1, [pc, #168]	@ (800a264 <_strtod_l+0x594>)
 800a1ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a1be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a1c2:	4652      	mov	r2, sl
 800a1c4:	465b      	mov	r3, fp
 800a1c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1ca:	f7f6 fa1d 	bl	8000608 <__aeabi_dmul>
 800a1ce:	4b26      	ldr	r3, [pc, #152]	@ (800a268 <_strtod_l+0x598>)
 800a1d0:	460a      	mov	r2, r1
 800a1d2:	400b      	ands	r3, r1
 800a1d4:	4925      	ldr	r1, [pc, #148]	@ (800a26c <_strtod_l+0x59c>)
 800a1d6:	428b      	cmp	r3, r1
 800a1d8:	4682      	mov	sl, r0
 800a1da:	d898      	bhi.n	800a10e <_strtod_l+0x43e>
 800a1dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a1e0:	428b      	cmp	r3, r1
 800a1e2:	bf86      	itte	hi
 800a1e4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a270 <_strtod_l+0x5a0>
 800a1e8:	f04f 3aff 	movhi.w	sl, #4294967295
 800a1ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	9308      	str	r3, [sp, #32]
 800a1f4:	e076      	b.n	800a2e4 <_strtod_l+0x614>
 800a1f6:	07e2      	lsls	r2, r4, #31
 800a1f8:	d504      	bpl.n	800a204 <_strtod_l+0x534>
 800a1fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1fe:	f7f6 fa03 	bl	8000608 <__aeabi_dmul>
 800a202:	2301      	movs	r3, #1
 800a204:	3601      	adds	r6, #1
 800a206:	1064      	asrs	r4, r4, #1
 800a208:	3708      	adds	r7, #8
 800a20a:	e7d0      	b.n	800a1ae <_strtod_l+0x4de>
 800a20c:	d0f0      	beq.n	800a1f0 <_strtod_l+0x520>
 800a20e:	4264      	negs	r4, r4
 800a210:	f014 020f 	ands.w	r2, r4, #15
 800a214:	d00a      	beq.n	800a22c <_strtod_l+0x55c>
 800a216:	4b12      	ldr	r3, [pc, #72]	@ (800a260 <_strtod_l+0x590>)
 800a218:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a21c:	4650      	mov	r0, sl
 800a21e:	4659      	mov	r1, fp
 800a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a224:	f7f6 fb1a 	bl	800085c <__aeabi_ddiv>
 800a228:	4682      	mov	sl, r0
 800a22a:	468b      	mov	fp, r1
 800a22c:	1124      	asrs	r4, r4, #4
 800a22e:	d0df      	beq.n	800a1f0 <_strtod_l+0x520>
 800a230:	2c1f      	cmp	r4, #31
 800a232:	dd1f      	ble.n	800a274 <_strtod_l+0x5a4>
 800a234:	2400      	movs	r4, #0
 800a236:	46a0      	mov	r8, r4
 800a238:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a23a:	46a1      	mov	r9, r4
 800a23c:	9a05      	ldr	r2, [sp, #20]
 800a23e:	2322      	movs	r3, #34	@ 0x22
 800a240:	f04f 0a00 	mov.w	sl, #0
 800a244:	f04f 0b00 	mov.w	fp, #0
 800a248:	6013      	str	r3, [r2, #0]
 800a24a:	e76b      	b.n	800a124 <_strtod_l+0x454>
 800a24c:	0800c1c1 	.word	0x0800c1c1
 800a250:	0800c488 	.word	0x0800c488
 800a254:	0800c1b9 	.word	0x0800c1b9
 800a258:	0800c1f0 	.word	0x0800c1f0
 800a25c:	0800c329 	.word	0x0800c329
 800a260:	0800c3c0 	.word	0x0800c3c0
 800a264:	0800c398 	.word	0x0800c398
 800a268:	7ff00000 	.word	0x7ff00000
 800a26c:	7ca00000 	.word	0x7ca00000
 800a270:	7fefffff 	.word	0x7fefffff
 800a274:	f014 0310 	ands.w	r3, r4, #16
 800a278:	bf18      	it	ne
 800a27a:	236a      	movne	r3, #106	@ 0x6a
 800a27c:	4ea9      	ldr	r6, [pc, #676]	@ (800a524 <_strtod_l+0x854>)
 800a27e:	9308      	str	r3, [sp, #32]
 800a280:	4650      	mov	r0, sl
 800a282:	4659      	mov	r1, fp
 800a284:	2300      	movs	r3, #0
 800a286:	07e7      	lsls	r7, r4, #31
 800a288:	d504      	bpl.n	800a294 <_strtod_l+0x5c4>
 800a28a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a28e:	f7f6 f9bb 	bl	8000608 <__aeabi_dmul>
 800a292:	2301      	movs	r3, #1
 800a294:	1064      	asrs	r4, r4, #1
 800a296:	f106 0608 	add.w	r6, r6, #8
 800a29a:	d1f4      	bne.n	800a286 <_strtod_l+0x5b6>
 800a29c:	b10b      	cbz	r3, 800a2a2 <_strtod_l+0x5d2>
 800a29e:	4682      	mov	sl, r0
 800a2a0:	468b      	mov	fp, r1
 800a2a2:	9b08      	ldr	r3, [sp, #32]
 800a2a4:	b1b3      	cbz	r3, 800a2d4 <_strtod_l+0x604>
 800a2a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a2aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	4659      	mov	r1, fp
 800a2b2:	dd0f      	ble.n	800a2d4 <_strtod_l+0x604>
 800a2b4:	2b1f      	cmp	r3, #31
 800a2b6:	dd56      	ble.n	800a366 <_strtod_l+0x696>
 800a2b8:	2b34      	cmp	r3, #52	@ 0x34
 800a2ba:	bfde      	ittt	le
 800a2bc:	f04f 33ff 	movle.w	r3, #4294967295
 800a2c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a2c4:	4093      	lslle	r3, r2
 800a2c6:	f04f 0a00 	mov.w	sl, #0
 800a2ca:	bfcc      	ite	gt
 800a2cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a2d0:	ea03 0b01 	andle.w	fp, r3, r1
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	4650      	mov	r0, sl
 800a2da:	4659      	mov	r1, fp
 800a2dc:	f7f6 fbfc 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	d1a7      	bne.n	800a234 <_strtod_l+0x564>
 800a2e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a2ea:	9805      	ldr	r0, [sp, #20]
 800a2ec:	462b      	mov	r3, r5
 800a2ee:	464a      	mov	r2, r9
 800a2f0:	f7ff f8ce 	bl	8009490 <__s2b>
 800a2f4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	f43f af09 	beq.w	800a10e <_strtod_l+0x43e>
 800a2fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a300:	2a00      	cmp	r2, #0
 800a302:	eba3 0308 	sub.w	r3, r3, r8
 800a306:	bfa8      	it	ge
 800a308:	2300      	movge	r3, #0
 800a30a:	9312      	str	r3, [sp, #72]	@ 0x48
 800a30c:	2400      	movs	r4, #0
 800a30e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a312:	9316      	str	r3, [sp, #88]	@ 0x58
 800a314:	46a0      	mov	r8, r4
 800a316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a318:	9805      	ldr	r0, [sp, #20]
 800a31a:	6859      	ldr	r1, [r3, #4]
 800a31c:	f7ff f810 	bl	8009340 <_Balloc>
 800a320:	4681      	mov	r9, r0
 800a322:	2800      	cmp	r0, #0
 800a324:	f43f aef7 	beq.w	800a116 <_strtod_l+0x446>
 800a328:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a32a:	691a      	ldr	r2, [r3, #16]
 800a32c:	3202      	adds	r2, #2
 800a32e:	f103 010c 	add.w	r1, r3, #12
 800a332:	0092      	lsls	r2, r2, #2
 800a334:	300c      	adds	r0, #12
 800a336:	f000 fd71 	bl	800ae1c <memcpy>
 800a33a:	ec4b ab10 	vmov	d0, sl, fp
 800a33e:	9805      	ldr	r0, [sp, #20]
 800a340:	aa1c      	add	r2, sp, #112	@ 0x70
 800a342:	a91b      	add	r1, sp, #108	@ 0x6c
 800a344:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a348:	f7ff fbd6 	bl	8009af8 <__d2b>
 800a34c:	901a      	str	r0, [sp, #104]	@ 0x68
 800a34e:	2800      	cmp	r0, #0
 800a350:	f43f aee1 	beq.w	800a116 <_strtod_l+0x446>
 800a354:	9805      	ldr	r0, [sp, #20]
 800a356:	2101      	movs	r1, #1
 800a358:	f7ff f930 	bl	80095bc <__i2b>
 800a35c:	4680      	mov	r8, r0
 800a35e:	b948      	cbnz	r0, 800a374 <_strtod_l+0x6a4>
 800a360:	f04f 0800 	mov.w	r8, #0
 800a364:	e6d7      	b.n	800a116 <_strtod_l+0x446>
 800a366:	f04f 32ff 	mov.w	r2, #4294967295
 800a36a:	fa02 f303 	lsl.w	r3, r2, r3
 800a36e:	ea03 0a0a 	and.w	sl, r3, sl
 800a372:	e7af      	b.n	800a2d4 <_strtod_l+0x604>
 800a374:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a376:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a378:	2d00      	cmp	r5, #0
 800a37a:	bfab      	itete	ge
 800a37c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a37e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a380:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a382:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a384:	bfac      	ite	ge
 800a386:	18ef      	addge	r7, r5, r3
 800a388:	1b5e      	sublt	r6, r3, r5
 800a38a:	9b08      	ldr	r3, [sp, #32]
 800a38c:	1aed      	subs	r5, r5, r3
 800a38e:	4415      	add	r5, r2
 800a390:	4b65      	ldr	r3, [pc, #404]	@ (800a528 <_strtod_l+0x858>)
 800a392:	3d01      	subs	r5, #1
 800a394:	429d      	cmp	r5, r3
 800a396:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a39a:	da50      	bge.n	800a43e <_strtod_l+0x76e>
 800a39c:	1b5b      	subs	r3, r3, r5
 800a39e:	2b1f      	cmp	r3, #31
 800a3a0:	eba2 0203 	sub.w	r2, r2, r3
 800a3a4:	f04f 0101 	mov.w	r1, #1
 800a3a8:	dc3d      	bgt.n	800a426 <_strtod_l+0x756>
 800a3aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	9310      	str	r3, [sp, #64]	@ 0x40
 800a3b4:	18bd      	adds	r5, r7, r2
 800a3b6:	9b08      	ldr	r3, [sp, #32]
 800a3b8:	42af      	cmp	r7, r5
 800a3ba:	4416      	add	r6, r2
 800a3bc:	441e      	add	r6, r3
 800a3be:	463b      	mov	r3, r7
 800a3c0:	bfa8      	it	ge
 800a3c2:	462b      	movge	r3, r5
 800a3c4:	42b3      	cmp	r3, r6
 800a3c6:	bfa8      	it	ge
 800a3c8:	4633      	movge	r3, r6
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	bfc2      	ittt	gt
 800a3ce:	1aed      	subgt	r5, r5, r3
 800a3d0:	1af6      	subgt	r6, r6, r3
 800a3d2:	1aff      	subgt	r7, r7, r3
 800a3d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	dd16      	ble.n	800a408 <_strtod_l+0x738>
 800a3da:	4641      	mov	r1, r8
 800a3dc:	9805      	ldr	r0, [sp, #20]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f7ff f9a4 	bl	800972c <__pow5mult>
 800a3e4:	4680      	mov	r8, r0
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d0ba      	beq.n	800a360 <_strtod_l+0x690>
 800a3ea:	4601      	mov	r1, r0
 800a3ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a3ee:	9805      	ldr	r0, [sp, #20]
 800a3f0:	f7ff f8fa 	bl	80095e8 <__multiply>
 800a3f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	f43f ae8d 	beq.w	800a116 <_strtod_l+0x446>
 800a3fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3fe:	9805      	ldr	r0, [sp, #20]
 800a400:	f7fe ffde 	bl	80093c0 <_Bfree>
 800a404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a406:	931a      	str	r3, [sp, #104]	@ 0x68
 800a408:	2d00      	cmp	r5, #0
 800a40a:	dc1d      	bgt.n	800a448 <_strtod_l+0x778>
 800a40c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a40e:	2b00      	cmp	r3, #0
 800a410:	dd23      	ble.n	800a45a <_strtod_l+0x78a>
 800a412:	4649      	mov	r1, r9
 800a414:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a416:	9805      	ldr	r0, [sp, #20]
 800a418:	f7ff f988 	bl	800972c <__pow5mult>
 800a41c:	4681      	mov	r9, r0
 800a41e:	b9e0      	cbnz	r0, 800a45a <_strtod_l+0x78a>
 800a420:	f04f 0900 	mov.w	r9, #0
 800a424:	e677      	b.n	800a116 <_strtod_l+0x446>
 800a426:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a42a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a42e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a432:	35e2      	adds	r5, #226	@ 0xe2
 800a434:	fa01 f305 	lsl.w	r3, r1, r5
 800a438:	9310      	str	r3, [sp, #64]	@ 0x40
 800a43a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a43c:	e7ba      	b.n	800a3b4 <_strtod_l+0x6e4>
 800a43e:	2300      	movs	r3, #0
 800a440:	9310      	str	r3, [sp, #64]	@ 0x40
 800a442:	2301      	movs	r3, #1
 800a444:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a446:	e7b5      	b.n	800a3b4 <_strtod_l+0x6e4>
 800a448:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a44a:	9805      	ldr	r0, [sp, #20]
 800a44c:	462a      	mov	r2, r5
 800a44e:	f7ff f9c7 	bl	80097e0 <__lshift>
 800a452:	901a      	str	r0, [sp, #104]	@ 0x68
 800a454:	2800      	cmp	r0, #0
 800a456:	d1d9      	bne.n	800a40c <_strtod_l+0x73c>
 800a458:	e65d      	b.n	800a116 <_strtod_l+0x446>
 800a45a:	2e00      	cmp	r6, #0
 800a45c:	dd07      	ble.n	800a46e <_strtod_l+0x79e>
 800a45e:	4649      	mov	r1, r9
 800a460:	9805      	ldr	r0, [sp, #20]
 800a462:	4632      	mov	r2, r6
 800a464:	f7ff f9bc 	bl	80097e0 <__lshift>
 800a468:	4681      	mov	r9, r0
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d0d8      	beq.n	800a420 <_strtod_l+0x750>
 800a46e:	2f00      	cmp	r7, #0
 800a470:	dd08      	ble.n	800a484 <_strtod_l+0x7b4>
 800a472:	4641      	mov	r1, r8
 800a474:	9805      	ldr	r0, [sp, #20]
 800a476:	463a      	mov	r2, r7
 800a478:	f7ff f9b2 	bl	80097e0 <__lshift>
 800a47c:	4680      	mov	r8, r0
 800a47e:	2800      	cmp	r0, #0
 800a480:	f43f ae49 	beq.w	800a116 <_strtod_l+0x446>
 800a484:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a486:	9805      	ldr	r0, [sp, #20]
 800a488:	464a      	mov	r2, r9
 800a48a:	f7ff fa31 	bl	80098f0 <__mdiff>
 800a48e:	4604      	mov	r4, r0
 800a490:	2800      	cmp	r0, #0
 800a492:	f43f ae40 	beq.w	800a116 <_strtod_l+0x446>
 800a496:	68c3      	ldr	r3, [r0, #12]
 800a498:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a49a:	2300      	movs	r3, #0
 800a49c:	60c3      	str	r3, [r0, #12]
 800a49e:	4641      	mov	r1, r8
 800a4a0:	f7ff fa0a 	bl	80098b8 <__mcmp>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	da45      	bge.n	800a534 <_strtod_l+0x864>
 800a4a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4aa:	ea53 030a 	orrs.w	r3, r3, sl
 800a4ae:	d16b      	bne.n	800a588 <_strtod_l+0x8b8>
 800a4b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d167      	bne.n	800a588 <_strtod_l+0x8b8>
 800a4b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4bc:	0d1b      	lsrs	r3, r3, #20
 800a4be:	051b      	lsls	r3, r3, #20
 800a4c0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a4c4:	d960      	bls.n	800a588 <_strtod_l+0x8b8>
 800a4c6:	6963      	ldr	r3, [r4, #20]
 800a4c8:	b913      	cbnz	r3, 800a4d0 <_strtod_l+0x800>
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	dd5b      	ble.n	800a588 <_strtod_l+0x8b8>
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	9805      	ldr	r0, [sp, #20]
 800a4d6:	f7ff f983 	bl	80097e0 <__lshift>
 800a4da:	4641      	mov	r1, r8
 800a4dc:	4604      	mov	r4, r0
 800a4de:	f7ff f9eb 	bl	80098b8 <__mcmp>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	dd50      	ble.n	800a588 <_strtod_l+0x8b8>
 800a4e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4ea:	9a08      	ldr	r2, [sp, #32]
 800a4ec:	0d1b      	lsrs	r3, r3, #20
 800a4ee:	051b      	lsls	r3, r3, #20
 800a4f0:	2a00      	cmp	r2, #0
 800a4f2:	d06a      	beq.n	800a5ca <_strtod_l+0x8fa>
 800a4f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a4f8:	d867      	bhi.n	800a5ca <_strtod_l+0x8fa>
 800a4fa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a4fe:	f67f ae9d 	bls.w	800a23c <_strtod_l+0x56c>
 800a502:	4b0a      	ldr	r3, [pc, #40]	@ (800a52c <_strtod_l+0x85c>)
 800a504:	4650      	mov	r0, sl
 800a506:	4659      	mov	r1, fp
 800a508:	2200      	movs	r2, #0
 800a50a:	f7f6 f87d 	bl	8000608 <__aeabi_dmul>
 800a50e:	4b08      	ldr	r3, [pc, #32]	@ (800a530 <_strtod_l+0x860>)
 800a510:	400b      	ands	r3, r1
 800a512:	4682      	mov	sl, r0
 800a514:	468b      	mov	fp, r1
 800a516:	2b00      	cmp	r3, #0
 800a518:	f47f ae08 	bne.w	800a12c <_strtod_l+0x45c>
 800a51c:	9a05      	ldr	r2, [sp, #20]
 800a51e:	2322      	movs	r3, #34	@ 0x22
 800a520:	6013      	str	r3, [r2, #0]
 800a522:	e603      	b.n	800a12c <_strtod_l+0x45c>
 800a524:	0800c4b0 	.word	0x0800c4b0
 800a528:	fffffc02 	.word	0xfffffc02
 800a52c:	39500000 	.word	0x39500000
 800a530:	7ff00000 	.word	0x7ff00000
 800a534:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a538:	d165      	bne.n	800a606 <_strtod_l+0x936>
 800a53a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a53c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a540:	b35a      	cbz	r2, 800a59a <_strtod_l+0x8ca>
 800a542:	4a9f      	ldr	r2, [pc, #636]	@ (800a7c0 <_strtod_l+0xaf0>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d12b      	bne.n	800a5a0 <_strtod_l+0x8d0>
 800a548:	9b08      	ldr	r3, [sp, #32]
 800a54a:	4651      	mov	r1, sl
 800a54c:	b303      	cbz	r3, 800a590 <_strtod_l+0x8c0>
 800a54e:	4b9d      	ldr	r3, [pc, #628]	@ (800a7c4 <_strtod_l+0xaf4>)
 800a550:	465a      	mov	r2, fp
 800a552:	4013      	ands	r3, r2
 800a554:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a558:	f04f 32ff 	mov.w	r2, #4294967295
 800a55c:	d81b      	bhi.n	800a596 <_strtod_l+0x8c6>
 800a55e:	0d1b      	lsrs	r3, r3, #20
 800a560:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a564:	fa02 f303 	lsl.w	r3, r2, r3
 800a568:	4299      	cmp	r1, r3
 800a56a:	d119      	bne.n	800a5a0 <_strtod_l+0x8d0>
 800a56c:	4b96      	ldr	r3, [pc, #600]	@ (800a7c8 <_strtod_l+0xaf8>)
 800a56e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a570:	429a      	cmp	r2, r3
 800a572:	d102      	bne.n	800a57a <_strtod_l+0x8aa>
 800a574:	3101      	adds	r1, #1
 800a576:	f43f adce 	beq.w	800a116 <_strtod_l+0x446>
 800a57a:	4b92      	ldr	r3, [pc, #584]	@ (800a7c4 <_strtod_l+0xaf4>)
 800a57c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a57e:	401a      	ands	r2, r3
 800a580:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a584:	f04f 0a00 	mov.w	sl, #0
 800a588:	9b08      	ldr	r3, [sp, #32]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1b9      	bne.n	800a502 <_strtod_l+0x832>
 800a58e:	e5cd      	b.n	800a12c <_strtod_l+0x45c>
 800a590:	f04f 33ff 	mov.w	r3, #4294967295
 800a594:	e7e8      	b.n	800a568 <_strtod_l+0x898>
 800a596:	4613      	mov	r3, r2
 800a598:	e7e6      	b.n	800a568 <_strtod_l+0x898>
 800a59a:	ea53 030a 	orrs.w	r3, r3, sl
 800a59e:	d0a2      	beq.n	800a4e6 <_strtod_l+0x816>
 800a5a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a5a2:	b1db      	cbz	r3, 800a5dc <_strtod_l+0x90c>
 800a5a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a5a6:	4213      	tst	r3, r2
 800a5a8:	d0ee      	beq.n	800a588 <_strtod_l+0x8b8>
 800a5aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5ac:	9a08      	ldr	r2, [sp, #32]
 800a5ae:	4650      	mov	r0, sl
 800a5b0:	4659      	mov	r1, fp
 800a5b2:	b1bb      	cbz	r3, 800a5e4 <_strtod_l+0x914>
 800a5b4:	f7ff fb6e 	bl	8009c94 <sulp>
 800a5b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5bc:	ec53 2b10 	vmov	r2, r3, d0
 800a5c0:	f7f5 fe6c 	bl	800029c <__adddf3>
 800a5c4:	4682      	mov	sl, r0
 800a5c6:	468b      	mov	fp, r1
 800a5c8:	e7de      	b.n	800a588 <_strtod_l+0x8b8>
 800a5ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a5ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a5d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a5d6:	f04f 3aff 	mov.w	sl, #4294967295
 800a5da:	e7d5      	b.n	800a588 <_strtod_l+0x8b8>
 800a5dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5de:	ea13 0f0a 	tst.w	r3, sl
 800a5e2:	e7e1      	b.n	800a5a8 <_strtod_l+0x8d8>
 800a5e4:	f7ff fb56 	bl	8009c94 <sulp>
 800a5e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5ec:	ec53 2b10 	vmov	r2, r3, d0
 800a5f0:	f7f5 fe52 	bl	8000298 <__aeabi_dsub>
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	4682      	mov	sl, r0
 800a5fa:	468b      	mov	fp, r1
 800a5fc:	f7f6 fa6c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a600:	2800      	cmp	r0, #0
 800a602:	d0c1      	beq.n	800a588 <_strtod_l+0x8b8>
 800a604:	e61a      	b.n	800a23c <_strtod_l+0x56c>
 800a606:	4641      	mov	r1, r8
 800a608:	4620      	mov	r0, r4
 800a60a:	f7ff facd 	bl	8009ba8 <__ratio>
 800a60e:	ec57 6b10 	vmov	r6, r7, d0
 800a612:	2200      	movs	r2, #0
 800a614:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a618:	4630      	mov	r0, r6
 800a61a:	4639      	mov	r1, r7
 800a61c:	f7f6 fa70 	bl	8000b00 <__aeabi_dcmple>
 800a620:	2800      	cmp	r0, #0
 800a622:	d06f      	beq.n	800a704 <_strtod_l+0xa34>
 800a624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a626:	2b00      	cmp	r3, #0
 800a628:	d17a      	bne.n	800a720 <_strtod_l+0xa50>
 800a62a:	f1ba 0f00 	cmp.w	sl, #0
 800a62e:	d158      	bne.n	800a6e2 <_strtod_l+0xa12>
 800a630:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a632:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a636:	2b00      	cmp	r3, #0
 800a638:	d15a      	bne.n	800a6f0 <_strtod_l+0xa20>
 800a63a:	4b64      	ldr	r3, [pc, #400]	@ (800a7cc <_strtod_l+0xafc>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	4630      	mov	r0, r6
 800a640:	4639      	mov	r1, r7
 800a642:	f7f6 fa53 	bl	8000aec <__aeabi_dcmplt>
 800a646:	2800      	cmp	r0, #0
 800a648:	d159      	bne.n	800a6fe <_strtod_l+0xa2e>
 800a64a:	4630      	mov	r0, r6
 800a64c:	4639      	mov	r1, r7
 800a64e:	4b60      	ldr	r3, [pc, #384]	@ (800a7d0 <_strtod_l+0xb00>)
 800a650:	2200      	movs	r2, #0
 800a652:	f7f5 ffd9 	bl	8000608 <__aeabi_dmul>
 800a656:	4606      	mov	r6, r0
 800a658:	460f      	mov	r7, r1
 800a65a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a65e:	9606      	str	r6, [sp, #24]
 800a660:	9307      	str	r3, [sp, #28]
 800a662:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a666:	4d57      	ldr	r5, [pc, #348]	@ (800a7c4 <_strtod_l+0xaf4>)
 800a668:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a66c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a66e:	401d      	ands	r5, r3
 800a670:	4b58      	ldr	r3, [pc, #352]	@ (800a7d4 <_strtod_l+0xb04>)
 800a672:	429d      	cmp	r5, r3
 800a674:	f040 80b2 	bne.w	800a7dc <_strtod_l+0xb0c>
 800a678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a67a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a67e:	ec4b ab10 	vmov	d0, sl, fp
 800a682:	f7ff f9c9 	bl	8009a18 <__ulp>
 800a686:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a68a:	ec51 0b10 	vmov	r0, r1, d0
 800a68e:	f7f5 ffbb 	bl	8000608 <__aeabi_dmul>
 800a692:	4652      	mov	r2, sl
 800a694:	465b      	mov	r3, fp
 800a696:	f7f5 fe01 	bl	800029c <__adddf3>
 800a69a:	460b      	mov	r3, r1
 800a69c:	4949      	ldr	r1, [pc, #292]	@ (800a7c4 <_strtod_l+0xaf4>)
 800a69e:	4a4e      	ldr	r2, [pc, #312]	@ (800a7d8 <_strtod_l+0xb08>)
 800a6a0:	4019      	ands	r1, r3
 800a6a2:	4291      	cmp	r1, r2
 800a6a4:	4682      	mov	sl, r0
 800a6a6:	d942      	bls.n	800a72e <_strtod_l+0xa5e>
 800a6a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a6aa:	4b47      	ldr	r3, [pc, #284]	@ (800a7c8 <_strtod_l+0xaf8>)
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d103      	bne.n	800a6b8 <_strtod_l+0x9e8>
 800a6b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	f43f ad2f 	beq.w	800a116 <_strtod_l+0x446>
 800a6b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a7c8 <_strtod_l+0xaf8>
 800a6bc:	f04f 3aff 	mov.w	sl, #4294967295
 800a6c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6c2:	9805      	ldr	r0, [sp, #20]
 800a6c4:	f7fe fe7c 	bl	80093c0 <_Bfree>
 800a6c8:	9805      	ldr	r0, [sp, #20]
 800a6ca:	4649      	mov	r1, r9
 800a6cc:	f7fe fe78 	bl	80093c0 <_Bfree>
 800a6d0:	9805      	ldr	r0, [sp, #20]
 800a6d2:	4641      	mov	r1, r8
 800a6d4:	f7fe fe74 	bl	80093c0 <_Bfree>
 800a6d8:	9805      	ldr	r0, [sp, #20]
 800a6da:	4621      	mov	r1, r4
 800a6dc:	f7fe fe70 	bl	80093c0 <_Bfree>
 800a6e0:	e619      	b.n	800a316 <_strtod_l+0x646>
 800a6e2:	f1ba 0f01 	cmp.w	sl, #1
 800a6e6:	d103      	bne.n	800a6f0 <_strtod_l+0xa20>
 800a6e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f43f ada6 	beq.w	800a23c <_strtod_l+0x56c>
 800a6f0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a7a0 <_strtod_l+0xad0>
 800a6f4:	4f35      	ldr	r7, [pc, #212]	@ (800a7cc <_strtod_l+0xafc>)
 800a6f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a6fa:	2600      	movs	r6, #0
 800a6fc:	e7b1      	b.n	800a662 <_strtod_l+0x992>
 800a6fe:	4f34      	ldr	r7, [pc, #208]	@ (800a7d0 <_strtod_l+0xb00>)
 800a700:	2600      	movs	r6, #0
 800a702:	e7aa      	b.n	800a65a <_strtod_l+0x98a>
 800a704:	4b32      	ldr	r3, [pc, #200]	@ (800a7d0 <_strtod_l+0xb00>)
 800a706:	4630      	mov	r0, r6
 800a708:	4639      	mov	r1, r7
 800a70a:	2200      	movs	r2, #0
 800a70c:	f7f5 ff7c 	bl	8000608 <__aeabi_dmul>
 800a710:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a712:	4606      	mov	r6, r0
 800a714:	460f      	mov	r7, r1
 800a716:	2b00      	cmp	r3, #0
 800a718:	d09f      	beq.n	800a65a <_strtod_l+0x98a>
 800a71a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a71e:	e7a0      	b.n	800a662 <_strtod_l+0x992>
 800a720:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a7a8 <_strtod_l+0xad8>
 800a724:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a728:	ec57 6b17 	vmov	r6, r7, d7
 800a72c:	e799      	b.n	800a662 <_strtod_l+0x992>
 800a72e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a732:	9b08      	ldr	r3, [sp, #32]
 800a734:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d1c1      	bne.n	800a6c0 <_strtod_l+0x9f0>
 800a73c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a740:	0d1b      	lsrs	r3, r3, #20
 800a742:	051b      	lsls	r3, r3, #20
 800a744:	429d      	cmp	r5, r3
 800a746:	d1bb      	bne.n	800a6c0 <_strtod_l+0x9f0>
 800a748:	4630      	mov	r0, r6
 800a74a:	4639      	mov	r1, r7
 800a74c:	f7f6 fabc 	bl	8000cc8 <__aeabi_d2lz>
 800a750:	f7f5 ff2c 	bl	80005ac <__aeabi_l2d>
 800a754:	4602      	mov	r2, r0
 800a756:	460b      	mov	r3, r1
 800a758:	4630      	mov	r0, r6
 800a75a:	4639      	mov	r1, r7
 800a75c:	f7f5 fd9c 	bl	8000298 <__aeabi_dsub>
 800a760:	460b      	mov	r3, r1
 800a762:	4602      	mov	r2, r0
 800a764:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a768:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a76c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a76e:	ea46 060a 	orr.w	r6, r6, sl
 800a772:	431e      	orrs	r6, r3
 800a774:	d06f      	beq.n	800a856 <_strtod_l+0xb86>
 800a776:	a30e      	add	r3, pc, #56	@ (adr r3, 800a7b0 <_strtod_l+0xae0>)
 800a778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77c:	f7f6 f9b6 	bl	8000aec <__aeabi_dcmplt>
 800a780:	2800      	cmp	r0, #0
 800a782:	f47f acd3 	bne.w	800a12c <_strtod_l+0x45c>
 800a786:	a30c      	add	r3, pc, #48	@ (adr r3, 800a7b8 <_strtod_l+0xae8>)
 800a788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a790:	f7f6 f9ca 	bl	8000b28 <__aeabi_dcmpgt>
 800a794:	2800      	cmp	r0, #0
 800a796:	d093      	beq.n	800a6c0 <_strtod_l+0x9f0>
 800a798:	e4c8      	b.n	800a12c <_strtod_l+0x45c>
 800a79a:	bf00      	nop
 800a79c:	f3af 8000 	nop.w
 800a7a0:	00000000 	.word	0x00000000
 800a7a4:	bff00000 	.word	0xbff00000
 800a7a8:	00000000 	.word	0x00000000
 800a7ac:	3ff00000 	.word	0x3ff00000
 800a7b0:	94a03595 	.word	0x94a03595
 800a7b4:	3fdfffff 	.word	0x3fdfffff
 800a7b8:	35afe535 	.word	0x35afe535
 800a7bc:	3fe00000 	.word	0x3fe00000
 800a7c0:	000fffff 	.word	0x000fffff
 800a7c4:	7ff00000 	.word	0x7ff00000
 800a7c8:	7fefffff 	.word	0x7fefffff
 800a7cc:	3ff00000 	.word	0x3ff00000
 800a7d0:	3fe00000 	.word	0x3fe00000
 800a7d4:	7fe00000 	.word	0x7fe00000
 800a7d8:	7c9fffff 	.word	0x7c9fffff
 800a7dc:	9b08      	ldr	r3, [sp, #32]
 800a7de:	b323      	cbz	r3, 800a82a <_strtod_l+0xb5a>
 800a7e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a7e4:	d821      	bhi.n	800a82a <_strtod_l+0xb5a>
 800a7e6:	a328      	add	r3, pc, #160	@ (adr r3, 800a888 <_strtod_l+0xbb8>)
 800a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	4639      	mov	r1, r7
 800a7f0:	f7f6 f986 	bl	8000b00 <__aeabi_dcmple>
 800a7f4:	b1a0      	cbz	r0, 800a820 <_strtod_l+0xb50>
 800a7f6:	4639      	mov	r1, r7
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7f6 f9dd 	bl	8000bb8 <__aeabi_d2uiz>
 800a7fe:	2801      	cmp	r0, #1
 800a800:	bf38      	it	cc
 800a802:	2001      	movcc	r0, #1
 800a804:	f7f5 fe86 	bl	8000514 <__aeabi_ui2d>
 800a808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a80a:	4606      	mov	r6, r0
 800a80c:	460f      	mov	r7, r1
 800a80e:	b9fb      	cbnz	r3, 800a850 <_strtod_l+0xb80>
 800a810:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a814:	9014      	str	r0, [sp, #80]	@ 0x50
 800a816:	9315      	str	r3, [sp, #84]	@ 0x54
 800a818:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a81c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a820:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a822:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a826:	1b5b      	subs	r3, r3, r5
 800a828:	9311      	str	r3, [sp, #68]	@ 0x44
 800a82a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a82e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a832:	f7ff f8f1 	bl	8009a18 <__ulp>
 800a836:	4650      	mov	r0, sl
 800a838:	ec53 2b10 	vmov	r2, r3, d0
 800a83c:	4659      	mov	r1, fp
 800a83e:	f7f5 fee3 	bl	8000608 <__aeabi_dmul>
 800a842:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a846:	f7f5 fd29 	bl	800029c <__adddf3>
 800a84a:	4682      	mov	sl, r0
 800a84c:	468b      	mov	fp, r1
 800a84e:	e770      	b.n	800a732 <_strtod_l+0xa62>
 800a850:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a854:	e7e0      	b.n	800a818 <_strtod_l+0xb48>
 800a856:	a30e      	add	r3, pc, #56	@ (adr r3, 800a890 <_strtod_l+0xbc0>)
 800a858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85c:	f7f6 f946 	bl	8000aec <__aeabi_dcmplt>
 800a860:	e798      	b.n	800a794 <_strtod_l+0xac4>
 800a862:	2300      	movs	r3, #0
 800a864:	930e      	str	r3, [sp, #56]	@ 0x38
 800a866:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a868:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a86a:	6013      	str	r3, [r2, #0]
 800a86c:	f7ff ba6d 	b.w	8009d4a <_strtod_l+0x7a>
 800a870:	2a65      	cmp	r2, #101	@ 0x65
 800a872:	f43f ab68 	beq.w	8009f46 <_strtod_l+0x276>
 800a876:	2a45      	cmp	r2, #69	@ 0x45
 800a878:	f43f ab65 	beq.w	8009f46 <_strtod_l+0x276>
 800a87c:	2301      	movs	r3, #1
 800a87e:	f7ff bba0 	b.w	8009fc2 <_strtod_l+0x2f2>
 800a882:	bf00      	nop
 800a884:	f3af 8000 	nop.w
 800a888:	ffc00000 	.word	0xffc00000
 800a88c:	41dfffff 	.word	0x41dfffff
 800a890:	94a03595 	.word	0x94a03595
 800a894:	3fcfffff 	.word	0x3fcfffff

0800a898 <_strtod_r>:
 800a898:	4b01      	ldr	r3, [pc, #4]	@ (800a8a0 <_strtod_r+0x8>)
 800a89a:	f7ff ba19 	b.w	8009cd0 <_strtod_l>
 800a89e:	bf00      	nop
 800a8a0:	20000080 	.word	0x20000080

0800a8a4 <_strtol_l.isra.0>:
 800a8a4:	2b24      	cmp	r3, #36	@ 0x24
 800a8a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8aa:	4686      	mov	lr, r0
 800a8ac:	4690      	mov	r8, r2
 800a8ae:	d801      	bhi.n	800a8b4 <_strtol_l.isra.0+0x10>
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d106      	bne.n	800a8c2 <_strtol_l.isra.0+0x1e>
 800a8b4:	f7fd fdb8 	bl	8008428 <__errno>
 800a8b8:	2316      	movs	r3, #22
 800a8ba:	6003      	str	r3, [r0, #0]
 800a8bc:	2000      	movs	r0, #0
 800a8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c2:	4834      	ldr	r0, [pc, #208]	@ (800a994 <_strtol_l.isra.0+0xf0>)
 800a8c4:	460d      	mov	r5, r1
 800a8c6:	462a      	mov	r2, r5
 800a8c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8cc:	5d06      	ldrb	r6, [r0, r4]
 800a8ce:	f016 0608 	ands.w	r6, r6, #8
 800a8d2:	d1f8      	bne.n	800a8c6 <_strtol_l.isra.0+0x22>
 800a8d4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a8d6:	d110      	bne.n	800a8fa <_strtol_l.isra.0+0x56>
 800a8d8:	782c      	ldrb	r4, [r5, #0]
 800a8da:	2601      	movs	r6, #1
 800a8dc:	1c95      	adds	r5, r2, #2
 800a8de:	f033 0210 	bics.w	r2, r3, #16
 800a8e2:	d115      	bne.n	800a910 <_strtol_l.isra.0+0x6c>
 800a8e4:	2c30      	cmp	r4, #48	@ 0x30
 800a8e6:	d10d      	bne.n	800a904 <_strtol_l.isra.0+0x60>
 800a8e8:	782a      	ldrb	r2, [r5, #0]
 800a8ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a8ee:	2a58      	cmp	r2, #88	@ 0x58
 800a8f0:	d108      	bne.n	800a904 <_strtol_l.isra.0+0x60>
 800a8f2:	786c      	ldrb	r4, [r5, #1]
 800a8f4:	3502      	adds	r5, #2
 800a8f6:	2310      	movs	r3, #16
 800a8f8:	e00a      	b.n	800a910 <_strtol_l.isra.0+0x6c>
 800a8fa:	2c2b      	cmp	r4, #43	@ 0x2b
 800a8fc:	bf04      	itt	eq
 800a8fe:	782c      	ldrbeq	r4, [r5, #0]
 800a900:	1c95      	addeq	r5, r2, #2
 800a902:	e7ec      	b.n	800a8de <_strtol_l.isra.0+0x3a>
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1f6      	bne.n	800a8f6 <_strtol_l.isra.0+0x52>
 800a908:	2c30      	cmp	r4, #48	@ 0x30
 800a90a:	bf14      	ite	ne
 800a90c:	230a      	movne	r3, #10
 800a90e:	2308      	moveq	r3, #8
 800a910:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a914:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a918:	2200      	movs	r2, #0
 800a91a:	fbbc f9f3 	udiv	r9, ip, r3
 800a91e:	4610      	mov	r0, r2
 800a920:	fb03 ca19 	mls	sl, r3, r9, ip
 800a924:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a928:	2f09      	cmp	r7, #9
 800a92a:	d80f      	bhi.n	800a94c <_strtol_l.isra.0+0xa8>
 800a92c:	463c      	mov	r4, r7
 800a92e:	42a3      	cmp	r3, r4
 800a930:	dd1b      	ble.n	800a96a <_strtol_l.isra.0+0xc6>
 800a932:	1c57      	adds	r7, r2, #1
 800a934:	d007      	beq.n	800a946 <_strtol_l.isra.0+0xa2>
 800a936:	4581      	cmp	r9, r0
 800a938:	d314      	bcc.n	800a964 <_strtol_l.isra.0+0xc0>
 800a93a:	d101      	bne.n	800a940 <_strtol_l.isra.0+0x9c>
 800a93c:	45a2      	cmp	sl, r4
 800a93e:	db11      	blt.n	800a964 <_strtol_l.isra.0+0xc0>
 800a940:	fb00 4003 	mla	r0, r0, r3, r4
 800a944:	2201      	movs	r2, #1
 800a946:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a94a:	e7eb      	b.n	800a924 <_strtol_l.isra.0+0x80>
 800a94c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a950:	2f19      	cmp	r7, #25
 800a952:	d801      	bhi.n	800a958 <_strtol_l.isra.0+0xb4>
 800a954:	3c37      	subs	r4, #55	@ 0x37
 800a956:	e7ea      	b.n	800a92e <_strtol_l.isra.0+0x8a>
 800a958:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a95c:	2f19      	cmp	r7, #25
 800a95e:	d804      	bhi.n	800a96a <_strtol_l.isra.0+0xc6>
 800a960:	3c57      	subs	r4, #87	@ 0x57
 800a962:	e7e4      	b.n	800a92e <_strtol_l.isra.0+0x8a>
 800a964:	f04f 32ff 	mov.w	r2, #4294967295
 800a968:	e7ed      	b.n	800a946 <_strtol_l.isra.0+0xa2>
 800a96a:	1c53      	adds	r3, r2, #1
 800a96c:	d108      	bne.n	800a980 <_strtol_l.isra.0+0xdc>
 800a96e:	2322      	movs	r3, #34	@ 0x22
 800a970:	f8ce 3000 	str.w	r3, [lr]
 800a974:	4660      	mov	r0, ip
 800a976:	f1b8 0f00 	cmp.w	r8, #0
 800a97a:	d0a0      	beq.n	800a8be <_strtol_l.isra.0+0x1a>
 800a97c:	1e69      	subs	r1, r5, #1
 800a97e:	e006      	b.n	800a98e <_strtol_l.isra.0+0xea>
 800a980:	b106      	cbz	r6, 800a984 <_strtol_l.isra.0+0xe0>
 800a982:	4240      	negs	r0, r0
 800a984:	f1b8 0f00 	cmp.w	r8, #0
 800a988:	d099      	beq.n	800a8be <_strtol_l.isra.0+0x1a>
 800a98a:	2a00      	cmp	r2, #0
 800a98c:	d1f6      	bne.n	800a97c <_strtol_l.isra.0+0xd8>
 800a98e:	f8c8 1000 	str.w	r1, [r8]
 800a992:	e794      	b.n	800a8be <_strtol_l.isra.0+0x1a>
 800a994:	0800c4d9 	.word	0x0800c4d9

0800a998 <_strtol_r>:
 800a998:	f7ff bf84 	b.w	800a8a4 <_strtol_l.isra.0>

0800a99c <__ssputs_r>:
 800a99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9a0:	688e      	ldr	r6, [r1, #8]
 800a9a2:	461f      	mov	r7, r3
 800a9a4:	42be      	cmp	r6, r7
 800a9a6:	680b      	ldr	r3, [r1, #0]
 800a9a8:	4682      	mov	sl, r0
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	4690      	mov	r8, r2
 800a9ae:	d82d      	bhi.n	800aa0c <__ssputs_r+0x70>
 800a9b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a9b8:	d026      	beq.n	800aa08 <__ssputs_r+0x6c>
 800a9ba:	6965      	ldr	r5, [r4, #20]
 800a9bc:	6909      	ldr	r1, [r1, #16]
 800a9be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9c2:	eba3 0901 	sub.w	r9, r3, r1
 800a9c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9ca:	1c7b      	adds	r3, r7, #1
 800a9cc:	444b      	add	r3, r9
 800a9ce:	106d      	asrs	r5, r5, #1
 800a9d0:	429d      	cmp	r5, r3
 800a9d2:	bf38      	it	cc
 800a9d4:	461d      	movcc	r5, r3
 800a9d6:	0553      	lsls	r3, r2, #21
 800a9d8:	d527      	bpl.n	800aa2a <__ssputs_r+0x8e>
 800a9da:	4629      	mov	r1, r5
 800a9dc:	f7fe fc24 	bl	8009228 <_malloc_r>
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	b360      	cbz	r0, 800aa3e <__ssputs_r+0xa2>
 800a9e4:	6921      	ldr	r1, [r4, #16]
 800a9e6:	464a      	mov	r2, r9
 800a9e8:	f000 fa18 	bl	800ae1c <memcpy>
 800a9ec:	89a3      	ldrh	r3, [r4, #12]
 800a9ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a9f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9f6:	81a3      	strh	r3, [r4, #12]
 800a9f8:	6126      	str	r6, [r4, #16]
 800a9fa:	6165      	str	r5, [r4, #20]
 800a9fc:	444e      	add	r6, r9
 800a9fe:	eba5 0509 	sub.w	r5, r5, r9
 800aa02:	6026      	str	r6, [r4, #0]
 800aa04:	60a5      	str	r5, [r4, #8]
 800aa06:	463e      	mov	r6, r7
 800aa08:	42be      	cmp	r6, r7
 800aa0a:	d900      	bls.n	800aa0e <__ssputs_r+0x72>
 800aa0c:	463e      	mov	r6, r7
 800aa0e:	6820      	ldr	r0, [r4, #0]
 800aa10:	4632      	mov	r2, r6
 800aa12:	4641      	mov	r1, r8
 800aa14:	f000 f9c6 	bl	800ada4 <memmove>
 800aa18:	68a3      	ldr	r3, [r4, #8]
 800aa1a:	1b9b      	subs	r3, r3, r6
 800aa1c:	60a3      	str	r3, [r4, #8]
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	4433      	add	r3, r6
 800aa22:	6023      	str	r3, [r4, #0]
 800aa24:	2000      	movs	r0, #0
 800aa26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa2a:	462a      	mov	r2, r5
 800aa2c:	f000 fd89 	bl	800b542 <_realloc_r>
 800aa30:	4606      	mov	r6, r0
 800aa32:	2800      	cmp	r0, #0
 800aa34:	d1e0      	bne.n	800a9f8 <__ssputs_r+0x5c>
 800aa36:	6921      	ldr	r1, [r4, #16]
 800aa38:	4650      	mov	r0, sl
 800aa3a:	f7fe fb81 	bl	8009140 <_free_r>
 800aa3e:	230c      	movs	r3, #12
 800aa40:	f8ca 3000 	str.w	r3, [sl]
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa4a:	81a3      	strh	r3, [r4, #12]
 800aa4c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa50:	e7e9      	b.n	800aa26 <__ssputs_r+0x8a>
	...

0800aa54 <_svfiprintf_r>:
 800aa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa58:	4698      	mov	r8, r3
 800aa5a:	898b      	ldrh	r3, [r1, #12]
 800aa5c:	061b      	lsls	r3, r3, #24
 800aa5e:	b09d      	sub	sp, #116	@ 0x74
 800aa60:	4607      	mov	r7, r0
 800aa62:	460d      	mov	r5, r1
 800aa64:	4614      	mov	r4, r2
 800aa66:	d510      	bpl.n	800aa8a <_svfiprintf_r+0x36>
 800aa68:	690b      	ldr	r3, [r1, #16]
 800aa6a:	b973      	cbnz	r3, 800aa8a <_svfiprintf_r+0x36>
 800aa6c:	2140      	movs	r1, #64	@ 0x40
 800aa6e:	f7fe fbdb 	bl	8009228 <_malloc_r>
 800aa72:	6028      	str	r0, [r5, #0]
 800aa74:	6128      	str	r0, [r5, #16]
 800aa76:	b930      	cbnz	r0, 800aa86 <_svfiprintf_r+0x32>
 800aa78:	230c      	movs	r3, #12
 800aa7a:	603b      	str	r3, [r7, #0]
 800aa7c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa80:	b01d      	add	sp, #116	@ 0x74
 800aa82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa86:	2340      	movs	r3, #64	@ 0x40
 800aa88:	616b      	str	r3, [r5, #20]
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa8e:	2320      	movs	r3, #32
 800aa90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa94:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa98:	2330      	movs	r3, #48	@ 0x30
 800aa9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ac38 <_svfiprintf_r+0x1e4>
 800aa9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aaa2:	f04f 0901 	mov.w	r9, #1
 800aaa6:	4623      	mov	r3, r4
 800aaa8:	469a      	mov	sl, r3
 800aaaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaae:	b10a      	cbz	r2, 800aab4 <_svfiprintf_r+0x60>
 800aab0:	2a25      	cmp	r2, #37	@ 0x25
 800aab2:	d1f9      	bne.n	800aaa8 <_svfiprintf_r+0x54>
 800aab4:	ebba 0b04 	subs.w	fp, sl, r4
 800aab8:	d00b      	beq.n	800aad2 <_svfiprintf_r+0x7e>
 800aaba:	465b      	mov	r3, fp
 800aabc:	4622      	mov	r2, r4
 800aabe:	4629      	mov	r1, r5
 800aac0:	4638      	mov	r0, r7
 800aac2:	f7ff ff6b 	bl	800a99c <__ssputs_r>
 800aac6:	3001      	adds	r0, #1
 800aac8:	f000 80a7 	beq.w	800ac1a <_svfiprintf_r+0x1c6>
 800aacc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aace:	445a      	add	r2, fp
 800aad0:	9209      	str	r2, [sp, #36]	@ 0x24
 800aad2:	f89a 3000 	ldrb.w	r3, [sl]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	f000 809f 	beq.w	800ac1a <_svfiprintf_r+0x1c6>
 800aadc:	2300      	movs	r3, #0
 800aade:	f04f 32ff 	mov.w	r2, #4294967295
 800aae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aae6:	f10a 0a01 	add.w	sl, sl, #1
 800aaea:	9304      	str	r3, [sp, #16]
 800aaec:	9307      	str	r3, [sp, #28]
 800aaee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aaf2:	931a      	str	r3, [sp, #104]	@ 0x68
 800aaf4:	4654      	mov	r4, sl
 800aaf6:	2205      	movs	r2, #5
 800aaf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aafc:	484e      	ldr	r0, [pc, #312]	@ (800ac38 <_svfiprintf_r+0x1e4>)
 800aafe:	f7f5 fb6f 	bl	80001e0 <memchr>
 800ab02:	9a04      	ldr	r2, [sp, #16]
 800ab04:	b9d8      	cbnz	r0, 800ab3e <_svfiprintf_r+0xea>
 800ab06:	06d0      	lsls	r0, r2, #27
 800ab08:	bf44      	itt	mi
 800ab0a:	2320      	movmi	r3, #32
 800ab0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab10:	0711      	lsls	r1, r2, #28
 800ab12:	bf44      	itt	mi
 800ab14:	232b      	movmi	r3, #43	@ 0x2b
 800ab16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab20:	d015      	beq.n	800ab4e <_svfiprintf_r+0xfa>
 800ab22:	9a07      	ldr	r2, [sp, #28]
 800ab24:	4654      	mov	r4, sl
 800ab26:	2000      	movs	r0, #0
 800ab28:	f04f 0c0a 	mov.w	ip, #10
 800ab2c:	4621      	mov	r1, r4
 800ab2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab32:	3b30      	subs	r3, #48	@ 0x30
 800ab34:	2b09      	cmp	r3, #9
 800ab36:	d94b      	bls.n	800abd0 <_svfiprintf_r+0x17c>
 800ab38:	b1b0      	cbz	r0, 800ab68 <_svfiprintf_r+0x114>
 800ab3a:	9207      	str	r2, [sp, #28]
 800ab3c:	e014      	b.n	800ab68 <_svfiprintf_r+0x114>
 800ab3e:	eba0 0308 	sub.w	r3, r0, r8
 800ab42:	fa09 f303 	lsl.w	r3, r9, r3
 800ab46:	4313      	orrs	r3, r2
 800ab48:	9304      	str	r3, [sp, #16]
 800ab4a:	46a2      	mov	sl, r4
 800ab4c:	e7d2      	b.n	800aaf4 <_svfiprintf_r+0xa0>
 800ab4e:	9b03      	ldr	r3, [sp, #12]
 800ab50:	1d19      	adds	r1, r3, #4
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	9103      	str	r1, [sp, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	bfbb      	ittet	lt
 800ab5a:	425b      	neglt	r3, r3
 800ab5c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab60:	9307      	strge	r3, [sp, #28]
 800ab62:	9307      	strlt	r3, [sp, #28]
 800ab64:	bfb8      	it	lt
 800ab66:	9204      	strlt	r2, [sp, #16]
 800ab68:	7823      	ldrb	r3, [r4, #0]
 800ab6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab6c:	d10a      	bne.n	800ab84 <_svfiprintf_r+0x130>
 800ab6e:	7863      	ldrb	r3, [r4, #1]
 800ab70:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab72:	d132      	bne.n	800abda <_svfiprintf_r+0x186>
 800ab74:	9b03      	ldr	r3, [sp, #12]
 800ab76:	1d1a      	adds	r2, r3, #4
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	9203      	str	r2, [sp, #12]
 800ab7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab80:	3402      	adds	r4, #2
 800ab82:	9305      	str	r3, [sp, #20]
 800ab84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ac48 <_svfiprintf_r+0x1f4>
 800ab88:	7821      	ldrb	r1, [r4, #0]
 800ab8a:	2203      	movs	r2, #3
 800ab8c:	4650      	mov	r0, sl
 800ab8e:	f7f5 fb27 	bl	80001e0 <memchr>
 800ab92:	b138      	cbz	r0, 800aba4 <_svfiprintf_r+0x150>
 800ab94:	9b04      	ldr	r3, [sp, #16]
 800ab96:	eba0 000a 	sub.w	r0, r0, sl
 800ab9a:	2240      	movs	r2, #64	@ 0x40
 800ab9c:	4082      	lsls	r2, r0
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	3401      	adds	r4, #1
 800aba2:	9304      	str	r3, [sp, #16]
 800aba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aba8:	4824      	ldr	r0, [pc, #144]	@ (800ac3c <_svfiprintf_r+0x1e8>)
 800abaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abae:	2206      	movs	r2, #6
 800abb0:	f7f5 fb16 	bl	80001e0 <memchr>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	d036      	beq.n	800ac26 <_svfiprintf_r+0x1d2>
 800abb8:	4b21      	ldr	r3, [pc, #132]	@ (800ac40 <_svfiprintf_r+0x1ec>)
 800abba:	bb1b      	cbnz	r3, 800ac04 <_svfiprintf_r+0x1b0>
 800abbc:	9b03      	ldr	r3, [sp, #12]
 800abbe:	3307      	adds	r3, #7
 800abc0:	f023 0307 	bic.w	r3, r3, #7
 800abc4:	3308      	adds	r3, #8
 800abc6:	9303      	str	r3, [sp, #12]
 800abc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abca:	4433      	add	r3, r6
 800abcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800abce:	e76a      	b.n	800aaa6 <_svfiprintf_r+0x52>
 800abd0:	fb0c 3202 	mla	r2, ip, r2, r3
 800abd4:	460c      	mov	r4, r1
 800abd6:	2001      	movs	r0, #1
 800abd8:	e7a8      	b.n	800ab2c <_svfiprintf_r+0xd8>
 800abda:	2300      	movs	r3, #0
 800abdc:	3401      	adds	r4, #1
 800abde:	9305      	str	r3, [sp, #20]
 800abe0:	4619      	mov	r1, r3
 800abe2:	f04f 0c0a 	mov.w	ip, #10
 800abe6:	4620      	mov	r0, r4
 800abe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abec:	3a30      	subs	r2, #48	@ 0x30
 800abee:	2a09      	cmp	r2, #9
 800abf0:	d903      	bls.n	800abfa <_svfiprintf_r+0x1a6>
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d0c6      	beq.n	800ab84 <_svfiprintf_r+0x130>
 800abf6:	9105      	str	r1, [sp, #20]
 800abf8:	e7c4      	b.n	800ab84 <_svfiprintf_r+0x130>
 800abfa:	fb0c 2101 	mla	r1, ip, r1, r2
 800abfe:	4604      	mov	r4, r0
 800ac00:	2301      	movs	r3, #1
 800ac02:	e7f0      	b.n	800abe6 <_svfiprintf_r+0x192>
 800ac04:	ab03      	add	r3, sp, #12
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	462a      	mov	r2, r5
 800ac0a:	4b0e      	ldr	r3, [pc, #56]	@ (800ac44 <_svfiprintf_r+0x1f0>)
 800ac0c:	a904      	add	r1, sp, #16
 800ac0e:	4638      	mov	r0, r7
 800ac10:	f7fc fc90 	bl	8007534 <_printf_float>
 800ac14:	1c42      	adds	r2, r0, #1
 800ac16:	4606      	mov	r6, r0
 800ac18:	d1d6      	bne.n	800abc8 <_svfiprintf_r+0x174>
 800ac1a:	89ab      	ldrh	r3, [r5, #12]
 800ac1c:	065b      	lsls	r3, r3, #25
 800ac1e:	f53f af2d 	bmi.w	800aa7c <_svfiprintf_r+0x28>
 800ac22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac24:	e72c      	b.n	800aa80 <_svfiprintf_r+0x2c>
 800ac26:	ab03      	add	r3, sp, #12
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	462a      	mov	r2, r5
 800ac2c:	4b05      	ldr	r3, [pc, #20]	@ (800ac44 <_svfiprintf_r+0x1f0>)
 800ac2e:	a904      	add	r1, sp, #16
 800ac30:	4638      	mov	r0, r7
 800ac32:	f7fc ff17 	bl	8007a64 <_printf_i>
 800ac36:	e7ed      	b.n	800ac14 <_svfiprintf_r+0x1c0>
 800ac38:	0800c2d5 	.word	0x0800c2d5
 800ac3c:	0800c2df 	.word	0x0800c2df
 800ac40:	08007535 	.word	0x08007535
 800ac44:	0800a99d 	.word	0x0800a99d
 800ac48:	0800c2db 	.word	0x0800c2db

0800ac4c <__sflush_r>:
 800ac4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac54:	0716      	lsls	r6, r2, #28
 800ac56:	4605      	mov	r5, r0
 800ac58:	460c      	mov	r4, r1
 800ac5a:	d454      	bmi.n	800ad06 <__sflush_r+0xba>
 800ac5c:	684b      	ldr	r3, [r1, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	dc02      	bgt.n	800ac68 <__sflush_r+0x1c>
 800ac62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	dd48      	ble.n	800acfa <__sflush_r+0xae>
 800ac68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac6a:	2e00      	cmp	r6, #0
 800ac6c:	d045      	beq.n	800acfa <__sflush_r+0xae>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac74:	682f      	ldr	r7, [r5, #0]
 800ac76:	6a21      	ldr	r1, [r4, #32]
 800ac78:	602b      	str	r3, [r5, #0]
 800ac7a:	d030      	beq.n	800acde <__sflush_r+0x92>
 800ac7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	0759      	lsls	r1, r3, #29
 800ac82:	d505      	bpl.n	800ac90 <__sflush_r+0x44>
 800ac84:	6863      	ldr	r3, [r4, #4]
 800ac86:	1ad2      	subs	r2, r2, r3
 800ac88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac8a:	b10b      	cbz	r3, 800ac90 <__sflush_r+0x44>
 800ac8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac8e:	1ad2      	subs	r2, r2, r3
 800ac90:	2300      	movs	r3, #0
 800ac92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac94:	6a21      	ldr	r1, [r4, #32]
 800ac96:	4628      	mov	r0, r5
 800ac98:	47b0      	blx	r6
 800ac9a:	1c43      	adds	r3, r0, #1
 800ac9c:	89a3      	ldrh	r3, [r4, #12]
 800ac9e:	d106      	bne.n	800acae <__sflush_r+0x62>
 800aca0:	6829      	ldr	r1, [r5, #0]
 800aca2:	291d      	cmp	r1, #29
 800aca4:	d82b      	bhi.n	800acfe <__sflush_r+0xb2>
 800aca6:	4a2a      	ldr	r2, [pc, #168]	@ (800ad50 <__sflush_r+0x104>)
 800aca8:	40ca      	lsrs	r2, r1
 800acaa:	07d6      	lsls	r6, r2, #31
 800acac:	d527      	bpl.n	800acfe <__sflush_r+0xb2>
 800acae:	2200      	movs	r2, #0
 800acb0:	6062      	str	r2, [r4, #4]
 800acb2:	04d9      	lsls	r1, r3, #19
 800acb4:	6922      	ldr	r2, [r4, #16]
 800acb6:	6022      	str	r2, [r4, #0]
 800acb8:	d504      	bpl.n	800acc4 <__sflush_r+0x78>
 800acba:	1c42      	adds	r2, r0, #1
 800acbc:	d101      	bne.n	800acc2 <__sflush_r+0x76>
 800acbe:	682b      	ldr	r3, [r5, #0]
 800acc0:	b903      	cbnz	r3, 800acc4 <__sflush_r+0x78>
 800acc2:	6560      	str	r0, [r4, #84]	@ 0x54
 800acc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acc6:	602f      	str	r7, [r5, #0]
 800acc8:	b1b9      	cbz	r1, 800acfa <__sflush_r+0xae>
 800acca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800acce:	4299      	cmp	r1, r3
 800acd0:	d002      	beq.n	800acd8 <__sflush_r+0x8c>
 800acd2:	4628      	mov	r0, r5
 800acd4:	f7fe fa34 	bl	8009140 <_free_r>
 800acd8:	2300      	movs	r3, #0
 800acda:	6363      	str	r3, [r4, #52]	@ 0x34
 800acdc:	e00d      	b.n	800acfa <__sflush_r+0xae>
 800acde:	2301      	movs	r3, #1
 800ace0:	4628      	mov	r0, r5
 800ace2:	47b0      	blx	r6
 800ace4:	4602      	mov	r2, r0
 800ace6:	1c50      	adds	r0, r2, #1
 800ace8:	d1c9      	bne.n	800ac7e <__sflush_r+0x32>
 800acea:	682b      	ldr	r3, [r5, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d0c6      	beq.n	800ac7e <__sflush_r+0x32>
 800acf0:	2b1d      	cmp	r3, #29
 800acf2:	d001      	beq.n	800acf8 <__sflush_r+0xac>
 800acf4:	2b16      	cmp	r3, #22
 800acf6:	d11e      	bne.n	800ad36 <__sflush_r+0xea>
 800acf8:	602f      	str	r7, [r5, #0]
 800acfa:	2000      	movs	r0, #0
 800acfc:	e022      	b.n	800ad44 <__sflush_r+0xf8>
 800acfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad02:	b21b      	sxth	r3, r3
 800ad04:	e01b      	b.n	800ad3e <__sflush_r+0xf2>
 800ad06:	690f      	ldr	r7, [r1, #16]
 800ad08:	2f00      	cmp	r7, #0
 800ad0a:	d0f6      	beq.n	800acfa <__sflush_r+0xae>
 800ad0c:	0793      	lsls	r3, r2, #30
 800ad0e:	680e      	ldr	r6, [r1, #0]
 800ad10:	bf08      	it	eq
 800ad12:	694b      	ldreq	r3, [r1, #20]
 800ad14:	600f      	str	r7, [r1, #0]
 800ad16:	bf18      	it	ne
 800ad18:	2300      	movne	r3, #0
 800ad1a:	eba6 0807 	sub.w	r8, r6, r7
 800ad1e:	608b      	str	r3, [r1, #8]
 800ad20:	f1b8 0f00 	cmp.w	r8, #0
 800ad24:	dde9      	ble.n	800acfa <__sflush_r+0xae>
 800ad26:	6a21      	ldr	r1, [r4, #32]
 800ad28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ad2a:	4643      	mov	r3, r8
 800ad2c:	463a      	mov	r2, r7
 800ad2e:	4628      	mov	r0, r5
 800ad30:	47b0      	blx	r6
 800ad32:	2800      	cmp	r0, #0
 800ad34:	dc08      	bgt.n	800ad48 <__sflush_r+0xfc>
 800ad36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad3e:	81a3      	strh	r3, [r4, #12]
 800ad40:	f04f 30ff 	mov.w	r0, #4294967295
 800ad44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad48:	4407      	add	r7, r0
 800ad4a:	eba8 0800 	sub.w	r8, r8, r0
 800ad4e:	e7e7      	b.n	800ad20 <__sflush_r+0xd4>
 800ad50:	20400001 	.word	0x20400001

0800ad54 <_fflush_r>:
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	690b      	ldr	r3, [r1, #16]
 800ad58:	4605      	mov	r5, r0
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	b913      	cbnz	r3, 800ad64 <_fflush_r+0x10>
 800ad5e:	2500      	movs	r5, #0
 800ad60:	4628      	mov	r0, r5
 800ad62:	bd38      	pop	{r3, r4, r5, pc}
 800ad64:	b118      	cbz	r0, 800ad6e <_fflush_r+0x1a>
 800ad66:	6a03      	ldr	r3, [r0, #32]
 800ad68:	b90b      	cbnz	r3, 800ad6e <_fflush_r+0x1a>
 800ad6a:	f7fd fa33 	bl	80081d4 <__sinit>
 800ad6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d0f3      	beq.n	800ad5e <_fflush_r+0xa>
 800ad76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad78:	07d0      	lsls	r0, r2, #31
 800ad7a:	d404      	bmi.n	800ad86 <_fflush_r+0x32>
 800ad7c:	0599      	lsls	r1, r3, #22
 800ad7e:	d402      	bmi.n	800ad86 <_fflush_r+0x32>
 800ad80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad82:	f7fd fb7c 	bl	800847e <__retarget_lock_acquire_recursive>
 800ad86:	4628      	mov	r0, r5
 800ad88:	4621      	mov	r1, r4
 800ad8a:	f7ff ff5f 	bl	800ac4c <__sflush_r>
 800ad8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad90:	07da      	lsls	r2, r3, #31
 800ad92:	4605      	mov	r5, r0
 800ad94:	d4e4      	bmi.n	800ad60 <_fflush_r+0xc>
 800ad96:	89a3      	ldrh	r3, [r4, #12]
 800ad98:	059b      	lsls	r3, r3, #22
 800ad9a:	d4e1      	bmi.n	800ad60 <_fflush_r+0xc>
 800ad9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad9e:	f7fd fb6f 	bl	8008480 <__retarget_lock_release_recursive>
 800ada2:	e7dd      	b.n	800ad60 <_fflush_r+0xc>

0800ada4 <memmove>:
 800ada4:	4288      	cmp	r0, r1
 800ada6:	b510      	push	{r4, lr}
 800ada8:	eb01 0402 	add.w	r4, r1, r2
 800adac:	d902      	bls.n	800adb4 <memmove+0x10>
 800adae:	4284      	cmp	r4, r0
 800adb0:	4623      	mov	r3, r4
 800adb2:	d807      	bhi.n	800adc4 <memmove+0x20>
 800adb4:	1e43      	subs	r3, r0, #1
 800adb6:	42a1      	cmp	r1, r4
 800adb8:	d008      	beq.n	800adcc <memmove+0x28>
 800adba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adc2:	e7f8      	b.n	800adb6 <memmove+0x12>
 800adc4:	4402      	add	r2, r0
 800adc6:	4601      	mov	r1, r0
 800adc8:	428a      	cmp	r2, r1
 800adca:	d100      	bne.n	800adce <memmove+0x2a>
 800adcc:	bd10      	pop	{r4, pc}
 800adce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800add2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800add6:	e7f7      	b.n	800adc8 <memmove+0x24>

0800add8 <strncmp>:
 800add8:	b510      	push	{r4, lr}
 800adda:	b16a      	cbz	r2, 800adf8 <strncmp+0x20>
 800addc:	3901      	subs	r1, #1
 800adde:	1884      	adds	r4, r0, r2
 800ade0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ade4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ade8:	429a      	cmp	r2, r3
 800adea:	d103      	bne.n	800adf4 <strncmp+0x1c>
 800adec:	42a0      	cmp	r0, r4
 800adee:	d001      	beq.n	800adf4 <strncmp+0x1c>
 800adf0:	2a00      	cmp	r2, #0
 800adf2:	d1f5      	bne.n	800ade0 <strncmp+0x8>
 800adf4:	1ad0      	subs	r0, r2, r3
 800adf6:	bd10      	pop	{r4, pc}
 800adf8:	4610      	mov	r0, r2
 800adfa:	e7fc      	b.n	800adf6 <strncmp+0x1e>

0800adfc <_sbrk_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	4d06      	ldr	r5, [pc, #24]	@ (800ae18 <_sbrk_r+0x1c>)
 800ae00:	2300      	movs	r3, #0
 800ae02:	4604      	mov	r4, r0
 800ae04:	4608      	mov	r0, r1
 800ae06:	602b      	str	r3, [r5, #0]
 800ae08:	f7f6 fcd6 	bl	80017b8 <_sbrk>
 800ae0c:	1c43      	adds	r3, r0, #1
 800ae0e:	d102      	bne.n	800ae16 <_sbrk_r+0x1a>
 800ae10:	682b      	ldr	r3, [r5, #0]
 800ae12:	b103      	cbz	r3, 800ae16 <_sbrk_r+0x1a>
 800ae14:	6023      	str	r3, [r4, #0]
 800ae16:	bd38      	pop	{r3, r4, r5, pc}
 800ae18:	20000734 	.word	0x20000734

0800ae1c <memcpy>:
 800ae1c:	440a      	add	r2, r1
 800ae1e:	4291      	cmp	r1, r2
 800ae20:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae24:	d100      	bne.n	800ae28 <memcpy+0xc>
 800ae26:	4770      	bx	lr
 800ae28:	b510      	push	{r4, lr}
 800ae2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae32:	4291      	cmp	r1, r2
 800ae34:	d1f9      	bne.n	800ae2a <memcpy+0xe>
 800ae36:	bd10      	pop	{r4, pc}

0800ae38 <nan>:
 800ae38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ae40 <nan+0x8>
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	00000000 	.word	0x00000000
 800ae44:	7ff80000 	.word	0x7ff80000

0800ae48 <__assert_func>:
 800ae48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae4a:	4614      	mov	r4, r2
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	4b09      	ldr	r3, [pc, #36]	@ (800ae74 <__assert_func+0x2c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4605      	mov	r5, r0
 800ae54:	68d8      	ldr	r0, [r3, #12]
 800ae56:	b14c      	cbz	r4, 800ae6c <__assert_func+0x24>
 800ae58:	4b07      	ldr	r3, [pc, #28]	@ (800ae78 <__assert_func+0x30>)
 800ae5a:	9100      	str	r1, [sp, #0]
 800ae5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae60:	4906      	ldr	r1, [pc, #24]	@ (800ae7c <__assert_func+0x34>)
 800ae62:	462b      	mov	r3, r5
 800ae64:	f000 fba8 	bl	800b5b8 <fiprintf>
 800ae68:	f000 fbb8 	bl	800b5dc <abort>
 800ae6c:	4b04      	ldr	r3, [pc, #16]	@ (800ae80 <__assert_func+0x38>)
 800ae6e:	461c      	mov	r4, r3
 800ae70:	e7f3      	b.n	800ae5a <__assert_func+0x12>
 800ae72:	bf00      	nop
 800ae74:	20000030 	.word	0x20000030
 800ae78:	0800c2ee 	.word	0x0800c2ee
 800ae7c:	0800c2fb 	.word	0x0800c2fb
 800ae80:	0800c329 	.word	0x0800c329

0800ae84 <_calloc_r>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	fba1 5402 	umull	r5, r4, r1, r2
 800ae8a:	b934      	cbnz	r4, 800ae9a <_calloc_r+0x16>
 800ae8c:	4629      	mov	r1, r5
 800ae8e:	f7fe f9cb 	bl	8009228 <_malloc_r>
 800ae92:	4606      	mov	r6, r0
 800ae94:	b928      	cbnz	r0, 800aea2 <_calloc_r+0x1e>
 800ae96:	4630      	mov	r0, r6
 800ae98:	bd70      	pop	{r4, r5, r6, pc}
 800ae9a:	220c      	movs	r2, #12
 800ae9c:	6002      	str	r2, [r0, #0]
 800ae9e:	2600      	movs	r6, #0
 800aea0:	e7f9      	b.n	800ae96 <_calloc_r+0x12>
 800aea2:	462a      	mov	r2, r5
 800aea4:	4621      	mov	r1, r4
 800aea6:	f7fd fa6d 	bl	8008384 <memset>
 800aeaa:	e7f4      	b.n	800ae96 <_calloc_r+0x12>

0800aeac <rshift>:
 800aeac:	6903      	ldr	r3, [r0, #16]
 800aeae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aeb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aeb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aeba:	f100 0414 	add.w	r4, r0, #20
 800aebe:	dd45      	ble.n	800af4c <rshift+0xa0>
 800aec0:	f011 011f 	ands.w	r1, r1, #31
 800aec4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aec8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aecc:	d10c      	bne.n	800aee8 <rshift+0x3c>
 800aece:	f100 0710 	add.w	r7, r0, #16
 800aed2:	4629      	mov	r1, r5
 800aed4:	42b1      	cmp	r1, r6
 800aed6:	d334      	bcc.n	800af42 <rshift+0x96>
 800aed8:	1a9b      	subs	r3, r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	1eea      	subs	r2, r5, #3
 800aede:	4296      	cmp	r6, r2
 800aee0:	bf38      	it	cc
 800aee2:	2300      	movcc	r3, #0
 800aee4:	4423      	add	r3, r4
 800aee6:	e015      	b.n	800af14 <rshift+0x68>
 800aee8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aeec:	f1c1 0820 	rsb	r8, r1, #32
 800aef0:	40cf      	lsrs	r7, r1
 800aef2:	f105 0e04 	add.w	lr, r5, #4
 800aef6:	46a1      	mov	r9, r4
 800aef8:	4576      	cmp	r6, lr
 800aefa:	46f4      	mov	ip, lr
 800aefc:	d815      	bhi.n	800af2a <rshift+0x7e>
 800aefe:	1a9a      	subs	r2, r3, r2
 800af00:	0092      	lsls	r2, r2, #2
 800af02:	3a04      	subs	r2, #4
 800af04:	3501      	adds	r5, #1
 800af06:	42ae      	cmp	r6, r5
 800af08:	bf38      	it	cc
 800af0a:	2200      	movcc	r2, #0
 800af0c:	18a3      	adds	r3, r4, r2
 800af0e:	50a7      	str	r7, [r4, r2]
 800af10:	b107      	cbz	r7, 800af14 <rshift+0x68>
 800af12:	3304      	adds	r3, #4
 800af14:	1b1a      	subs	r2, r3, r4
 800af16:	42a3      	cmp	r3, r4
 800af18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af1c:	bf08      	it	eq
 800af1e:	2300      	moveq	r3, #0
 800af20:	6102      	str	r2, [r0, #16]
 800af22:	bf08      	it	eq
 800af24:	6143      	streq	r3, [r0, #20]
 800af26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af2a:	f8dc c000 	ldr.w	ip, [ip]
 800af2e:	fa0c fc08 	lsl.w	ip, ip, r8
 800af32:	ea4c 0707 	orr.w	r7, ip, r7
 800af36:	f849 7b04 	str.w	r7, [r9], #4
 800af3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af3e:	40cf      	lsrs	r7, r1
 800af40:	e7da      	b.n	800aef8 <rshift+0x4c>
 800af42:	f851 cb04 	ldr.w	ip, [r1], #4
 800af46:	f847 cf04 	str.w	ip, [r7, #4]!
 800af4a:	e7c3      	b.n	800aed4 <rshift+0x28>
 800af4c:	4623      	mov	r3, r4
 800af4e:	e7e1      	b.n	800af14 <rshift+0x68>

0800af50 <__hexdig_fun>:
 800af50:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800af54:	2b09      	cmp	r3, #9
 800af56:	d802      	bhi.n	800af5e <__hexdig_fun+0xe>
 800af58:	3820      	subs	r0, #32
 800af5a:	b2c0      	uxtb	r0, r0
 800af5c:	4770      	bx	lr
 800af5e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800af62:	2b05      	cmp	r3, #5
 800af64:	d801      	bhi.n	800af6a <__hexdig_fun+0x1a>
 800af66:	3847      	subs	r0, #71	@ 0x47
 800af68:	e7f7      	b.n	800af5a <__hexdig_fun+0xa>
 800af6a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800af6e:	2b05      	cmp	r3, #5
 800af70:	d801      	bhi.n	800af76 <__hexdig_fun+0x26>
 800af72:	3827      	subs	r0, #39	@ 0x27
 800af74:	e7f1      	b.n	800af5a <__hexdig_fun+0xa>
 800af76:	2000      	movs	r0, #0
 800af78:	4770      	bx	lr
	...

0800af7c <__gethex>:
 800af7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af80:	b085      	sub	sp, #20
 800af82:	468a      	mov	sl, r1
 800af84:	9302      	str	r3, [sp, #8]
 800af86:	680b      	ldr	r3, [r1, #0]
 800af88:	9001      	str	r0, [sp, #4]
 800af8a:	4690      	mov	r8, r2
 800af8c:	1c9c      	adds	r4, r3, #2
 800af8e:	46a1      	mov	r9, r4
 800af90:	f814 0b01 	ldrb.w	r0, [r4], #1
 800af94:	2830      	cmp	r0, #48	@ 0x30
 800af96:	d0fa      	beq.n	800af8e <__gethex+0x12>
 800af98:	eba9 0303 	sub.w	r3, r9, r3
 800af9c:	f1a3 0b02 	sub.w	fp, r3, #2
 800afa0:	f7ff ffd6 	bl	800af50 <__hexdig_fun>
 800afa4:	4605      	mov	r5, r0
 800afa6:	2800      	cmp	r0, #0
 800afa8:	d168      	bne.n	800b07c <__gethex+0x100>
 800afaa:	49a0      	ldr	r1, [pc, #640]	@ (800b22c <__gethex+0x2b0>)
 800afac:	2201      	movs	r2, #1
 800afae:	4648      	mov	r0, r9
 800afb0:	f7ff ff12 	bl	800add8 <strncmp>
 800afb4:	4607      	mov	r7, r0
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d167      	bne.n	800b08a <__gethex+0x10e>
 800afba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800afbe:	4626      	mov	r6, r4
 800afc0:	f7ff ffc6 	bl	800af50 <__hexdig_fun>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d062      	beq.n	800b08e <__gethex+0x112>
 800afc8:	4623      	mov	r3, r4
 800afca:	7818      	ldrb	r0, [r3, #0]
 800afcc:	2830      	cmp	r0, #48	@ 0x30
 800afce:	4699      	mov	r9, r3
 800afd0:	f103 0301 	add.w	r3, r3, #1
 800afd4:	d0f9      	beq.n	800afca <__gethex+0x4e>
 800afd6:	f7ff ffbb 	bl	800af50 <__hexdig_fun>
 800afda:	fab0 f580 	clz	r5, r0
 800afde:	096d      	lsrs	r5, r5, #5
 800afe0:	f04f 0b01 	mov.w	fp, #1
 800afe4:	464a      	mov	r2, r9
 800afe6:	4616      	mov	r6, r2
 800afe8:	3201      	adds	r2, #1
 800afea:	7830      	ldrb	r0, [r6, #0]
 800afec:	f7ff ffb0 	bl	800af50 <__hexdig_fun>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d1f8      	bne.n	800afe6 <__gethex+0x6a>
 800aff4:	498d      	ldr	r1, [pc, #564]	@ (800b22c <__gethex+0x2b0>)
 800aff6:	2201      	movs	r2, #1
 800aff8:	4630      	mov	r0, r6
 800affa:	f7ff feed 	bl	800add8 <strncmp>
 800affe:	2800      	cmp	r0, #0
 800b000:	d13f      	bne.n	800b082 <__gethex+0x106>
 800b002:	b944      	cbnz	r4, 800b016 <__gethex+0x9a>
 800b004:	1c74      	adds	r4, r6, #1
 800b006:	4622      	mov	r2, r4
 800b008:	4616      	mov	r6, r2
 800b00a:	3201      	adds	r2, #1
 800b00c:	7830      	ldrb	r0, [r6, #0]
 800b00e:	f7ff ff9f 	bl	800af50 <__hexdig_fun>
 800b012:	2800      	cmp	r0, #0
 800b014:	d1f8      	bne.n	800b008 <__gethex+0x8c>
 800b016:	1ba4      	subs	r4, r4, r6
 800b018:	00a7      	lsls	r7, r4, #2
 800b01a:	7833      	ldrb	r3, [r6, #0]
 800b01c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b020:	2b50      	cmp	r3, #80	@ 0x50
 800b022:	d13e      	bne.n	800b0a2 <__gethex+0x126>
 800b024:	7873      	ldrb	r3, [r6, #1]
 800b026:	2b2b      	cmp	r3, #43	@ 0x2b
 800b028:	d033      	beq.n	800b092 <__gethex+0x116>
 800b02a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b02c:	d034      	beq.n	800b098 <__gethex+0x11c>
 800b02e:	1c71      	adds	r1, r6, #1
 800b030:	2400      	movs	r4, #0
 800b032:	7808      	ldrb	r0, [r1, #0]
 800b034:	f7ff ff8c 	bl	800af50 <__hexdig_fun>
 800b038:	1e43      	subs	r3, r0, #1
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b18      	cmp	r3, #24
 800b03e:	d830      	bhi.n	800b0a2 <__gethex+0x126>
 800b040:	f1a0 0210 	sub.w	r2, r0, #16
 800b044:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b048:	f7ff ff82 	bl	800af50 <__hexdig_fun>
 800b04c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b050:	fa5f fc8c 	uxtb.w	ip, ip
 800b054:	f1bc 0f18 	cmp.w	ip, #24
 800b058:	f04f 030a 	mov.w	r3, #10
 800b05c:	d91e      	bls.n	800b09c <__gethex+0x120>
 800b05e:	b104      	cbz	r4, 800b062 <__gethex+0xe6>
 800b060:	4252      	negs	r2, r2
 800b062:	4417      	add	r7, r2
 800b064:	f8ca 1000 	str.w	r1, [sl]
 800b068:	b1ed      	cbz	r5, 800b0a6 <__gethex+0x12a>
 800b06a:	f1bb 0f00 	cmp.w	fp, #0
 800b06e:	bf0c      	ite	eq
 800b070:	2506      	moveq	r5, #6
 800b072:	2500      	movne	r5, #0
 800b074:	4628      	mov	r0, r5
 800b076:	b005      	add	sp, #20
 800b078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b07c:	2500      	movs	r5, #0
 800b07e:	462c      	mov	r4, r5
 800b080:	e7b0      	b.n	800afe4 <__gethex+0x68>
 800b082:	2c00      	cmp	r4, #0
 800b084:	d1c7      	bne.n	800b016 <__gethex+0x9a>
 800b086:	4627      	mov	r7, r4
 800b088:	e7c7      	b.n	800b01a <__gethex+0x9e>
 800b08a:	464e      	mov	r6, r9
 800b08c:	462f      	mov	r7, r5
 800b08e:	2501      	movs	r5, #1
 800b090:	e7c3      	b.n	800b01a <__gethex+0x9e>
 800b092:	2400      	movs	r4, #0
 800b094:	1cb1      	adds	r1, r6, #2
 800b096:	e7cc      	b.n	800b032 <__gethex+0xb6>
 800b098:	2401      	movs	r4, #1
 800b09a:	e7fb      	b.n	800b094 <__gethex+0x118>
 800b09c:	fb03 0002 	mla	r0, r3, r2, r0
 800b0a0:	e7ce      	b.n	800b040 <__gethex+0xc4>
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	e7de      	b.n	800b064 <__gethex+0xe8>
 800b0a6:	eba6 0309 	sub.w	r3, r6, r9
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	4629      	mov	r1, r5
 800b0ae:	2b07      	cmp	r3, #7
 800b0b0:	dc0a      	bgt.n	800b0c8 <__gethex+0x14c>
 800b0b2:	9801      	ldr	r0, [sp, #4]
 800b0b4:	f7fe f944 	bl	8009340 <_Balloc>
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	b940      	cbnz	r0, 800b0ce <__gethex+0x152>
 800b0bc:	4b5c      	ldr	r3, [pc, #368]	@ (800b230 <__gethex+0x2b4>)
 800b0be:	4602      	mov	r2, r0
 800b0c0:	21e4      	movs	r1, #228	@ 0xe4
 800b0c2:	485c      	ldr	r0, [pc, #368]	@ (800b234 <__gethex+0x2b8>)
 800b0c4:	f7ff fec0 	bl	800ae48 <__assert_func>
 800b0c8:	3101      	adds	r1, #1
 800b0ca:	105b      	asrs	r3, r3, #1
 800b0cc:	e7ef      	b.n	800b0ae <__gethex+0x132>
 800b0ce:	f100 0a14 	add.w	sl, r0, #20
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	4655      	mov	r5, sl
 800b0d6:	469b      	mov	fp, r3
 800b0d8:	45b1      	cmp	r9, r6
 800b0da:	d337      	bcc.n	800b14c <__gethex+0x1d0>
 800b0dc:	f845 bb04 	str.w	fp, [r5], #4
 800b0e0:	eba5 050a 	sub.w	r5, r5, sl
 800b0e4:	10ad      	asrs	r5, r5, #2
 800b0e6:	6125      	str	r5, [r4, #16]
 800b0e8:	4658      	mov	r0, fp
 800b0ea:	f7fe fa1b 	bl	8009524 <__hi0bits>
 800b0ee:	016d      	lsls	r5, r5, #5
 800b0f0:	f8d8 6000 	ldr.w	r6, [r8]
 800b0f4:	1a2d      	subs	r5, r5, r0
 800b0f6:	42b5      	cmp	r5, r6
 800b0f8:	dd54      	ble.n	800b1a4 <__gethex+0x228>
 800b0fa:	1bad      	subs	r5, r5, r6
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4620      	mov	r0, r4
 800b100:	f7fe fda7 	bl	8009c52 <__any_on>
 800b104:	4681      	mov	r9, r0
 800b106:	b178      	cbz	r0, 800b128 <__gethex+0x1ac>
 800b108:	1e6b      	subs	r3, r5, #1
 800b10a:	1159      	asrs	r1, r3, #5
 800b10c:	f003 021f 	and.w	r2, r3, #31
 800b110:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b114:	f04f 0901 	mov.w	r9, #1
 800b118:	fa09 f202 	lsl.w	r2, r9, r2
 800b11c:	420a      	tst	r2, r1
 800b11e:	d003      	beq.n	800b128 <__gethex+0x1ac>
 800b120:	454b      	cmp	r3, r9
 800b122:	dc36      	bgt.n	800b192 <__gethex+0x216>
 800b124:	f04f 0902 	mov.w	r9, #2
 800b128:	4629      	mov	r1, r5
 800b12a:	4620      	mov	r0, r4
 800b12c:	f7ff febe 	bl	800aeac <rshift>
 800b130:	442f      	add	r7, r5
 800b132:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b136:	42bb      	cmp	r3, r7
 800b138:	da42      	bge.n	800b1c0 <__gethex+0x244>
 800b13a:	9801      	ldr	r0, [sp, #4]
 800b13c:	4621      	mov	r1, r4
 800b13e:	f7fe f93f 	bl	80093c0 <_Bfree>
 800b142:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b144:	2300      	movs	r3, #0
 800b146:	6013      	str	r3, [r2, #0]
 800b148:	25a3      	movs	r5, #163	@ 0xa3
 800b14a:	e793      	b.n	800b074 <__gethex+0xf8>
 800b14c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b150:	2a2e      	cmp	r2, #46	@ 0x2e
 800b152:	d012      	beq.n	800b17a <__gethex+0x1fe>
 800b154:	2b20      	cmp	r3, #32
 800b156:	d104      	bne.n	800b162 <__gethex+0x1e6>
 800b158:	f845 bb04 	str.w	fp, [r5], #4
 800b15c:	f04f 0b00 	mov.w	fp, #0
 800b160:	465b      	mov	r3, fp
 800b162:	7830      	ldrb	r0, [r6, #0]
 800b164:	9303      	str	r3, [sp, #12]
 800b166:	f7ff fef3 	bl	800af50 <__hexdig_fun>
 800b16a:	9b03      	ldr	r3, [sp, #12]
 800b16c:	f000 000f 	and.w	r0, r0, #15
 800b170:	4098      	lsls	r0, r3
 800b172:	ea4b 0b00 	orr.w	fp, fp, r0
 800b176:	3304      	adds	r3, #4
 800b178:	e7ae      	b.n	800b0d8 <__gethex+0x15c>
 800b17a:	45b1      	cmp	r9, r6
 800b17c:	d8ea      	bhi.n	800b154 <__gethex+0x1d8>
 800b17e:	492b      	ldr	r1, [pc, #172]	@ (800b22c <__gethex+0x2b0>)
 800b180:	9303      	str	r3, [sp, #12]
 800b182:	2201      	movs	r2, #1
 800b184:	4630      	mov	r0, r6
 800b186:	f7ff fe27 	bl	800add8 <strncmp>
 800b18a:	9b03      	ldr	r3, [sp, #12]
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d1e1      	bne.n	800b154 <__gethex+0x1d8>
 800b190:	e7a2      	b.n	800b0d8 <__gethex+0x15c>
 800b192:	1ea9      	subs	r1, r5, #2
 800b194:	4620      	mov	r0, r4
 800b196:	f7fe fd5c 	bl	8009c52 <__any_on>
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d0c2      	beq.n	800b124 <__gethex+0x1a8>
 800b19e:	f04f 0903 	mov.w	r9, #3
 800b1a2:	e7c1      	b.n	800b128 <__gethex+0x1ac>
 800b1a4:	da09      	bge.n	800b1ba <__gethex+0x23e>
 800b1a6:	1b75      	subs	r5, r6, r5
 800b1a8:	4621      	mov	r1, r4
 800b1aa:	9801      	ldr	r0, [sp, #4]
 800b1ac:	462a      	mov	r2, r5
 800b1ae:	f7fe fb17 	bl	80097e0 <__lshift>
 800b1b2:	1b7f      	subs	r7, r7, r5
 800b1b4:	4604      	mov	r4, r0
 800b1b6:	f100 0a14 	add.w	sl, r0, #20
 800b1ba:	f04f 0900 	mov.w	r9, #0
 800b1be:	e7b8      	b.n	800b132 <__gethex+0x1b6>
 800b1c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b1c4:	42bd      	cmp	r5, r7
 800b1c6:	dd6f      	ble.n	800b2a8 <__gethex+0x32c>
 800b1c8:	1bed      	subs	r5, r5, r7
 800b1ca:	42ae      	cmp	r6, r5
 800b1cc:	dc34      	bgt.n	800b238 <__gethex+0x2bc>
 800b1ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1d2:	2b02      	cmp	r3, #2
 800b1d4:	d022      	beq.n	800b21c <__gethex+0x2a0>
 800b1d6:	2b03      	cmp	r3, #3
 800b1d8:	d024      	beq.n	800b224 <__gethex+0x2a8>
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d115      	bne.n	800b20a <__gethex+0x28e>
 800b1de:	42ae      	cmp	r6, r5
 800b1e0:	d113      	bne.n	800b20a <__gethex+0x28e>
 800b1e2:	2e01      	cmp	r6, #1
 800b1e4:	d10b      	bne.n	800b1fe <__gethex+0x282>
 800b1e6:	9a02      	ldr	r2, [sp, #8]
 800b1e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1ec:	6013      	str	r3, [r2, #0]
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	6123      	str	r3, [r4, #16]
 800b1f2:	f8ca 3000 	str.w	r3, [sl]
 800b1f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1f8:	2562      	movs	r5, #98	@ 0x62
 800b1fa:	601c      	str	r4, [r3, #0]
 800b1fc:	e73a      	b.n	800b074 <__gethex+0xf8>
 800b1fe:	1e71      	subs	r1, r6, #1
 800b200:	4620      	mov	r0, r4
 800b202:	f7fe fd26 	bl	8009c52 <__any_on>
 800b206:	2800      	cmp	r0, #0
 800b208:	d1ed      	bne.n	800b1e6 <__gethex+0x26a>
 800b20a:	9801      	ldr	r0, [sp, #4]
 800b20c:	4621      	mov	r1, r4
 800b20e:	f7fe f8d7 	bl	80093c0 <_Bfree>
 800b212:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b214:	2300      	movs	r3, #0
 800b216:	6013      	str	r3, [r2, #0]
 800b218:	2550      	movs	r5, #80	@ 0x50
 800b21a:	e72b      	b.n	800b074 <__gethex+0xf8>
 800b21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1f3      	bne.n	800b20a <__gethex+0x28e>
 800b222:	e7e0      	b.n	800b1e6 <__gethex+0x26a>
 800b224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b226:	2b00      	cmp	r3, #0
 800b228:	d1dd      	bne.n	800b1e6 <__gethex+0x26a>
 800b22a:	e7ee      	b.n	800b20a <__gethex+0x28e>
 800b22c:	0800c2d3 	.word	0x0800c2d3
 800b230:	0800c269 	.word	0x0800c269
 800b234:	0800c32a 	.word	0x0800c32a
 800b238:	1e6f      	subs	r7, r5, #1
 800b23a:	f1b9 0f00 	cmp.w	r9, #0
 800b23e:	d130      	bne.n	800b2a2 <__gethex+0x326>
 800b240:	b127      	cbz	r7, 800b24c <__gethex+0x2d0>
 800b242:	4639      	mov	r1, r7
 800b244:	4620      	mov	r0, r4
 800b246:	f7fe fd04 	bl	8009c52 <__any_on>
 800b24a:	4681      	mov	r9, r0
 800b24c:	117a      	asrs	r2, r7, #5
 800b24e:	2301      	movs	r3, #1
 800b250:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b254:	f007 071f 	and.w	r7, r7, #31
 800b258:	40bb      	lsls	r3, r7
 800b25a:	4213      	tst	r3, r2
 800b25c:	4629      	mov	r1, r5
 800b25e:	4620      	mov	r0, r4
 800b260:	bf18      	it	ne
 800b262:	f049 0902 	orrne.w	r9, r9, #2
 800b266:	f7ff fe21 	bl	800aeac <rshift>
 800b26a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b26e:	1b76      	subs	r6, r6, r5
 800b270:	2502      	movs	r5, #2
 800b272:	f1b9 0f00 	cmp.w	r9, #0
 800b276:	d047      	beq.n	800b308 <__gethex+0x38c>
 800b278:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d015      	beq.n	800b2ac <__gethex+0x330>
 800b280:	2b03      	cmp	r3, #3
 800b282:	d017      	beq.n	800b2b4 <__gethex+0x338>
 800b284:	2b01      	cmp	r3, #1
 800b286:	d109      	bne.n	800b29c <__gethex+0x320>
 800b288:	f019 0f02 	tst.w	r9, #2
 800b28c:	d006      	beq.n	800b29c <__gethex+0x320>
 800b28e:	f8da 3000 	ldr.w	r3, [sl]
 800b292:	ea49 0903 	orr.w	r9, r9, r3
 800b296:	f019 0f01 	tst.w	r9, #1
 800b29a:	d10e      	bne.n	800b2ba <__gethex+0x33e>
 800b29c:	f045 0510 	orr.w	r5, r5, #16
 800b2a0:	e032      	b.n	800b308 <__gethex+0x38c>
 800b2a2:	f04f 0901 	mov.w	r9, #1
 800b2a6:	e7d1      	b.n	800b24c <__gethex+0x2d0>
 800b2a8:	2501      	movs	r5, #1
 800b2aa:	e7e2      	b.n	800b272 <__gethex+0x2f6>
 800b2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2ae:	f1c3 0301 	rsb	r3, r3, #1
 800b2b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d0f0      	beq.n	800b29c <__gethex+0x320>
 800b2ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2be:	f104 0314 	add.w	r3, r4, #20
 800b2c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2ca:	f04f 0c00 	mov.w	ip, #0
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b2d8:	d01b      	beq.n	800b312 <__gethex+0x396>
 800b2da:	3201      	adds	r2, #1
 800b2dc:	6002      	str	r2, [r0, #0]
 800b2de:	2d02      	cmp	r5, #2
 800b2e0:	f104 0314 	add.w	r3, r4, #20
 800b2e4:	d13c      	bne.n	800b360 <__gethex+0x3e4>
 800b2e6:	f8d8 2000 	ldr.w	r2, [r8]
 800b2ea:	3a01      	subs	r2, #1
 800b2ec:	42b2      	cmp	r2, r6
 800b2ee:	d109      	bne.n	800b304 <__gethex+0x388>
 800b2f0:	1171      	asrs	r1, r6, #5
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b2f8:	f006 061f 	and.w	r6, r6, #31
 800b2fc:	fa02 f606 	lsl.w	r6, r2, r6
 800b300:	421e      	tst	r6, r3
 800b302:	d13a      	bne.n	800b37a <__gethex+0x3fe>
 800b304:	f045 0520 	orr.w	r5, r5, #32
 800b308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b30a:	601c      	str	r4, [r3, #0]
 800b30c:	9b02      	ldr	r3, [sp, #8]
 800b30e:	601f      	str	r7, [r3, #0]
 800b310:	e6b0      	b.n	800b074 <__gethex+0xf8>
 800b312:	4299      	cmp	r1, r3
 800b314:	f843 cc04 	str.w	ip, [r3, #-4]
 800b318:	d8d9      	bhi.n	800b2ce <__gethex+0x352>
 800b31a:	68a3      	ldr	r3, [r4, #8]
 800b31c:	459b      	cmp	fp, r3
 800b31e:	db17      	blt.n	800b350 <__gethex+0x3d4>
 800b320:	6861      	ldr	r1, [r4, #4]
 800b322:	9801      	ldr	r0, [sp, #4]
 800b324:	3101      	adds	r1, #1
 800b326:	f7fe f80b 	bl	8009340 <_Balloc>
 800b32a:	4681      	mov	r9, r0
 800b32c:	b918      	cbnz	r0, 800b336 <__gethex+0x3ba>
 800b32e:	4b1a      	ldr	r3, [pc, #104]	@ (800b398 <__gethex+0x41c>)
 800b330:	4602      	mov	r2, r0
 800b332:	2184      	movs	r1, #132	@ 0x84
 800b334:	e6c5      	b.n	800b0c2 <__gethex+0x146>
 800b336:	6922      	ldr	r2, [r4, #16]
 800b338:	3202      	adds	r2, #2
 800b33a:	f104 010c 	add.w	r1, r4, #12
 800b33e:	0092      	lsls	r2, r2, #2
 800b340:	300c      	adds	r0, #12
 800b342:	f7ff fd6b 	bl	800ae1c <memcpy>
 800b346:	4621      	mov	r1, r4
 800b348:	9801      	ldr	r0, [sp, #4]
 800b34a:	f7fe f839 	bl	80093c0 <_Bfree>
 800b34e:	464c      	mov	r4, r9
 800b350:	6923      	ldr	r3, [r4, #16]
 800b352:	1c5a      	adds	r2, r3, #1
 800b354:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b358:	6122      	str	r2, [r4, #16]
 800b35a:	2201      	movs	r2, #1
 800b35c:	615a      	str	r2, [r3, #20]
 800b35e:	e7be      	b.n	800b2de <__gethex+0x362>
 800b360:	6922      	ldr	r2, [r4, #16]
 800b362:	455a      	cmp	r2, fp
 800b364:	dd0b      	ble.n	800b37e <__gethex+0x402>
 800b366:	2101      	movs	r1, #1
 800b368:	4620      	mov	r0, r4
 800b36a:	f7ff fd9f 	bl	800aeac <rshift>
 800b36e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b372:	3701      	adds	r7, #1
 800b374:	42bb      	cmp	r3, r7
 800b376:	f6ff aee0 	blt.w	800b13a <__gethex+0x1be>
 800b37a:	2501      	movs	r5, #1
 800b37c:	e7c2      	b.n	800b304 <__gethex+0x388>
 800b37e:	f016 061f 	ands.w	r6, r6, #31
 800b382:	d0fa      	beq.n	800b37a <__gethex+0x3fe>
 800b384:	4453      	add	r3, sl
 800b386:	f1c6 0620 	rsb	r6, r6, #32
 800b38a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b38e:	f7fe f8c9 	bl	8009524 <__hi0bits>
 800b392:	42b0      	cmp	r0, r6
 800b394:	dbe7      	blt.n	800b366 <__gethex+0x3ea>
 800b396:	e7f0      	b.n	800b37a <__gethex+0x3fe>
 800b398:	0800c269 	.word	0x0800c269

0800b39c <L_shift>:
 800b39c:	f1c2 0208 	rsb	r2, r2, #8
 800b3a0:	0092      	lsls	r2, r2, #2
 800b3a2:	b570      	push	{r4, r5, r6, lr}
 800b3a4:	f1c2 0620 	rsb	r6, r2, #32
 800b3a8:	6843      	ldr	r3, [r0, #4]
 800b3aa:	6804      	ldr	r4, [r0, #0]
 800b3ac:	fa03 f506 	lsl.w	r5, r3, r6
 800b3b0:	432c      	orrs	r4, r5
 800b3b2:	40d3      	lsrs	r3, r2
 800b3b4:	6004      	str	r4, [r0, #0]
 800b3b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3ba:	4288      	cmp	r0, r1
 800b3bc:	d3f4      	bcc.n	800b3a8 <L_shift+0xc>
 800b3be:	bd70      	pop	{r4, r5, r6, pc}

0800b3c0 <__match>:
 800b3c0:	b530      	push	{r4, r5, lr}
 800b3c2:	6803      	ldr	r3, [r0, #0]
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3ca:	b914      	cbnz	r4, 800b3d2 <__match+0x12>
 800b3cc:	6003      	str	r3, [r0, #0]
 800b3ce:	2001      	movs	r0, #1
 800b3d0:	bd30      	pop	{r4, r5, pc}
 800b3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b3da:	2d19      	cmp	r5, #25
 800b3dc:	bf98      	it	ls
 800b3de:	3220      	addls	r2, #32
 800b3e0:	42a2      	cmp	r2, r4
 800b3e2:	d0f0      	beq.n	800b3c6 <__match+0x6>
 800b3e4:	2000      	movs	r0, #0
 800b3e6:	e7f3      	b.n	800b3d0 <__match+0x10>

0800b3e8 <__hexnan>:
 800b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ec:	680b      	ldr	r3, [r1, #0]
 800b3ee:	6801      	ldr	r1, [r0, #0]
 800b3f0:	115e      	asrs	r6, r3, #5
 800b3f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3f6:	f013 031f 	ands.w	r3, r3, #31
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	bf18      	it	ne
 800b3fe:	3604      	addne	r6, #4
 800b400:	2500      	movs	r5, #0
 800b402:	1f37      	subs	r7, r6, #4
 800b404:	4682      	mov	sl, r0
 800b406:	4690      	mov	r8, r2
 800b408:	9301      	str	r3, [sp, #4]
 800b40a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b40e:	46b9      	mov	r9, r7
 800b410:	463c      	mov	r4, r7
 800b412:	9502      	str	r5, [sp, #8]
 800b414:	46ab      	mov	fp, r5
 800b416:	784a      	ldrb	r2, [r1, #1]
 800b418:	1c4b      	adds	r3, r1, #1
 800b41a:	9303      	str	r3, [sp, #12]
 800b41c:	b342      	cbz	r2, 800b470 <__hexnan+0x88>
 800b41e:	4610      	mov	r0, r2
 800b420:	9105      	str	r1, [sp, #20]
 800b422:	9204      	str	r2, [sp, #16]
 800b424:	f7ff fd94 	bl	800af50 <__hexdig_fun>
 800b428:	2800      	cmp	r0, #0
 800b42a:	d151      	bne.n	800b4d0 <__hexnan+0xe8>
 800b42c:	9a04      	ldr	r2, [sp, #16]
 800b42e:	9905      	ldr	r1, [sp, #20]
 800b430:	2a20      	cmp	r2, #32
 800b432:	d818      	bhi.n	800b466 <__hexnan+0x7e>
 800b434:	9b02      	ldr	r3, [sp, #8]
 800b436:	459b      	cmp	fp, r3
 800b438:	dd13      	ble.n	800b462 <__hexnan+0x7a>
 800b43a:	454c      	cmp	r4, r9
 800b43c:	d206      	bcs.n	800b44c <__hexnan+0x64>
 800b43e:	2d07      	cmp	r5, #7
 800b440:	dc04      	bgt.n	800b44c <__hexnan+0x64>
 800b442:	462a      	mov	r2, r5
 800b444:	4649      	mov	r1, r9
 800b446:	4620      	mov	r0, r4
 800b448:	f7ff ffa8 	bl	800b39c <L_shift>
 800b44c:	4544      	cmp	r4, r8
 800b44e:	d952      	bls.n	800b4f6 <__hexnan+0x10e>
 800b450:	2300      	movs	r3, #0
 800b452:	f1a4 0904 	sub.w	r9, r4, #4
 800b456:	f844 3c04 	str.w	r3, [r4, #-4]
 800b45a:	f8cd b008 	str.w	fp, [sp, #8]
 800b45e:	464c      	mov	r4, r9
 800b460:	461d      	mov	r5, r3
 800b462:	9903      	ldr	r1, [sp, #12]
 800b464:	e7d7      	b.n	800b416 <__hexnan+0x2e>
 800b466:	2a29      	cmp	r2, #41	@ 0x29
 800b468:	d157      	bne.n	800b51a <__hexnan+0x132>
 800b46a:	3102      	adds	r1, #2
 800b46c:	f8ca 1000 	str.w	r1, [sl]
 800b470:	f1bb 0f00 	cmp.w	fp, #0
 800b474:	d051      	beq.n	800b51a <__hexnan+0x132>
 800b476:	454c      	cmp	r4, r9
 800b478:	d206      	bcs.n	800b488 <__hexnan+0xa0>
 800b47a:	2d07      	cmp	r5, #7
 800b47c:	dc04      	bgt.n	800b488 <__hexnan+0xa0>
 800b47e:	462a      	mov	r2, r5
 800b480:	4649      	mov	r1, r9
 800b482:	4620      	mov	r0, r4
 800b484:	f7ff ff8a 	bl	800b39c <L_shift>
 800b488:	4544      	cmp	r4, r8
 800b48a:	d936      	bls.n	800b4fa <__hexnan+0x112>
 800b48c:	f1a8 0204 	sub.w	r2, r8, #4
 800b490:	4623      	mov	r3, r4
 800b492:	f853 1b04 	ldr.w	r1, [r3], #4
 800b496:	f842 1f04 	str.w	r1, [r2, #4]!
 800b49a:	429f      	cmp	r7, r3
 800b49c:	d2f9      	bcs.n	800b492 <__hexnan+0xaa>
 800b49e:	1b3b      	subs	r3, r7, r4
 800b4a0:	f023 0303 	bic.w	r3, r3, #3
 800b4a4:	3304      	adds	r3, #4
 800b4a6:	3401      	adds	r4, #1
 800b4a8:	3e03      	subs	r6, #3
 800b4aa:	42b4      	cmp	r4, r6
 800b4ac:	bf88      	it	hi
 800b4ae:	2304      	movhi	r3, #4
 800b4b0:	4443      	add	r3, r8
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f843 2b04 	str.w	r2, [r3], #4
 800b4b8:	429f      	cmp	r7, r3
 800b4ba:	d2fb      	bcs.n	800b4b4 <__hexnan+0xcc>
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	b91b      	cbnz	r3, 800b4c8 <__hexnan+0xe0>
 800b4c0:	4547      	cmp	r7, r8
 800b4c2:	d128      	bne.n	800b516 <__hexnan+0x12e>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	603b      	str	r3, [r7, #0]
 800b4c8:	2005      	movs	r0, #5
 800b4ca:	b007      	add	sp, #28
 800b4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d0:	3501      	adds	r5, #1
 800b4d2:	2d08      	cmp	r5, #8
 800b4d4:	f10b 0b01 	add.w	fp, fp, #1
 800b4d8:	dd06      	ble.n	800b4e8 <__hexnan+0x100>
 800b4da:	4544      	cmp	r4, r8
 800b4dc:	d9c1      	bls.n	800b462 <__hexnan+0x7a>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4e4:	2501      	movs	r5, #1
 800b4e6:	3c04      	subs	r4, #4
 800b4e8:	6822      	ldr	r2, [r4, #0]
 800b4ea:	f000 000f 	and.w	r0, r0, #15
 800b4ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b4f2:	6020      	str	r0, [r4, #0]
 800b4f4:	e7b5      	b.n	800b462 <__hexnan+0x7a>
 800b4f6:	2508      	movs	r5, #8
 800b4f8:	e7b3      	b.n	800b462 <__hexnan+0x7a>
 800b4fa:	9b01      	ldr	r3, [sp, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d0dd      	beq.n	800b4bc <__hexnan+0xd4>
 800b500:	f1c3 0320 	rsb	r3, r3, #32
 800b504:	f04f 32ff 	mov.w	r2, #4294967295
 800b508:	40da      	lsrs	r2, r3
 800b50a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b50e:	4013      	ands	r3, r2
 800b510:	f846 3c04 	str.w	r3, [r6, #-4]
 800b514:	e7d2      	b.n	800b4bc <__hexnan+0xd4>
 800b516:	3f04      	subs	r7, #4
 800b518:	e7d0      	b.n	800b4bc <__hexnan+0xd4>
 800b51a:	2004      	movs	r0, #4
 800b51c:	e7d5      	b.n	800b4ca <__hexnan+0xe2>

0800b51e <__ascii_mbtowc>:
 800b51e:	b082      	sub	sp, #8
 800b520:	b901      	cbnz	r1, 800b524 <__ascii_mbtowc+0x6>
 800b522:	a901      	add	r1, sp, #4
 800b524:	b142      	cbz	r2, 800b538 <__ascii_mbtowc+0x1a>
 800b526:	b14b      	cbz	r3, 800b53c <__ascii_mbtowc+0x1e>
 800b528:	7813      	ldrb	r3, [r2, #0]
 800b52a:	600b      	str	r3, [r1, #0]
 800b52c:	7812      	ldrb	r2, [r2, #0]
 800b52e:	1e10      	subs	r0, r2, #0
 800b530:	bf18      	it	ne
 800b532:	2001      	movne	r0, #1
 800b534:	b002      	add	sp, #8
 800b536:	4770      	bx	lr
 800b538:	4610      	mov	r0, r2
 800b53a:	e7fb      	b.n	800b534 <__ascii_mbtowc+0x16>
 800b53c:	f06f 0001 	mvn.w	r0, #1
 800b540:	e7f8      	b.n	800b534 <__ascii_mbtowc+0x16>

0800b542 <_realloc_r>:
 800b542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b546:	4607      	mov	r7, r0
 800b548:	4614      	mov	r4, r2
 800b54a:	460d      	mov	r5, r1
 800b54c:	b921      	cbnz	r1, 800b558 <_realloc_r+0x16>
 800b54e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b552:	4611      	mov	r1, r2
 800b554:	f7fd be68 	b.w	8009228 <_malloc_r>
 800b558:	b92a      	cbnz	r2, 800b566 <_realloc_r+0x24>
 800b55a:	f7fd fdf1 	bl	8009140 <_free_r>
 800b55e:	4625      	mov	r5, r4
 800b560:	4628      	mov	r0, r5
 800b562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b566:	f000 f840 	bl	800b5ea <_malloc_usable_size_r>
 800b56a:	4284      	cmp	r4, r0
 800b56c:	4606      	mov	r6, r0
 800b56e:	d802      	bhi.n	800b576 <_realloc_r+0x34>
 800b570:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b574:	d8f4      	bhi.n	800b560 <_realloc_r+0x1e>
 800b576:	4621      	mov	r1, r4
 800b578:	4638      	mov	r0, r7
 800b57a:	f7fd fe55 	bl	8009228 <_malloc_r>
 800b57e:	4680      	mov	r8, r0
 800b580:	b908      	cbnz	r0, 800b586 <_realloc_r+0x44>
 800b582:	4645      	mov	r5, r8
 800b584:	e7ec      	b.n	800b560 <_realloc_r+0x1e>
 800b586:	42b4      	cmp	r4, r6
 800b588:	4622      	mov	r2, r4
 800b58a:	4629      	mov	r1, r5
 800b58c:	bf28      	it	cs
 800b58e:	4632      	movcs	r2, r6
 800b590:	f7ff fc44 	bl	800ae1c <memcpy>
 800b594:	4629      	mov	r1, r5
 800b596:	4638      	mov	r0, r7
 800b598:	f7fd fdd2 	bl	8009140 <_free_r>
 800b59c:	e7f1      	b.n	800b582 <_realloc_r+0x40>

0800b59e <__ascii_wctomb>:
 800b59e:	4603      	mov	r3, r0
 800b5a0:	4608      	mov	r0, r1
 800b5a2:	b141      	cbz	r1, 800b5b6 <__ascii_wctomb+0x18>
 800b5a4:	2aff      	cmp	r2, #255	@ 0xff
 800b5a6:	d904      	bls.n	800b5b2 <__ascii_wctomb+0x14>
 800b5a8:	228a      	movs	r2, #138	@ 0x8a
 800b5aa:	601a      	str	r2, [r3, #0]
 800b5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b0:	4770      	bx	lr
 800b5b2:	700a      	strb	r2, [r1, #0]
 800b5b4:	2001      	movs	r0, #1
 800b5b6:	4770      	bx	lr

0800b5b8 <fiprintf>:
 800b5b8:	b40e      	push	{r1, r2, r3}
 800b5ba:	b503      	push	{r0, r1, lr}
 800b5bc:	4601      	mov	r1, r0
 800b5be:	ab03      	add	r3, sp, #12
 800b5c0:	4805      	ldr	r0, [pc, #20]	@ (800b5d8 <fiprintf+0x20>)
 800b5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5c6:	6800      	ldr	r0, [r0, #0]
 800b5c8:	9301      	str	r3, [sp, #4]
 800b5ca:	f000 f83f 	bl	800b64c <_vfiprintf_r>
 800b5ce:	b002      	add	sp, #8
 800b5d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5d4:	b003      	add	sp, #12
 800b5d6:	4770      	bx	lr
 800b5d8:	20000030 	.word	0x20000030

0800b5dc <abort>:
 800b5dc:	b508      	push	{r3, lr}
 800b5de:	2006      	movs	r0, #6
 800b5e0:	f000 fa08 	bl	800b9f4 <raise>
 800b5e4:	2001      	movs	r0, #1
 800b5e6:	f7f6 f86e 	bl	80016c6 <_exit>

0800b5ea <_malloc_usable_size_r>:
 800b5ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5ee:	1f18      	subs	r0, r3, #4
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	bfbc      	itt	lt
 800b5f4:	580b      	ldrlt	r3, [r1, r0]
 800b5f6:	18c0      	addlt	r0, r0, r3
 800b5f8:	4770      	bx	lr

0800b5fa <__sfputc_r>:
 800b5fa:	6893      	ldr	r3, [r2, #8]
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	b410      	push	{r4}
 800b602:	6093      	str	r3, [r2, #8]
 800b604:	da08      	bge.n	800b618 <__sfputc_r+0x1e>
 800b606:	6994      	ldr	r4, [r2, #24]
 800b608:	42a3      	cmp	r3, r4
 800b60a:	db01      	blt.n	800b610 <__sfputc_r+0x16>
 800b60c:	290a      	cmp	r1, #10
 800b60e:	d103      	bne.n	800b618 <__sfputc_r+0x1e>
 800b610:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b614:	f000 b932 	b.w	800b87c <__swbuf_r>
 800b618:	6813      	ldr	r3, [r2, #0]
 800b61a:	1c58      	adds	r0, r3, #1
 800b61c:	6010      	str	r0, [r2, #0]
 800b61e:	7019      	strb	r1, [r3, #0]
 800b620:	4608      	mov	r0, r1
 800b622:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <__sfputs_r>:
 800b628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b62a:	4606      	mov	r6, r0
 800b62c:	460f      	mov	r7, r1
 800b62e:	4614      	mov	r4, r2
 800b630:	18d5      	adds	r5, r2, r3
 800b632:	42ac      	cmp	r4, r5
 800b634:	d101      	bne.n	800b63a <__sfputs_r+0x12>
 800b636:	2000      	movs	r0, #0
 800b638:	e007      	b.n	800b64a <__sfputs_r+0x22>
 800b63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b63e:	463a      	mov	r2, r7
 800b640:	4630      	mov	r0, r6
 800b642:	f7ff ffda 	bl	800b5fa <__sfputc_r>
 800b646:	1c43      	adds	r3, r0, #1
 800b648:	d1f3      	bne.n	800b632 <__sfputs_r+0xa>
 800b64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b64c <_vfiprintf_r>:
 800b64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b650:	460d      	mov	r5, r1
 800b652:	b09d      	sub	sp, #116	@ 0x74
 800b654:	4614      	mov	r4, r2
 800b656:	4698      	mov	r8, r3
 800b658:	4606      	mov	r6, r0
 800b65a:	b118      	cbz	r0, 800b664 <_vfiprintf_r+0x18>
 800b65c:	6a03      	ldr	r3, [r0, #32]
 800b65e:	b90b      	cbnz	r3, 800b664 <_vfiprintf_r+0x18>
 800b660:	f7fc fdb8 	bl	80081d4 <__sinit>
 800b664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b666:	07d9      	lsls	r1, r3, #31
 800b668:	d405      	bmi.n	800b676 <_vfiprintf_r+0x2a>
 800b66a:	89ab      	ldrh	r3, [r5, #12]
 800b66c:	059a      	lsls	r2, r3, #22
 800b66e:	d402      	bmi.n	800b676 <_vfiprintf_r+0x2a>
 800b670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b672:	f7fc ff04 	bl	800847e <__retarget_lock_acquire_recursive>
 800b676:	89ab      	ldrh	r3, [r5, #12]
 800b678:	071b      	lsls	r3, r3, #28
 800b67a:	d501      	bpl.n	800b680 <_vfiprintf_r+0x34>
 800b67c:	692b      	ldr	r3, [r5, #16]
 800b67e:	b99b      	cbnz	r3, 800b6a8 <_vfiprintf_r+0x5c>
 800b680:	4629      	mov	r1, r5
 800b682:	4630      	mov	r0, r6
 800b684:	f000 f938 	bl	800b8f8 <__swsetup_r>
 800b688:	b170      	cbz	r0, 800b6a8 <_vfiprintf_r+0x5c>
 800b68a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b68c:	07dc      	lsls	r4, r3, #31
 800b68e:	d504      	bpl.n	800b69a <_vfiprintf_r+0x4e>
 800b690:	f04f 30ff 	mov.w	r0, #4294967295
 800b694:	b01d      	add	sp, #116	@ 0x74
 800b696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b69a:	89ab      	ldrh	r3, [r5, #12]
 800b69c:	0598      	lsls	r0, r3, #22
 800b69e:	d4f7      	bmi.n	800b690 <_vfiprintf_r+0x44>
 800b6a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6a2:	f7fc feed 	bl	8008480 <__retarget_lock_release_recursive>
 800b6a6:	e7f3      	b.n	800b690 <_vfiprintf_r+0x44>
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ac:	2320      	movs	r3, #32
 800b6ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6b6:	2330      	movs	r3, #48	@ 0x30
 800b6b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b868 <_vfiprintf_r+0x21c>
 800b6bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6c0:	f04f 0901 	mov.w	r9, #1
 800b6c4:	4623      	mov	r3, r4
 800b6c6:	469a      	mov	sl, r3
 800b6c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6cc:	b10a      	cbz	r2, 800b6d2 <_vfiprintf_r+0x86>
 800b6ce:	2a25      	cmp	r2, #37	@ 0x25
 800b6d0:	d1f9      	bne.n	800b6c6 <_vfiprintf_r+0x7a>
 800b6d2:	ebba 0b04 	subs.w	fp, sl, r4
 800b6d6:	d00b      	beq.n	800b6f0 <_vfiprintf_r+0xa4>
 800b6d8:	465b      	mov	r3, fp
 800b6da:	4622      	mov	r2, r4
 800b6dc:	4629      	mov	r1, r5
 800b6de:	4630      	mov	r0, r6
 800b6e0:	f7ff ffa2 	bl	800b628 <__sfputs_r>
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	f000 80a7 	beq.w	800b838 <_vfiprintf_r+0x1ec>
 800b6ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6ec:	445a      	add	r2, fp
 800b6ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f000 809f 	beq.w	800b838 <_vfiprintf_r+0x1ec>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b704:	f10a 0a01 	add.w	sl, sl, #1
 800b708:	9304      	str	r3, [sp, #16]
 800b70a:	9307      	str	r3, [sp, #28]
 800b70c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b710:	931a      	str	r3, [sp, #104]	@ 0x68
 800b712:	4654      	mov	r4, sl
 800b714:	2205      	movs	r2, #5
 800b716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b71a:	4853      	ldr	r0, [pc, #332]	@ (800b868 <_vfiprintf_r+0x21c>)
 800b71c:	f7f4 fd60 	bl	80001e0 <memchr>
 800b720:	9a04      	ldr	r2, [sp, #16]
 800b722:	b9d8      	cbnz	r0, 800b75c <_vfiprintf_r+0x110>
 800b724:	06d1      	lsls	r1, r2, #27
 800b726:	bf44      	itt	mi
 800b728:	2320      	movmi	r3, #32
 800b72a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b72e:	0713      	lsls	r3, r2, #28
 800b730:	bf44      	itt	mi
 800b732:	232b      	movmi	r3, #43	@ 0x2b
 800b734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b738:	f89a 3000 	ldrb.w	r3, [sl]
 800b73c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b73e:	d015      	beq.n	800b76c <_vfiprintf_r+0x120>
 800b740:	9a07      	ldr	r2, [sp, #28]
 800b742:	4654      	mov	r4, sl
 800b744:	2000      	movs	r0, #0
 800b746:	f04f 0c0a 	mov.w	ip, #10
 800b74a:	4621      	mov	r1, r4
 800b74c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b750:	3b30      	subs	r3, #48	@ 0x30
 800b752:	2b09      	cmp	r3, #9
 800b754:	d94b      	bls.n	800b7ee <_vfiprintf_r+0x1a2>
 800b756:	b1b0      	cbz	r0, 800b786 <_vfiprintf_r+0x13a>
 800b758:	9207      	str	r2, [sp, #28]
 800b75a:	e014      	b.n	800b786 <_vfiprintf_r+0x13a>
 800b75c:	eba0 0308 	sub.w	r3, r0, r8
 800b760:	fa09 f303 	lsl.w	r3, r9, r3
 800b764:	4313      	orrs	r3, r2
 800b766:	9304      	str	r3, [sp, #16]
 800b768:	46a2      	mov	sl, r4
 800b76a:	e7d2      	b.n	800b712 <_vfiprintf_r+0xc6>
 800b76c:	9b03      	ldr	r3, [sp, #12]
 800b76e:	1d19      	adds	r1, r3, #4
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	9103      	str	r1, [sp, #12]
 800b774:	2b00      	cmp	r3, #0
 800b776:	bfbb      	ittet	lt
 800b778:	425b      	neglt	r3, r3
 800b77a:	f042 0202 	orrlt.w	r2, r2, #2
 800b77e:	9307      	strge	r3, [sp, #28]
 800b780:	9307      	strlt	r3, [sp, #28]
 800b782:	bfb8      	it	lt
 800b784:	9204      	strlt	r2, [sp, #16]
 800b786:	7823      	ldrb	r3, [r4, #0]
 800b788:	2b2e      	cmp	r3, #46	@ 0x2e
 800b78a:	d10a      	bne.n	800b7a2 <_vfiprintf_r+0x156>
 800b78c:	7863      	ldrb	r3, [r4, #1]
 800b78e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b790:	d132      	bne.n	800b7f8 <_vfiprintf_r+0x1ac>
 800b792:	9b03      	ldr	r3, [sp, #12]
 800b794:	1d1a      	adds	r2, r3, #4
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	9203      	str	r2, [sp, #12]
 800b79a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b79e:	3402      	adds	r4, #2
 800b7a0:	9305      	str	r3, [sp, #20]
 800b7a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b878 <_vfiprintf_r+0x22c>
 800b7a6:	7821      	ldrb	r1, [r4, #0]
 800b7a8:	2203      	movs	r2, #3
 800b7aa:	4650      	mov	r0, sl
 800b7ac:	f7f4 fd18 	bl	80001e0 <memchr>
 800b7b0:	b138      	cbz	r0, 800b7c2 <_vfiprintf_r+0x176>
 800b7b2:	9b04      	ldr	r3, [sp, #16]
 800b7b4:	eba0 000a 	sub.w	r0, r0, sl
 800b7b8:	2240      	movs	r2, #64	@ 0x40
 800b7ba:	4082      	lsls	r2, r0
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	3401      	adds	r4, #1
 800b7c0:	9304      	str	r3, [sp, #16]
 800b7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c6:	4829      	ldr	r0, [pc, #164]	@ (800b86c <_vfiprintf_r+0x220>)
 800b7c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7cc:	2206      	movs	r2, #6
 800b7ce:	f7f4 fd07 	bl	80001e0 <memchr>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	d03f      	beq.n	800b856 <_vfiprintf_r+0x20a>
 800b7d6:	4b26      	ldr	r3, [pc, #152]	@ (800b870 <_vfiprintf_r+0x224>)
 800b7d8:	bb1b      	cbnz	r3, 800b822 <_vfiprintf_r+0x1d6>
 800b7da:	9b03      	ldr	r3, [sp, #12]
 800b7dc:	3307      	adds	r3, #7
 800b7de:	f023 0307 	bic.w	r3, r3, #7
 800b7e2:	3308      	adds	r3, #8
 800b7e4:	9303      	str	r3, [sp, #12]
 800b7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7e8:	443b      	add	r3, r7
 800b7ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7ec:	e76a      	b.n	800b6c4 <_vfiprintf_r+0x78>
 800b7ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	2001      	movs	r0, #1
 800b7f6:	e7a8      	b.n	800b74a <_vfiprintf_r+0xfe>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	3401      	adds	r4, #1
 800b7fc:	9305      	str	r3, [sp, #20]
 800b7fe:	4619      	mov	r1, r3
 800b800:	f04f 0c0a 	mov.w	ip, #10
 800b804:	4620      	mov	r0, r4
 800b806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b80a:	3a30      	subs	r2, #48	@ 0x30
 800b80c:	2a09      	cmp	r2, #9
 800b80e:	d903      	bls.n	800b818 <_vfiprintf_r+0x1cc>
 800b810:	2b00      	cmp	r3, #0
 800b812:	d0c6      	beq.n	800b7a2 <_vfiprintf_r+0x156>
 800b814:	9105      	str	r1, [sp, #20]
 800b816:	e7c4      	b.n	800b7a2 <_vfiprintf_r+0x156>
 800b818:	fb0c 2101 	mla	r1, ip, r1, r2
 800b81c:	4604      	mov	r4, r0
 800b81e:	2301      	movs	r3, #1
 800b820:	e7f0      	b.n	800b804 <_vfiprintf_r+0x1b8>
 800b822:	ab03      	add	r3, sp, #12
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	462a      	mov	r2, r5
 800b828:	4b12      	ldr	r3, [pc, #72]	@ (800b874 <_vfiprintf_r+0x228>)
 800b82a:	a904      	add	r1, sp, #16
 800b82c:	4630      	mov	r0, r6
 800b82e:	f7fb fe81 	bl	8007534 <_printf_float>
 800b832:	4607      	mov	r7, r0
 800b834:	1c78      	adds	r0, r7, #1
 800b836:	d1d6      	bne.n	800b7e6 <_vfiprintf_r+0x19a>
 800b838:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b83a:	07d9      	lsls	r1, r3, #31
 800b83c:	d405      	bmi.n	800b84a <_vfiprintf_r+0x1fe>
 800b83e:	89ab      	ldrh	r3, [r5, #12]
 800b840:	059a      	lsls	r2, r3, #22
 800b842:	d402      	bmi.n	800b84a <_vfiprintf_r+0x1fe>
 800b844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b846:	f7fc fe1b 	bl	8008480 <__retarget_lock_release_recursive>
 800b84a:	89ab      	ldrh	r3, [r5, #12]
 800b84c:	065b      	lsls	r3, r3, #25
 800b84e:	f53f af1f 	bmi.w	800b690 <_vfiprintf_r+0x44>
 800b852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b854:	e71e      	b.n	800b694 <_vfiprintf_r+0x48>
 800b856:	ab03      	add	r3, sp, #12
 800b858:	9300      	str	r3, [sp, #0]
 800b85a:	462a      	mov	r2, r5
 800b85c:	4b05      	ldr	r3, [pc, #20]	@ (800b874 <_vfiprintf_r+0x228>)
 800b85e:	a904      	add	r1, sp, #16
 800b860:	4630      	mov	r0, r6
 800b862:	f7fc f8ff 	bl	8007a64 <_printf_i>
 800b866:	e7e4      	b.n	800b832 <_vfiprintf_r+0x1e6>
 800b868:	0800c2d5 	.word	0x0800c2d5
 800b86c:	0800c2df 	.word	0x0800c2df
 800b870:	08007535 	.word	0x08007535
 800b874:	0800b629 	.word	0x0800b629
 800b878:	0800c2db 	.word	0x0800c2db

0800b87c <__swbuf_r>:
 800b87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87e:	460e      	mov	r6, r1
 800b880:	4614      	mov	r4, r2
 800b882:	4605      	mov	r5, r0
 800b884:	b118      	cbz	r0, 800b88e <__swbuf_r+0x12>
 800b886:	6a03      	ldr	r3, [r0, #32]
 800b888:	b90b      	cbnz	r3, 800b88e <__swbuf_r+0x12>
 800b88a:	f7fc fca3 	bl	80081d4 <__sinit>
 800b88e:	69a3      	ldr	r3, [r4, #24]
 800b890:	60a3      	str	r3, [r4, #8]
 800b892:	89a3      	ldrh	r3, [r4, #12]
 800b894:	071a      	lsls	r2, r3, #28
 800b896:	d501      	bpl.n	800b89c <__swbuf_r+0x20>
 800b898:	6923      	ldr	r3, [r4, #16]
 800b89a:	b943      	cbnz	r3, 800b8ae <__swbuf_r+0x32>
 800b89c:	4621      	mov	r1, r4
 800b89e:	4628      	mov	r0, r5
 800b8a0:	f000 f82a 	bl	800b8f8 <__swsetup_r>
 800b8a4:	b118      	cbz	r0, 800b8ae <__swbuf_r+0x32>
 800b8a6:	f04f 37ff 	mov.w	r7, #4294967295
 800b8aa:	4638      	mov	r0, r7
 800b8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	6922      	ldr	r2, [r4, #16]
 800b8b2:	1a98      	subs	r0, r3, r2
 800b8b4:	6963      	ldr	r3, [r4, #20]
 800b8b6:	b2f6      	uxtb	r6, r6
 800b8b8:	4283      	cmp	r3, r0
 800b8ba:	4637      	mov	r7, r6
 800b8bc:	dc05      	bgt.n	800b8ca <__swbuf_r+0x4e>
 800b8be:	4621      	mov	r1, r4
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	f7ff fa47 	bl	800ad54 <_fflush_r>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	d1ed      	bne.n	800b8a6 <__swbuf_r+0x2a>
 800b8ca:	68a3      	ldr	r3, [r4, #8]
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	60a3      	str	r3, [r4, #8]
 800b8d0:	6823      	ldr	r3, [r4, #0]
 800b8d2:	1c5a      	adds	r2, r3, #1
 800b8d4:	6022      	str	r2, [r4, #0]
 800b8d6:	701e      	strb	r6, [r3, #0]
 800b8d8:	6962      	ldr	r2, [r4, #20]
 800b8da:	1c43      	adds	r3, r0, #1
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d004      	beq.n	800b8ea <__swbuf_r+0x6e>
 800b8e0:	89a3      	ldrh	r3, [r4, #12]
 800b8e2:	07db      	lsls	r3, r3, #31
 800b8e4:	d5e1      	bpl.n	800b8aa <__swbuf_r+0x2e>
 800b8e6:	2e0a      	cmp	r6, #10
 800b8e8:	d1df      	bne.n	800b8aa <__swbuf_r+0x2e>
 800b8ea:	4621      	mov	r1, r4
 800b8ec:	4628      	mov	r0, r5
 800b8ee:	f7ff fa31 	bl	800ad54 <_fflush_r>
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d0d9      	beq.n	800b8aa <__swbuf_r+0x2e>
 800b8f6:	e7d6      	b.n	800b8a6 <__swbuf_r+0x2a>

0800b8f8 <__swsetup_r>:
 800b8f8:	b538      	push	{r3, r4, r5, lr}
 800b8fa:	4b29      	ldr	r3, [pc, #164]	@ (800b9a0 <__swsetup_r+0xa8>)
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	6818      	ldr	r0, [r3, #0]
 800b900:	460c      	mov	r4, r1
 800b902:	b118      	cbz	r0, 800b90c <__swsetup_r+0x14>
 800b904:	6a03      	ldr	r3, [r0, #32]
 800b906:	b90b      	cbnz	r3, 800b90c <__swsetup_r+0x14>
 800b908:	f7fc fc64 	bl	80081d4 <__sinit>
 800b90c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b910:	0719      	lsls	r1, r3, #28
 800b912:	d422      	bmi.n	800b95a <__swsetup_r+0x62>
 800b914:	06da      	lsls	r2, r3, #27
 800b916:	d407      	bmi.n	800b928 <__swsetup_r+0x30>
 800b918:	2209      	movs	r2, #9
 800b91a:	602a      	str	r2, [r5, #0]
 800b91c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b920:	81a3      	strh	r3, [r4, #12]
 800b922:	f04f 30ff 	mov.w	r0, #4294967295
 800b926:	e033      	b.n	800b990 <__swsetup_r+0x98>
 800b928:	0758      	lsls	r0, r3, #29
 800b92a:	d512      	bpl.n	800b952 <__swsetup_r+0x5a>
 800b92c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b92e:	b141      	cbz	r1, 800b942 <__swsetup_r+0x4a>
 800b930:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b934:	4299      	cmp	r1, r3
 800b936:	d002      	beq.n	800b93e <__swsetup_r+0x46>
 800b938:	4628      	mov	r0, r5
 800b93a:	f7fd fc01 	bl	8009140 <_free_r>
 800b93e:	2300      	movs	r3, #0
 800b940:	6363      	str	r3, [r4, #52]	@ 0x34
 800b942:	89a3      	ldrh	r3, [r4, #12]
 800b944:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b948:	81a3      	strh	r3, [r4, #12]
 800b94a:	2300      	movs	r3, #0
 800b94c:	6063      	str	r3, [r4, #4]
 800b94e:	6923      	ldr	r3, [r4, #16]
 800b950:	6023      	str	r3, [r4, #0]
 800b952:	89a3      	ldrh	r3, [r4, #12]
 800b954:	f043 0308 	orr.w	r3, r3, #8
 800b958:	81a3      	strh	r3, [r4, #12]
 800b95a:	6923      	ldr	r3, [r4, #16]
 800b95c:	b94b      	cbnz	r3, 800b972 <__swsetup_r+0x7a>
 800b95e:	89a3      	ldrh	r3, [r4, #12]
 800b960:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b968:	d003      	beq.n	800b972 <__swsetup_r+0x7a>
 800b96a:	4621      	mov	r1, r4
 800b96c:	4628      	mov	r0, r5
 800b96e:	f000 f883 	bl	800ba78 <__smakebuf_r>
 800b972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b976:	f013 0201 	ands.w	r2, r3, #1
 800b97a:	d00a      	beq.n	800b992 <__swsetup_r+0x9a>
 800b97c:	2200      	movs	r2, #0
 800b97e:	60a2      	str	r2, [r4, #8]
 800b980:	6962      	ldr	r2, [r4, #20]
 800b982:	4252      	negs	r2, r2
 800b984:	61a2      	str	r2, [r4, #24]
 800b986:	6922      	ldr	r2, [r4, #16]
 800b988:	b942      	cbnz	r2, 800b99c <__swsetup_r+0xa4>
 800b98a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b98e:	d1c5      	bne.n	800b91c <__swsetup_r+0x24>
 800b990:	bd38      	pop	{r3, r4, r5, pc}
 800b992:	0799      	lsls	r1, r3, #30
 800b994:	bf58      	it	pl
 800b996:	6962      	ldrpl	r2, [r4, #20]
 800b998:	60a2      	str	r2, [r4, #8]
 800b99a:	e7f4      	b.n	800b986 <__swsetup_r+0x8e>
 800b99c:	2000      	movs	r0, #0
 800b99e:	e7f7      	b.n	800b990 <__swsetup_r+0x98>
 800b9a0:	20000030 	.word	0x20000030

0800b9a4 <_raise_r>:
 800b9a4:	291f      	cmp	r1, #31
 800b9a6:	b538      	push	{r3, r4, r5, lr}
 800b9a8:	4605      	mov	r5, r0
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	d904      	bls.n	800b9b8 <_raise_r+0x14>
 800b9ae:	2316      	movs	r3, #22
 800b9b0:	6003      	str	r3, [r0, #0]
 800b9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b6:	bd38      	pop	{r3, r4, r5, pc}
 800b9b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b9ba:	b112      	cbz	r2, 800b9c2 <_raise_r+0x1e>
 800b9bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9c0:	b94b      	cbnz	r3, 800b9d6 <_raise_r+0x32>
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	f000 f830 	bl	800ba28 <_getpid_r>
 800b9c8:	4622      	mov	r2, r4
 800b9ca:	4601      	mov	r1, r0
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9d2:	f000 b817 	b.w	800ba04 <_kill_r>
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d00a      	beq.n	800b9f0 <_raise_r+0x4c>
 800b9da:	1c59      	adds	r1, r3, #1
 800b9dc:	d103      	bne.n	800b9e6 <_raise_r+0x42>
 800b9de:	2316      	movs	r3, #22
 800b9e0:	6003      	str	r3, [r0, #0]
 800b9e2:	2001      	movs	r0, #1
 800b9e4:	e7e7      	b.n	800b9b6 <_raise_r+0x12>
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	4798      	blx	r3
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	e7e0      	b.n	800b9b6 <_raise_r+0x12>

0800b9f4 <raise>:
 800b9f4:	4b02      	ldr	r3, [pc, #8]	@ (800ba00 <raise+0xc>)
 800b9f6:	4601      	mov	r1, r0
 800b9f8:	6818      	ldr	r0, [r3, #0]
 800b9fa:	f7ff bfd3 	b.w	800b9a4 <_raise_r>
 800b9fe:	bf00      	nop
 800ba00:	20000030 	.word	0x20000030

0800ba04 <_kill_r>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	4d07      	ldr	r5, [pc, #28]	@ (800ba24 <_kill_r+0x20>)
 800ba08:	2300      	movs	r3, #0
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	4608      	mov	r0, r1
 800ba0e:	4611      	mov	r1, r2
 800ba10:	602b      	str	r3, [r5, #0]
 800ba12:	f7f5 fe48 	bl	80016a6 <_kill>
 800ba16:	1c43      	adds	r3, r0, #1
 800ba18:	d102      	bne.n	800ba20 <_kill_r+0x1c>
 800ba1a:	682b      	ldr	r3, [r5, #0]
 800ba1c:	b103      	cbz	r3, 800ba20 <_kill_r+0x1c>
 800ba1e:	6023      	str	r3, [r4, #0]
 800ba20:	bd38      	pop	{r3, r4, r5, pc}
 800ba22:	bf00      	nop
 800ba24:	20000734 	.word	0x20000734

0800ba28 <_getpid_r>:
 800ba28:	f7f5 be35 	b.w	8001696 <_getpid>

0800ba2c <__swhatbuf_r>:
 800ba2c:	b570      	push	{r4, r5, r6, lr}
 800ba2e:	460c      	mov	r4, r1
 800ba30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba34:	2900      	cmp	r1, #0
 800ba36:	b096      	sub	sp, #88	@ 0x58
 800ba38:	4615      	mov	r5, r2
 800ba3a:	461e      	mov	r6, r3
 800ba3c:	da0d      	bge.n	800ba5a <__swhatbuf_r+0x2e>
 800ba3e:	89a3      	ldrh	r3, [r4, #12]
 800ba40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba44:	f04f 0100 	mov.w	r1, #0
 800ba48:	bf14      	ite	ne
 800ba4a:	2340      	movne	r3, #64	@ 0x40
 800ba4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba50:	2000      	movs	r0, #0
 800ba52:	6031      	str	r1, [r6, #0]
 800ba54:	602b      	str	r3, [r5, #0]
 800ba56:	b016      	add	sp, #88	@ 0x58
 800ba58:	bd70      	pop	{r4, r5, r6, pc}
 800ba5a:	466a      	mov	r2, sp
 800ba5c:	f000 f848 	bl	800baf0 <_fstat_r>
 800ba60:	2800      	cmp	r0, #0
 800ba62:	dbec      	blt.n	800ba3e <__swhatbuf_r+0x12>
 800ba64:	9901      	ldr	r1, [sp, #4]
 800ba66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba6e:	4259      	negs	r1, r3
 800ba70:	4159      	adcs	r1, r3
 800ba72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba76:	e7eb      	b.n	800ba50 <__swhatbuf_r+0x24>

0800ba78 <__smakebuf_r>:
 800ba78:	898b      	ldrh	r3, [r1, #12]
 800ba7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba7c:	079d      	lsls	r5, r3, #30
 800ba7e:	4606      	mov	r6, r0
 800ba80:	460c      	mov	r4, r1
 800ba82:	d507      	bpl.n	800ba94 <__smakebuf_r+0x1c>
 800ba84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	6123      	str	r3, [r4, #16]
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	6163      	str	r3, [r4, #20]
 800ba90:	b003      	add	sp, #12
 800ba92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba94:	ab01      	add	r3, sp, #4
 800ba96:	466a      	mov	r2, sp
 800ba98:	f7ff ffc8 	bl	800ba2c <__swhatbuf_r>
 800ba9c:	9f00      	ldr	r7, [sp, #0]
 800ba9e:	4605      	mov	r5, r0
 800baa0:	4639      	mov	r1, r7
 800baa2:	4630      	mov	r0, r6
 800baa4:	f7fd fbc0 	bl	8009228 <_malloc_r>
 800baa8:	b948      	cbnz	r0, 800babe <__smakebuf_r+0x46>
 800baaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baae:	059a      	lsls	r2, r3, #22
 800bab0:	d4ee      	bmi.n	800ba90 <__smakebuf_r+0x18>
 800bab2:	f023 0303 	bic.w	r3, r3, #3
 800bab6:	f043 0302 	orr.w	r3, r3, #2
 800baba:	81a3      	strh	r3, [r4, #12]
 800babc:	e7e2      	b.n	800ba84 <__smakebuf_r+0xc>
 800babe:	89a3      	ldrh	r3, [r4, #12]
 800bac0:	6020      	str	r0, [r4, #0]
 800bac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bac6:	81a3      	strh	r3, [r4, #12]
 800bac8:	9b01      	ldr	r3, [sp, #4]
 800baca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bace:	b15b      	cbz	r3, 800bae8 <__smakebuf_r+0x70>
 800bad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bad4:	4630      	mov	r0, r6
 800bad6:	f000 f81d 	bl	800bb14 <_isatty_r>
 800bada:	b128      	cbz	r0, 800bae8 <__smakebuf_r+0x70>
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	f023 0303 	bic.w	r3, r3, #3
 800bae2:	f043 0301 	orr.w	r3, r3, #1
 800bae6:	81a3      	strh	r3, [r4, #12]
 800bae8:	89a3      	ldrh	r3, [r4, #12]
 800baea:	431d      	orrs	r5, r3
 800baec:	81a5      	strh	r5, [r4, #12]
 800baee:	e7cf      	b.n	800ba90 <__smakebuf_r+0x18>

0800baf0 <_fstat_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4d07      	ldr	r5, [pc, #28]	@ (800bb10 <_fstat_r+0x20>)
 800baf4:	2300      	movs	r3, #0
 800baf6:	4604      	mov	r4, r0
 800baf8:	4608      	mov	r0, r1
 800bafa:	4611      	mov	r1, r2
 800bafc:	602b      	str	r3, [r5, #0]
 800bafe:	f7f5 fe32 	bl	8001766 <_fstat>
 800bb02:	1c43      	adds	r3, r0, #1
 800bb04:	d102      	bne.n	800bb0c <_fstat_r+0x1c>
 800bb06:	682b      	ldr	r3, [r5, #0]
 800bb08:	b103      	cbz	r3, 800bb0c <_fstat_r+0x1c>
 800bb0a:	6023      	str	r3, [r4, #0]
 800bb0c:	bd38      	pop	{r3, r4, r5, pc}
 800bb0e:	bf00      	nop
 800bb10:	20000734 	.word	0x20000734

0800bb14 <_isatty_r>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	4d06      	ldr	r5, [pc, #24]	@ (800bb30 <_isatty_r+0x1c>)
 800bb18:	2300      	movs	r3, #0
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	4608      	mov	r0, r1
 800bb1e:	602b      	str	r3, [r5, #0]
 800bb20:	f7f5 fe31 	bl	8001786 <_isatty>
 800bb24:	1c43      	adds	r3, r0, #1
 800bb26:	d102      	bne.n	800bb2e <_isatty_r+0x1a>
 800bb28:	682b      	ldr	r3, [r5, #0]
 800bb2a:	b103      	cbz	r3, 800bb2e <_isatty_r+0x1a>
 800bb2c:	6023      	str	r3, [r4, #0]
 800bb2e:	bd38      	pop	{r3, r4, r5, pc}
 800bb30:	20000734 	.word	0x20000734

0800bb34 <_init>:
 800bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb36:	bf00      	nop
 800bb38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb3a:	bc08      	pop	{r3}
 800bb3c:	469e      	mov	lr, r3
 800bb3e:	4770      	bx	lr

0800bb40 <_fini>:
 800bb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb42:	bf00      	nop
 800bb44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb46:	bc08      	pop	{r3}
 800bb48:	469e      	mov	lr, r3
 800bb4a:	4770      	bx	lr
